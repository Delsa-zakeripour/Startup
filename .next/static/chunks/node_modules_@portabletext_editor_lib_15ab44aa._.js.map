{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"use-editor.js","sources":["file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/internal-utils/global-scope.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/internal-utils/globally-scoped-context.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/editor-context.tsx","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/use-editor.ts"],"sourcesContent":["/**\n * Gets the global scope instance in a given environment.\n *\n * The strategy is to return the most modern, and if not, the most common:\n * - The `globalThis` variable is the modern approach to accessing the global scope\n * - The `window` variable is the global scope in a web browser\n * - The `self` variable is the global scope in workers and others\n * - The `global` variable is the global scope in Node.js\n */\nfunction getGlobalScope() {\n  if (typeof globalThis !== 'undefined') return globalThis\n  if (typeof window !== 'undefined') return window\n  if (typeof self !== 'undefined') return self\n  if (typeof global !== 'undefined') return global\n\n  throw new Error('@portabletext/editor: could not locate global scope')\n}\n\nexport const globalScope = getGlobalScope() as any\n","import {createContext, type Context} from 'react'\nimport {globalScope} from './global-scope'\n\n/**\n * As `@portabletext/editor` is declared as a dependency, and may be\n * duplicated, sometimes across major versions it's critical that vital\n * React Contexts are shared even when there is a duplicate.\n *\n * We have to support a Sanity Plugin being able to call hooks like\n * `useEditor`, and then read the context setup by `sanity`, which calls\n * `EditorProvider`, even if the provider and hook are different instances in\n * memory.\n *\n * For this reason it's vital that all changes to globally scoped providers\n * remain fully backwards compatible.\n */\nexport function createGloballyScopedContext<\n  ContextType,\n  const T extends ContextType = ContextType,\n>(\n  /**\n   * Enforce that all Symbol.for keys used for globally scoped contexts have a predictable prefix\n   */\n  key: `@portabletext/editor/context/${string}`,\n  defaultValue: T,\n): Context<ContextType> {\n  const symbol = Symbol.for(key)\n\n  /**\n   * Prevent errors about re-renders on React SSR on Next.js App Router\n   */\n  if (typeof document === 'undefined') {\n    return createContext<ContextType>(defaultValue)\n  }\n\n  globalScope[symbol] = globalScope[symbol] ?? createContext<T>(defaultValue)\n\n  return globalScope[symbol]\n}\n","import type {Editor} from '../editor'\nimport {createGloballyScopedContext} from '../internal-utils/globally-scoped-context'\n\nexport const EditorContext = createGloballyScopedContext<Editor | null>(\n  '@portabletext/editor/context/editor',\n  null,\n)\n","import React from 'react'\nimport {EditorContext} from './editor-context'\n\n/**\n * @public\n * Get the current editor context from the `EditorProvider`.\n * Must be used inside the `EditorProvider` component.\n * @returns The current editor object.\n * @example\n * ```tsx\n * import { useEditor } from '@portabletext/editor'\n *\n * function MyComponent() {\n *  const editor = useEditor()\n * }\n * ```\n * @group Hooks\n */\nexport function useEditor() {\n  const editor = React.useContext(EditorContext)\n\n  if (!editor) {\n    throw new Error('No Editor set. Use EditorProvider to set one.')\n  }\n\n  return editor\n}\n"],"names":["getGlobalScope","globalThis","window","self","global","Error","globalScope","createGloballyScopedContext","key","defaultValue","symbol","Symbol","for","document","createContext","EditorContext","useEditor","editor","React","useContext"],"mappings":";;;;;;AASA,SAASA,iBAAiB;IACpB,IAAA,OAAOC,aAAe,IAAoBA,CAAAA,OAAAA;IAC1C,IAAA,OAAOC,SAAW,IAAoBA,CAAAA,OAAAA;IACtC,IAAA,OAAOC,OAAS,IAAoBA,CAAAA,OAAAA;IACpC,IAAA,OAAOC,SAAW,IAAoBA,CAAAA,OAAAA;IAEpC,MAAA,IAAIC,MAAM,qDAAqD;AACvE;AAEO,MAAMC,cAAcN,eAAe;ACF1BO,SAAAA,4BAOdC,GAAAA,EACAC,YAAAA,EACsB;IAChBC,MAAAA,SAASC,OAAOC,GAAAA,CAAIJ,GAAG;IAK7B,OAAI,OAAOK,WAAa,wKACfC,gBAAAA,EAA2BL,YAAY,IAAA,CAGhDH,WAAAA,CAAYI,MAAM,CAAA,GAAIJ,WAAAA,CAAYI,MAAM,CAAA,sKAAKI,gBAAAA,EAAiBL,YAAY,GAEnEH,WAAAA,CAAYI,MAAM,CAAA;AAC3B;ACnCaK,MAAAA,gBAAgBR,4BAC3B,uCACA,IACF;ACYO,SAAAS,YAAA;IACLC,MAAAA,uKAAeC,UAAAA,CAAAC,UAAAA,CAAAJ,aAA8B;IAAC,IAAA,CAEzCE,QAAMZ,MAAAA,IAAAA,MACO,+CAA+C;IAG1DY,OAAAA;AAAM","ignoreList":[0,1,2,3],"debugId":null}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"file":"util.slice-blocks.js","sources":["file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/internal-utils/asserters.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/internal-utils/parse-blocks.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/utils/util.is-keyed-segment.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/utils/util.block-offset.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/utils/util.get-block-start-point.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/utils/util.get-text-block-text.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/utils/util.is-span.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/utils/util.reverse-selection.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/utils/util.slice-blocks.ts"],"sourcesContent":["import type {TypedObject} from '@sanity/types'\n\nexport function isTypedObject(object: unknown): object is TypedObject {\n  return isRecord(object) && typeof object._type === 'string'\n}\n\nfunction isRecord(value: unknown): value is Record<string, unknown> {\n  return !!value && (typeof value === 'object' || typeof value === 'function')\n}\n","import type {\n  PortableTextBlock,\n  PortableTextListBlock,\n  PortableTextObject,\n  PortableTextSpan,\n  PortableTextTextBlock,\n  TypedObject,\n} from '@sanity/types'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport {isTypedObject} from './asserters'\n\nexport function parseBlocks({\n  context,\n  blocks,\n  options,\n}: {\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  blocks: unknown\n  options: {\n    refreshKeys: boolean\n    validateFields: boolean\n  }\n}): Array<PortableTextBlock> {\n  if (!Array.isArray(blocks)) {\n    return []\n  }\n\n  return blocks.flatMap((block) => {\n    const parsedBlock = parseBlock({context, block, options})\n\n    return parsedBlock ? [parsedBlock] : []\n  })\n}\n\nexport function parseBlock({\n  context,\n  block,\n  options,\n}: {\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  block: unknown\n  options: {\n    refreshKeys: boolean\n    validateFields: boolean\n  }\n}): PortableTextBlock | undefined {\n  return (\n    parseTextBlock({block, context, options}) ??\n    parseBlockObject({blockObject: block, context, options})\n  )\n}\n\nexport function parseBlockObject({\n  blockObject,\n  context,\n  options,\n}: {\n  blockObject: unknown\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  options: {refreshKeys: boolean; validateFields: boolean}\n}): PortableTextObject | undefined {\n  if (!isTypedObject(blockObject)) {\n    return undefined\n  }\n\n  const schemaType = context.schema.blockObjects.find(\n    ({name}) => name === blockObject._type,\n  )\n\n  if (!schemaType) {\n    return undefined\n  }\n\n  return parseObject({\n    object: blockObject,\n    context: {\n      keyGenerator: context.keyGenerator,\n      schemaType,\n    },\n    options,\n  })\n}\n\nexport function isListBlock(\n  context: Pick<EditorContext, 'schema'>,\n  block: unknown,\n): block is PortableTextListBlock {\n  return (\n    isTextBlock(context, block) &&\n    block.level !== undefined &&\n    block.listItem !== undefined\n  )\n}\n\nexport function isTextBlock(\n  context: Pick<EditorContext, 'schema'>,\n  block: unknown,\n): block is PortableTextTextBlock {\n  return (\n    parseTextBlock({\n      block,\n      context: {schema: context.schema, keyGenerator: () => ''},\n      options: {refreshKeys: false, validateFields: false},\n    }) !== undefined\n  )\n}\n\nexport function parseTextBlock({\n  block,\n  context,\n  options,\n}: {\n  block: unknown\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  options: {refreshKeys: boolean; validateFields: boolean}\n}): PortableTextTextBlock | undefined {\n  if (!isTypedObject(block)) {\n    return undefined\n  }\n\n  const customFields: Record<string, unknown> = {}\n\n  for (const key of Object.keys(block)) {\n    if (\n      key !== '_type' &&\n      key !== '_key' &&\n      key !== 'children' &&\n      key !== 'markDefs' &&\n      key !== 'style' &&\n      key !== 'listItem' &&\n      key !== 'level'\n    ) {\n      customFields[key] = block[key]\n    }\n  }\n\n  if (block._type !== context.schema.block.name) {\n    return undefined\n  }\n\n  const _key = options.refreshKeys\n    ? context.keyGenerator()\n    : typeof block._key === 'string'\n      ? block._key\n      : context.keyGenerator()\n\n  const unparsedMarkDefs: Array<unknown> = Array.isArray(block.markDefs)\n    ? block.markDefs\n    : []\n  const markDefKeyMap = new Map<string, string>()\n  const markDefs = unparsedMarkDefs.flatMap((markDef) => {\n    if (!isTypedObject(markDef)) {\n      return []\n    }\n\n    const schemaType = context.schema.annotations.find(\n      ({name}) => name === markDef._type,\n    )\n\n    if (!schemaType) {\n      return []\n    }\n\n    if (typeof markDef._key !== 'string') {\n      // If the `markDef` doesn't have a `_key` then we don't know what spans\n      // it belongs to and therefore we have to discard it.\n      return []\n    }\n\n    const parsedAnnotation = parseObject({\n      object: markDef,\n      context: {\n        schemaType,\n        keyGenerator: context.keyGenerator,\n      },\n      options,\n    })\n\n    if (!parsedAnnotation) {\n      return []\n    }\n\n    markDefKeyMap.set(markDef._key, parsedAnnotation._key)\n\n    return [parsedAnnotation]\n  })\n\n  const unparsedChildren: Array<unknown> = Array.isArray(block.children)\n    ? block.children\n    : []\n\n  const children = unparsedChildren\n    .map(\n      (child) =>\n        parseSpan({span: child, context, markDefKeyMap, options}) ??\n        parseInlineObject({inlineObject: child, context, options}),\n    )\n    .filter((child) => child !== undefined)\n\n  const parsedBlock: PortableTextTextBlock = {\n    _type: context.schema.block.name,\n    _key,\n    children:\n      children.length > 0\n        ? children\n        : [\n            {\n              _key: context.keyGenerator(),\n              _type: context.schema.span.name,\n              text: '',\n              marks: [],\n            },\n          ],\n    markDefs,\n    ...(options.validateFields ? {} : customFields),\n  }\n\n  if (\n    typeof block.style === 'string' &&\n    context.schema.styles.find((style) => style.name === block.style)\n  ) {\n    parsedBlock.style = block.style\n  } else {\n    const defaultStyle = context.schema.styles.at(0)?.name\n\n    if (defaultStyle !== undefined) {\n      parsedBlock.style = defaultStyle\n    } else {\n      console.error('Expected default style')\n    }\n  }\n\n  if (\n    typeof block.listItem === 'string' &&\n    context.schema.lists.find((list) => list.name === block.listItem)\n  ) {\n    parsedBlock.listItem = block.listItem\n  }\n\n  if (typeof block.level === 'number') {\n    parsedBlock.level = block.level\n  }\n\n  return parsedBlock\n}\n\nexport function isSpan(\n  context: Pick<EditorContext, 'schema'>,\n  child: unknown,\n): child is PortableTextSpan {\n  return (\n    parseSpan({\n      span: child,\n      markDefKeyMap: new Map(),\n      context: {schema: context.schema, keyGenerator: () => ''},\n      options: {refreshKeys: false, validateFields: false},\n    }) !== undefined\n  )\n}\n\nexport function parseSpan({\n  span,\n  context,\n  markDefKeyMap,\n  options,\n}: {\n  span: unknown\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  markDefKeyMap: Map<string, string>\n  options: {refreshKeys: boolean; validateFields: boolean}\n}): PortableTextSpan | undefined {\n  if (!isTypedObject(span)) {\n    return undefined\n  }\n\n  const customFields: Record<string, unknown> = {}\n\n  for (const key of Object.keys(span)) {\n    if (\n      key !== '_type' &&\n      key !== '_key' &&\n      key !== 'text' &&\n      key !== 'marks'\n    ) {\n      customFields[key] = span[key]\n    }\n  }\n\n  // In reality, the span schema name is always 'span', but we only the check here anyway\n  if (span._type !== context.schema.span.name || span._type !== 'span') {\n    return undefined\n  }\n\n  const unparsedMarks: Array<unknown> = Array.isArray(span.marks)\n    ? span.marks\n    : []\n  const marks = unparsedMarks.flatMap((mark) => {\n    if (typeof mark !== 'string') {\n      return []\n    }\n\n    const markDefKey = markDefKeyMap.get(mark)\n\n    if (markDefKey !== undefined) {\n      return [markDefKey]\n    }\n\n    if (\n      context.schema.decorators.some((decorator) => decorator.name === mark)\n    ) {\n      return [mark]\n    }\n\n    return []\n  })\n\n  return {\n    _type: 'span',\n    _key: options.refreshKeys\n      ? context.keyGenerator()\n      : typeof span._key === 'string'\n        ? span._key\n        : context.keyGenerator(),\n    text: typeof span.text === 'string' ? span.text : '',\n    marks,\n    ...(options.validateFields ? {} : customFields),\n  }\n}\n\nexport function parseInlineObject({\n  inlineObject,\n  context,\n  options,\n}: {\n  inlineObject: unknown\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  options: {refreshKeys: boolean; validateFields: boolean}\n}): PortableTextObject | undefined {\n  if (!isTypedObject(inlineObject)) {\n    return undefined\n  }\n\n  const schemaType = context.schema.inlineObjects.find(\n    ({name}) => name === inlineObject._type,\n  )\n\n  if (!schemaType) {\n    return undefined\n  }\n\n  return parseObject({\n    object: inlineObject,\n    context: {\n      keyGenerator: context.keyGenerator,\n      schemaType,\n    },\n    options,\n  })\n}\n\nexport function parseAnnotation({\n  annotation,\n  context,\n  options,\n}: {\n  annotation: TypedObject\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  options: {refreshKeys: boolean; validateFields: boolean}\n}): PortableTextObject | undefined {\n  if (!isTypedObject(annotation)) {\n    return undefined\n  }\n\n  const schemaType = context.schema.annotations.find(\n    ({name}) => name === annotation._type,\n  )\n\n  if (!schemaType) {\n    return undefined\n  }\n\n  return parseObject({\n    object: annotation,\n    context: {\n      keyGenerator: context.keyGenerator,\n      schemaType,\n    },\n    options,\n  })\n}\n\nfunction parseObject({\n  object,\n  context,\n  options,\n}: {\n  object: TypedObject\n  context: Pick<EditorContext, 'keyGenerator'> & {\n    schemaType: EditorSchema['blockObjects'][0]\n  }\n  options: {refreshKeys: boolean; validateFields: boolean}\n}): PortableTextObject {\n  const {_type, _key, ...customFields} = object\n\n  // Validates all props on the object and only takes those that match\n  // the name of a field\n  const values = options.validateFields\n    ? context.schemaType.fields.reduce<Record<string, unknown>>(\n        (fieldValues, field) => {\n          const fieldValue = object[field.name]\n\n          if (fieldValue !== undefined) {\n            fieldValues[field.name] = fieldValue\n          }\n\n          return fieldValues\n        },\n        {},\n      )\n    : customFields\n\n  return {\n    _type: context.schemaType.name,\n    _key: options.refreshKeys\n      ? context.keyGenerator()\n      : typeof object._key === 'string'\n        ? object._key\n        : context.keyGenerator(),\n    ...values,\n  }\n}\n","import type {KeyedSegment} from '@sanity/types'\n\n/**\n * @public\n */\nexport function isKeyedSegment(segment: unknown): segment is KeyedSegment {\n  return typeof segment === 'object' && segment !== null && '_key' in segment\n}\n","import type {KeyedSegment} from '@sanity/types'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport {isSpan, isTextBlock} from '../internal-utils/parse-blocks'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {EditorSelectionPoint} from '../types/editor'\nimport {isKeyedSegment} from './util.is-keyed-segment'\n\n/**\n * @public\n */\nexport function blockOffsetToSpanSelectionPoint({\n  context,\n  blockOffset,\n  direction,\n}: {\n  context: Pick<EditorContext, 'schema' | 'value'>\n  blockOffset: BlockOffset\n  direction: 'forward' | 'backward'\n}) {\n  let offsetLeft = blockOffset.offset\n  let selectionPoint:\n    | {path: [KeyedSegment, 'children', KeyedSegment]; offset: number}\n    | undefined\n  let skippedInlineObject = false\n\n  for (const block of context.value) {\n    if (block._key !== blockOffset.path[0]._key) {\n      continue\n    }\n\n    if (!isTextBlock(context, block)) {\n      continue\n    }\n\n    for (const child of block.children) {\n      if (direction === 'forward') {\n        if (!isSpan(context, child)) {\n          continue\n        }\n\n        if (offsetLeft <= child.text.length) {\n          selectionPoint = {\n            path: [...blockOffset.path, 'children', {_key: child._key}],\n            offset: offsetLeft,\n          }\n          break\n        }\n\n        offsetLeft -= child.text.length\n\n        continue\n      }\n\n      if (!isSpan(context, child)) {\n        skippedInlineObject = true\n        continue\n      }\n\n      if (offsetLeft === 0 && selectionPoint && !skippedInlineObject) {\n        if (skippedInlineObject) {\n          selectionPoint = {\n            path: [...blockOffset.path, 'children', {_key: child._key}],\n            offset: 0,\n          }\n        }\n        break\n      }\n\n      if (offsetLeft > child.text.length) {\n        offsetLeft -= child.text.length\n        continue\n      }\n\n      if (offsetLeft <= child.text.length) {\n        selectionPoint = {\n          path: [...blockOffset.path, 'children', {_key: child._key}],\n          offset: offsetLeft,\n        }\n\n        offsetLeft -= child.text.length\n\n        if (offsetLeft !== 0) {\n          break\n        }\n      }\n    }\n  }\n\n  return selectionPoint\n}\n\n/**\n * @public\n */\nexport function spanSelectionPointToBlockOffset({\n  context,\n  selectionPoint,\n}: {\n  context: Pick<EditorContext, 'schema' | 'value'>\n  selectionPoint: EditorSelectionPoint\n}): BlockOffset | undefined {\n  let offset = 0\n\n  const blockKey = isKeyedSegment(selectionPoint.path[0])\n    ? selectionPoint.path[0]._key\n    : undefined\n  const spanKey = isKeyedSegment(selectionPoint.path[2])\n    ? selectionPoint.path[2]._key\n    : undefined\n\n  if (!blockKey || !spanKey) {\n    return undefined\n  }\n\n  for (const block of context.value) {\n    if (block._key !== blockKey) {\n      continue\n    }\n\n    if (!isTextBlock(context, block)) {\n      continue\n    }\n\n    for (const child of block.children) {\n      if (!isSpan(context, child)) {\n        continue\n      }\n\n      if (child._key === spanKey) {\n        return {\n          path: [{_key: block._key}],\n          offset: offset + selectionPoint.offset,\n        }\n      }\n\n      offset += child.text.length\n    }\n  }\n}\n","import type {KeyedSegment, PortableTextBlock} from '@sanity/types'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport {isTextBlock} from '../internal-utils/parse-blocks'\nimport type {EditorSelectionPoint} from '../types/editor'\n\n/**\n * @public\n */\nexport function getBlockStartPoint({\n  context,\n  block,\n}: {\n  context: Pick<EditorContext, 'schema'>\n  block: {\n    node: PortableTextBlock\n    path: [KeyedSegment]\n  }\n}): EditorSelectionPoint {\n  if (isTextBlock(context, block.node)) {\n    return {\n      path: [...block.path, 'children', {_key: block.node.children[0]._key}],\n      offset: 0,\n    }\n  }\n\n  return {\n    path: block.path,\n    offset: 0,\n  }\n}\n","import type {PortableTextTextBlock} from '@sanity/types'\n\n/**\n * @public\n */\nexport function getTextBlockText(block: PortableTextTextBlock) {\n  return block.children.map((child) => child.text ?? '').join('')\n}\n","import type {PortableTextChild, PortableTextSpan} from '@sanity/types'\nimport type {EditorContext} from '..'\n\n/**\n * @public\n */\nexport function isSpan(\n  context: Pick<EditorContext, 'schema'>,\n  child: PortableTextChild,\n): child is PortableTextSpan {\n  return child._type === context.schema.span.name\n}\n","import type {EditorSelection} from '../types/editor'\n\n/**\n * @public\n */\nexport function reverseSelection<\n  TEditorSelection extends NonNullable<EditorSelection> | null,\n>(selection: TEditorSelection): TEditorSelection {\n  if (!selection) {\n    return selection\n  }\n\n  if (selection.backward) {\n    return {\n      anchor: selection.focus,\n      focus: selection.anchor,\n      backward: false,\n    } as TEditorSelection\n  }\n\n  return {\n    anchor: selection.focus,\n    focus: selection.anchor,\n    backward: true,\n  } as TEditorSelection\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorContext} from '..'\nimport {isSpan, isTextBlock} from '../internal-utils/parse-blocks'\nimport {isKeyedSegment} from './util.is-keyed-segment'\n\n/**\n * @public\n */\nexport function sliceBlocks({\n  context,\n  blocks,\n}: {\n  context: Pick<EditorContext, 'schema' | 'selection'>\n  blocks: Array<PortableTextBlock>\n}): Array<PortableTextBlock> {\n  const slice: Array<PortableTextBlock> = []\n\n  if (!context.selection) {\n    return slice\n  }\n\n  let startBlock: PortableTextBlock | undefined\n  const middleBlocks: PortableTextBlock[] = []\n  let endBlock: PortableTextBlock | undefined\n\n  const startPoint = context.selection.backward\n    ? context.selection.focus\n    : context.selection.anchor\n  const endPoint = context.selection.backward\n    ? context.selection.anchor\n    : context.selection.focus\n\n  const startBlockKey = isKeyedSegment(startPoint.path[0])\n    ? startPoint.path[0]._key\n    : undefined\n  const endBlockKey = isKeyedSegment(endPoint.path[0])\n    ? endPoint.path[0]._key\n    : undefined\n  const startChildKey = isKeyedSegment(startPoint.path[2])\n    ? startPoint.path[2]._key\n    : undefined\n  const endChildKey = isKeyedSegment(endPoint.path[2])\n    ? endPoint.path[2]._key\n    : undefined\n\n  if (!startBlockKey || !endBlockKey) {\n    return slice\n  }\n\n  for (const block of blocks) {\n    if (!isTextBlock(context, block)) {\n      if (block._key === startBlockKey && block._key === endBlockKey) {\n        startBlock = block\n        break\n      }\n    }\n\n    if (block._key === startBlockKey) {\n      if (!isTextBlock(context, block)) {\n        startBlock = block\n        continue\n      }\n\n      if (startChildKey) {\n        for (const child of block.children) {\n          if (child._key === startChildKey) {\n            if (isSpan(context, child)) {\n              const text =\n                child._key === endChildKey\n                  ? child.text.slice(startPoint.offset, endPoint.offset)\n                  : child.text.slice(startPoint.offset)\n\n              startBlock = {\n                ...block,\n                children: [\n                  {\n                    ...child,\n                    text,\n                  },\n                ],\n              }\n            } else {\n              startBlock = {\n                ...block,\n                children: [child],\n              }\n            }\n\n            if (startChildKey === endChildKey) {\n              break\n            }\n            continue\n          }\n\n          if (startBlock && isTextBlock(context, startBlock)) {\n            if (\n              endChildKey &&\n              child._key === endChildKey &&\n              isSpan(context, child)\n            ) {\n              startBlock.children.push({\n                ...child,\n                text: child.text.slice(0, endPoint.offset),\n              })\n            } else {\n              startBlock.children.push(child)\n            }\n\n            if (\n              block._key === endBlockKey &&\n              endChildKey &&\n              child._key === endChildKey\n            ) {\n              break\n            }\n          }\n        }\n\n        if (startBlockKey === endBlockKey) {\n          break\n        }\n\n        continue\n      }\n\n      startBlock = block\n\n      if (startBlockKey === endBlockKey) {\n        break\n      }\n    }\n\n    if (block._key === endBlockKey) {\n      if (!isTextBlock(context, block)) {\n        endBlock = block\n        break\n      }\n\n      if (endChildKey) {\n        endBlock = {\n          ...block,\n          children: [],\n        }\n\n        for (const child of block.children) {\n          if (endBlock && isTextBlock(context, endBlock)) {\n            if (child._key === endChildKey && isSpan(context, child)) {\n              endBlock.children.push({\n                ...child,\n                text: child.text.slice(0, endPoint.offset),\n              })\n\n              break\n            }\n\n            endBlock.children.push(child)\n\n            if (endChildKey && child._key === endChildKey) {\n              break\n            }\n          }\n        }\n\n        break\n      }\n\n      endBlock = block\n\n      break\n    }\n\n    if (startBlock) {\n      middleBlocks.push(block)\n    }\n  }\n\n  return [\n    ...(startBlock ? [startBlock] : []),\n    ...middleBlocks,\n    ...(endBlock ? [endBlock] : []),\n  ]\n}\n"],"names":["isTypedObject","object","isRecord","_type","value","parseBlocks","context","blocks","options","Array","isArray","flatMap","block","parsedBlock","parseBlock","parseTextBlock","parseBlockObject","blockObject","schemaType","schema","blockObjects","find","name","parseObject","keyGenerator","isListBlock","isTextBlock","level","undefined","listItem","refreshKeys","validateFields","customFields","key","Object","keys","_key","unparsedMarkDefs","markDefs","markDefKeyMap","Map","markDef","annotations","parsedAnnotation","set","children","map","child","parseSpan","span","parseInlineObject","inlineObject","filter","length","text","marks","style","styles","defaultStyle","at","console","error","lists","list","isSpan","mark","markDefKey","get","decorators","some","decorator","inlineObjects","parseAnnotation","annotation","values","fields","reduce","fieldValues","field","fieldValue","isKeyedSegment","segment","blockOffsetToSpanSelectionPoint","blockOffset","direction","offsetLeft","offset","selectionPoint","skippedInlineObject","path","spanSelectionPointToBlockOffset","blockKey","spanKey","getBlockStartPoint","node","getTextBlockText","join","reverseSelection","selection","backward","anchor","focus","sliceBlocks","slice","startBlock","middleBlocks","endBlock","startPoint","endPoint","startBlockKey","endBlockKey","startChildKey","endChildKey","push"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8],"debugId":null}},
    {"offset": {"line": 443, "column": 0}, "map": {"version":3,"file":"util.is-equal-selection-points.js","sources":["file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/utils/util.get-block-end-point.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/utils/util.is-empty-text-block.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/utils/util.is-equal-selection-points.ts"],"sourcesContent":["import type {KeyedSegment, PortableTextBlock} from '@sanity/types'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport {isSpan, isTextBlock} from '../internal-utils/parse-blocks'\nimport type {EditorSelectionPoint} from '../types/editor'\n\n/**\n * @public\n */\nexport function getBlockEndPoint({\n  context,\n  block,\n}: {\n  context: Pick<EditorContext, 'schema'>\n  block: {\n    node: PortableTextBlock\n    path: [KeyedSegment]\n  }\n}): EditorSelectionPoint {\n  if (isTextBlock(context, block.node)) {\n    const lastChild = block.node.children[block.node.children.length - 1]\n\n    if (lastChild) {\n      return {\n        path: [...block.path, 'children', {_key: lastChild._key}],\n        offset: isSpan(context, lastChild) ? lastChild.text.length : 0,\n      }\n    }\n  }\n\n  return {\n    path: block.path,\n    offset: 0,\n  }\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport {isSpan, isTextBlock} from '../internal-utils/parse-blocks'\nimport {getTextBlockText} from './util.get-text-block-text'\n\n/**\n * @public\n */\nexport function isEmptyTextBlock(\n  context: Pick<EditorContext, 'schema'>,\n  block: PortableTextBlock,\n) {\n  if (!isTextBlock(context, block)) {\n    return false\n  }\n\n  const onlyText = block.children.every((child) => isSpan(context, child))\n  const blockText = getTextBlockText(block)\n\n  return onlyText && blockText === ''\n}\n","import type {EditorSelectionPoint} from '../types/editor'\n\n/**\n * @public\n */\nexport function isEqualSelectionPoints(\n  a: EditorSelectionPoint,\n  b: EditorSelectionPoint,\n) {\n  return (\n    a.offset === b.offset && JSON.stringify(a.path) === JSON.stringify(b.path)\n  )\n}\n"],"names":["getBlockEndPoint","context","block","isTextBlock","node","lastChild","children","length","path","_key","offset","isSpan","text","isEmptyTextBlock","onlyText","every","child","blockText","getTextBlockText","isEqualSelectionPoints","a","b","JSON","stringify"],"mappings":";;;;;;;AAQO,SAASA,iBAAiB,EAC/BC,OAAAA,EACAC,KAAAA,EAOF,EAAyB;IACvB,uMAAIC,cAAAA,EAAYF,SAASC,MAAME,IAAI,GAAG;QAC9BC,MAAAA,YAAYH,MAAME,IAAAA,CAAKE,QAAAA,CAASJ,MAAME,IAAAA,CAAKE,QAAAA,CAASC,MAAAA,GAAS,CAAC,CAAA;QAEhEF,IAAAA,WACK,OAAA;YACLG,MAAM,CAAC;mBAAGN,MAAMM,IAAAA;gBAAM;gBAAY;oBAACC,MAAMJ,UAAUI,IAAAA;gBAAAA,CAAK;aAAA;YACxDC,2MAAQC,WAAAA,EAAOV,SAASI,SAAS,IAAIA,UAAUO,IAAAA,CAAKL,MAAAA,GAAS;QAC/D;IAAA;IAIG,OAAA;QACLC,MAAMN,MAAMM,IAAAA;QACZE,QAAQ;IACV;AACF;ACzBgBG,SAAAA,iBACdZ,OAAAA,EACAC,KAAAA,EACA;IACI,IAAA,oMAACC,cAAAA,EAAYF,SAASC,KAAK,GACtB,OAAA,CAAA;IAGT,MAAMY,WAAWZ,MAAMI,QAAAA,CAASS,KAAAA,CAAOC,CAAUL,2MAAAA,WAAAA,EAAOV,SAASe,KAAK,CAAC,GACjEC,+MAAYC,mBAAAA,EAAiBhB,KAAK;IAExC,OAAOY,YAAYG,cAAc;AACnC;ACfgBE,SAAAA,uBACdC,CAAAA,EACAC,CAAAA,EACA;IACA,OACED,EAAEV,MAAAA,KAAWW,EAAEX,MAAAA,IAAUY,KAAKC,SAAAA,CAAUH,EAAEZ,IAAI,MAAMc,KAAKC,SAAAA,CAAUF,EAAEb,IAAI;AAE7E","ignoreList":[0,1,2],"debugId":null}},
    {"offset": {"line": 485, "column": 0}, "map": {"version":3,"file":"selector.is-selection-expanded.js","sources":["file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/selectors/selector.is-selection-collapsed.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/selectors/selectors.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/selectors/selector.get-selection-start-point.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/selectors/selector.get-previous-inline-object.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/selectors/selector.get-selected-slice.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/selectors/selector.get-selection-text.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/selectors/selector.is-selection-expanded.ts"],"sourcesContent":["import type {EditorSelector} from '../editor/editor-selector'\n\n/**\n * @public\n */\nexport const isSelectionCollapsed: EditorSelector<boolean> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return false\n  }\n\n  return (\n    JSON.stringify(snapshot.context.selection.anchor.path) ===\n      JSON.stringify(snapshot.context.selection.focus.path) &&\n    snapshot.context.selection?.anchor.offset ===\n      snapshot.context.selection?.focus.offset\n  )\n}\n","import type {\n  KeyedSegment,\n  PortableTextBlock,\n  PortableTextListBlock,\n  PortableTextObject,\n  PortableTextSpan,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {isListBlock, isSpan, isTextBlock} from '../internal-utils/parse-blocks'\nimport {isKeyedSegment} from '../utils/util.is-keyed-segment'\n\n/**\n * @public\n */\nexport const getFocusBlock: EditorSelector<\n  {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n> = (snapshot) => {\n  const key = snapshot.context.selection\n    ? isKeyedSegment(snapshot.context.selection.focus.path[0])\n      ? snapshot.context.selection.focus.path[0]._key\n      : undefined\n    : undefined\n\n  const node = key\n    ? snapshot.context.value.find((block) => block._key === key)\n    : undefined\n\n  return node && key ? {node, path: [{_key: key}]} : undefined\n}\n\n/**\n * @public\n */\nexport const getFocusListBlock: EditorSelector<\n  {node: PortableTextListBlock; path: [KeyedSegment]} | undefined\n> = (snapshot) => {\n  const focusTextBlock = getFocusTextBlock(snapshot)\n\n  return focusTextBlock && isListBlock(snapshot.context, focusTextBlock.node)\n    ? {node: focusTextBlock.node, path: focusTextBlock.path}\n    : undefined\n}\n\n/**\n * @public\n */\nexport const getFocusTextBlock: EditorSelector<\n  {node: PortableTextTextBlock; path: [KeyedSegment]} | undefined\n> = (snapshot) => {\n  const focusBlock = getFocusBlock(snapshot)\n\n  return focusBlock && isTextBlock(snapshot.context, focusBlock.node)\n    ? {node: focusBlock.node, path: focusBlock.path}\n    : undefined\n}\n\n/**\n * @public\n */\nexport const getFocusBlockObject: EditorSelector<\n  {node: PortableTextObject; path: [KeyedSegment]} | undefined\n> = (snapshot) => {\n  const focusBlock = getFocusBlock(snapshot)\n\n  return focusBlock && !isTextBlock(snapshot.context, focusBlock.node)\n    ? {node: focusBlock.node, path: focusBlock.path}\n    : undefined\n}\n\n/**\n * @public\n */\nexport const getFocusChild: EditorSelector<\n  | {\n      node: PortableTextObject | PortableTextSpan\n      path: [KeyedSegment, 'children', KeyedSegment]\n    }\n  | undefined\n> = (snapshot) => {\n  const focusBlock = getFocusTextBlock(snapshot)\n\n  if (!focusBlock) {\n    return undefined\n  }\n\n  const key = snapshot.context.selection\n    ? isKeyedSegment(snapshot.context.selection.focus.path[2])\n      ? snapshot.context.selection.focus.path[2]._key\n      : undefined\n    : undefined\n\n  const node = key\n    ? focusBlock.node.children.find((span) => span._key === key)\n    : undefined\n\n  return node && key\n    ? {node, path: [...focusBlock.path, 'children', {_key: key}]}\n    : undefined\n}\n\n/**\n * @public\n */\nexport const getFocusSpan: EditorSelector<\n  | {node: PortableTextSpan; path: [KeyedSegment, 'children', KeyedSegment]}\n  | undefined\n> = (snapshot) => {\n  const focusChild = getFocusChild(snapshot)\n\n  return focusChild && isSpan(snapshot.context, focusChild.node)\n    ? {node: focusChild.node, path: focusChild.path}\n    : undefined\n}\n\n/**\n * @public\n */\nexport const getFirstBlock: EditorSelector<\n  {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n> = (snapshot) => {\n  const node = snapshot.context.value[0]\n\n  return node ? {node, path: [{_key: node._key}]} : undefined\n}\n\n/**\n * @public\n */\nexport const getLastBlock: EditorSelector<\n  {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n> = (snapshot) => {\n  const node = snapshot.context.value[snapshot.context.value.length - 1]\n    ? snapshot.context.value[snapshot.context.value.length - 1]\n    : undefined\n\n  return node ? {node, path: [{_key: node._key}]} : undefined\n}\n\n/**\n * @public\n */\nexport const getSelectedBlocks: EditorSelector<\n  Array<{node: PortableTextBlock; path: [KeyedSegment]}>\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return []\n  }\n\n  const selectedBlocks: Array<{node: PortableTextBlock; path: [KeyedSegment]}> =\n    []\n  const startKey = snapshot.context.selection.backward\n    ? isKeyedSegment(snapshot.context.selection.focus.path[0])\n      ? snapshot.context.selection.focus.path[0]._key\n      : undefined\n    : isKeyedSegment(snapshot.context.selection.anchor.path[0])\n      ? snapshot.context.selection.anchor.path[0]._key\n      : undefined\n  const endKey = snapshot.context.selection.backward\n    ? isKeyedSegment(snapshot.context.selection.anchor.path[0])\n      ? snapshot.context.selection.anchor.path[0]._key\n      : undefined\n    : isKeyedSegment(snapshot.context.selection.focus.path[0])\n      ? snapshot.context.selection.focus.path[0]._key\n      : undefined\n\n  if (!startKey || !endKey) {\n    return selectedBlocks\n  }\n\n  for (const block of snapshot.context.value) {\n    if (block._key === startKey) {\n      selectedBlocks.push({node: block, path: [{_key: block._key}]})\n\n      if (startKey === endKey) {\n        break\n      }\n      continue\n    }\n\n    if (block._key === endKey) {\n      selectedBlocks.push({node: block, path: [{_key: block._key}]})\n      break\n    }\n\n    if (selectedBlocks.length > 0) {\n      selectedBlocks.push({node: block, path: [{_key: block._key}]})\n    }\n  }\n\n  return selectedBlocks\n}\n\n/**\n * @public\n */\nexport const getSelectionStartBlock: EditorSelector<\n  | {\n      node: PortableTextBlock\n      path: [KeyedSegment]\n    }\n  | undefined\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return undefined\n  }\n\n  const key = snapshot.context.selection.backward\n    ? isKeyedSegment(snapshot.context.selection.focus.path[0])\n      ? snapshot.context.selection.focus.path[0]._key\n      : undefined\n    : isKeyedSegment(snapshot.context.selection.anchor.path[0])\n      ? snapshot.context.selection.anchor.path[0]._key\n      : undefined\n\n  const node = key\n    ? snapshot.context.value.find((block) => block._key === key)\n    : undefined\n\n  return node && key ? {node, path: [{_key: key}]} : undefined\n}\n\n/**\n * @public\n */\nexport const getSelectionEndBlock: EditorSelector<\n  | {\n      node: PortableTextBlock\n      path: [KeyedSegment]\n    }\n  | undefined\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return undefined\n  }\n\n  const key = snapshot.context.selection.backward\n    ? isKeyedSegment(snapshot.context.selection.anchor.path[0])\n      ? snapshot.context.selection.anchor.path[0]._key\n      : undefined\n    : isKeyedSegment(snapshot.context.selection.focus.path[0])\n      ? snapshot.context.selection.focus.path[0]._key\n      : undefined\n\n  const node = key\n    ? snapshot.context.value.find((block) => block._key === key)\n    : undefined\n\n  return node && key ? {node, path: [{_key: key}]} : undefined\n}\n\n/**\n * @public\n */\nexport const getPreviousBlock: EditorSelector<\n  {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n> = (snapshot) => {\n  let previousBlock: {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n  const selectionStartBlock = getSelectionStartBlock(snapshot)\n\n  if (!selectionStartBlock) {\n    return undefined\n  }\n\n  let foundSelectionStartBlock = false\n\n  for (const block of snapshot.context.value) {\n    if (block._key === selectionStartBlock.node._key) {\n      foundSelectionStartBlock = true\n      break\n    }\n\n    previousBlock = {node: block, path: [{_key: block._key}]}\n  }\n\n  if (foundSelectionStartBlock && previousBlock) {\n    return previousBlock\n  }\n\n  return undefined\n}\n\n/**\n * @public\n */\nexport const getNextBlock: EditorSelector<\n  {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n> = (snapshot) => {\n  let nextBlock: {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n  const selectionEndBlock = getSelectionEndBlock(snapshot)\n\n  if (!selectionEndBlock) {\n    return undefined\n  }\n\n  let foundSelectionEndBlock = false\n\n  for (const block of snapshot.context.value) {\n    if (block._key === selectionEndBlock.node._key) {\n      foundSelectionEndBlock = true\n      continue\n    }\n\n    if (foundSelectionEndBlock) {\n      nextBlock = {node: block, path: [{_key: block._key}]}\n      break\n    }\n  }\n\n  if (foundSelectionEndBlock && nextBlock) {\n    return nextBlock\n  }\n\n  return undefined\n}\n","import type {EditorSelectionPoint} from '..'\nimport type {EditorSelector} from '../editor/editor-selector'\n\n/**\n * @public\n */\nexport const getSelectionStartPoint: EditorSelector<\n  EditorSelectionPoint | undefined\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return undefined\n  }\n\n  return snapshot.context.selection.backward\n    ? snapshot.context.selection.focus\n    : snapshot.context.selection.anchor\n}\n","import {\n  isKeySegment,\n  type KeyedSegment,\n  type PortableTextObject,\n} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {isSpan} from '../utils'\nimport {getSelectionStartPoint} from './selector.get-selection-start-point'\nimport {getFocusTextBlock} from './selectors'\n\n/**\n * @public\n */\nexport const getPreviousInlineObject: EditorSelector<\n  | {\n      node: PortableTextObject\n      path: [KeyedSegment, 'children', KeyedSegment]\n    }\n  | undefined\n> = (snapshot) => {\n  const focusTextBlock = getFocusTextBlock(snapshot)\n  const selectionStartPoint = getSelectionStartPoint(snapshot)\n  const selectionStartPointChildKey =\n    selectionStartPoint && isKeySegment(selectionStartPoint.path[2])\n      ? selectionStartPoint.path[2]._key\n      : undefined\n\n  if (!focusTextBlock || !selectionStartPointChildKey) {\n    return undefined\n  }\n\n  let inlineObject:\n    | {\n        node: PortableTextObject\n        path: [KeyedSegment, 'children', KeyedSegment]\n      }\n    | undefined\n\n  for (const child of focusTextBlock.node.children) {\n    if (child._key === selectionStartPointChildKey) {\n      break\n    }\n\n    if (!isSpan(snapshot.context, child)) {\n      inlineObject = {\n        node: child,\n        path: [...focusTextBlock.path, 'children', {_key: child._key}],\n      }\n    }\n  }\n\n  return inlineObject\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {sliceBlocks} from '../utils'\n\n/**\n * @public\n */\nexport const getSelectedSlice: EditorSelector<Array<PortableTextBlock>> = (\n  snapshot,\n) => {\n  return sliceBlocks({\n    context: snapshot.context,\n    blocks: snapshot.context.value,\n  })\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {isSpan, isTextBlock} from '../internal-utils/parse-blocks'\nimport {getSelectedSlice} from './selector.get-selected-slice'\n\n/**\n * @public\n */\nexport const getSelectionText: EditorSelector<string> = (snapshot) => {\n  const selectedSlice = getSelectedSlice(snapshot)\n\n  return selectedSlice.reduce((text, block) => {\n    if (!isTextBlock(snapshot.context, block)) {\n      return text\n    }\n\n    return (\n      text +\n      block.children.reduce((text, child) => {\n        if (isSpan(snapshot.context, child)) {\n          return text + child.text\n        }\n\n        return text\n      }, '')\n    )\n  }, '')\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\n\n/**\n * @public\n */\nexport const isSelectionExpanded: EditorSelector<boolean> = (snapshot) => {\n  return !isSelectionCollapsed(snapshot)\n}\n"],"names":["isSelectionCollapsed","snapshot","context","selection","JSON","stringify","anchor","path","focus","offset","getFocusBlock","key","isKeyedSegment","_key","undefined","node","value","find","block","getFocusListBlock","focusTextBlock","getFocusTextBlock","isListBlock","focusBlock","isTextBlock","getFocusBlockObject","getFocusChild","children","span","getFocusSpan","focusChild","isSpan","getFirstBlock","getLastBlock","length","getSelectedBlocks","selectedBlocks","startKey","backward","endKey","push","getSelectionStartBlock","getSelectionEndBlock","getPreviousBlock","previousBlock","selectionStartBlock","foundSelectionStartBlock","getNextBlock","nextBlock","selectionEndBlock","foundSelectionEndBlock","getSelectionStartPoint","getPreviousInlineObject","selectionStartPoint","selectionStartPointChildKey","isKeySegment","inlineObject","child","getSelectedSlice","sliceBlocks","blocks","getSelectionText","reduce","text","isSelectionExpanded"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6],"debugId":null}},
    {"offset": {"line": 712, "column": 0}, "map": {"version":3,"file":"selector.is-selecting-entire-blocks.js","sources":["file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/selectors/selector.get-selected-spans.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/selectors/selector.get-active-annotations.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/selectors/selector.get-active-list-item.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/selectors/selector.get-active-style.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/selectors/selector.get-selection-end-point.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/selectors/selector.get-next-inline-object.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/selectors/selector.get-caret-word-selection.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/selectors/selector.get-focus-inline-object.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/selectors/selector.get-selected-text-blocks.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/selectors/selector.get-trimmed-selection.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/selectors/selector.is-active-annotation.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/selectors/selector.is-active-decorator.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/selectors/selector.is-active-list-item.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/selectors/selector.is-active-style.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/selectors/selector.is-at-the-end-of-block.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/selectors/selector.is-at-the-start-of-block.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/selectors/selector.is-point-after-selection.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/selectors/selector.is-point-before-selection.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/selectors/selector.is-overlapping-selection.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/selectors/selector.is-selecting-entire-blocks.ts"],"sourcesContent":["import type {KeyedSegment, PortableTextSpan} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {isSpan, isTextBlock} from '../internal-utils/parse-blocks'\nimport {isKeyedSegment} from '../utils'\n\n/**\n * @public\n */\nexport const getSelectedSpans: EditorSelector<\n  Array<{\n    node: PortableTextSpan\n    path: [KeyedSegment, 'children', KeyedSegment]\n  }>\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return []\n  }\n\n  const selectedSpans: Array<{\n    node: PortableTextSpan\n    path: [KeyedSegment, 'children', KeyedSegment]\n  }> = []\n\n  const startPoint = snapshot.context.selection.backward\n    ? snapshot.context.selection.focus\n    : snapshot.context.selection.anchor\n  const endPoint = snapshot.context.selection.backward\n    ? snapshot.context.selection.anchor\n    : snapshot.context.selection.focus\n\n  const startBlockKey = isKeyedSegment(startPoint.path[0])\n    ? startPoint.path[0]._key\n    : undefined\n  const endBlockKey = isKeyedSegment(endPoint.path[0])\n    ? endPoint.path[0]._key\n    : undefined\n\n  if (!startBlockKey || !endBlockKey) {\n    return selectedSpans\n  }\n\n  const startSpanKey = isKeyedSegment(startPoint.path[2])\n    ? startPoint.path[2]._key\n    : undefined\n  const endSpanKey = isKeyedSegment(endPoint.path[2])\n    ? endPoint.path[2]._key\n    : undefined\n\n  let startBlockFound = false\n\n  for (const block of snapshot.context.value) {\n    if (block._key === startBlockKey) {\n      startBlockFound = true\n    }\n\n    if (!isTextBlock(snapshot.context, block)) {\n      continue\n    }\n\n    if (block._key === startBlockKey) {\n      for (const child of block.children) {\n        if (!isSpan(snapshot.context, child)) {\n          continue\n        }\n\n        if (startSpanKey && child._key === startSpanKey) {\n          if (startPoint.offset < child.text.length) {\n            selectedSpans.push({\n              node: child,\n              path: [{_key: block._key}, 'children', {_key: child._key}],\n            })\n          }\n\n          if (startSpanKey === endSpanKey) {\n            break\n          }\n\n          continue\n        }\n\n        if (endSpanKey && child._key === endSpanKey) {\n          if (endPoint.offset > 0) {\n            selectedSpans.push({\n              node: child,\n              path: [{_key: block._key}, 'children', {_key: child._key}],\n            })\n          }\n          break\n        }\n\n        if (selectedSpans.length > 0) {\n          selectedSpans.push({\n            node: child,\n            path: [{_key: block._key}, 'children', {_key: child._key}],\n          })\n        }\n      }\n\n      if (startBlockKey === endBlockKey) {\n        break\n      }\n\n      continue\n    }\n\n    if (block._key === endBlockKey) {\n      for (const child of block.children) {\n        if (!isSpan(snapshot.context, child)) {\n          continue\n        }\n\n        if (endSpanKey && child._key === endSpanKey) {\n          if (endPoint.offset > 0) {\n            selectedSpans.push({\n              node: child,\n              path: [{_key: block._key}, 'children', {_key: child._key}],\n            })\n          }\n          break\n        }\n\n        selectedSpans.push({\n          node: child,\n          path: [{_key: block._key}, 'children', {_key: child._key}],\n        })\n      }\n\n      break\n    }\n\n    if (startBlockFound) {\n      for (const child of block.children) {\n        if (!isSpan(snapshot.context, child)) {\n          continue\n        }\n\n        selectedSpans.push({\n          node: child,\n          path: [{_key: block._key}, 'children', {_key: child._key}],\n        })\n      }\n    }\n  }\n\n  return selectedSpans\n}\n","import type {PortableTextObject} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {isTextBlock} from '../internal-utils/parse-blocks'\nimport {getSelectedSpans} from './selector.get-selected-spans'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\nimport {getFocusSpan, getSelectedBlocks} from './selectors'\n\n/**\n * @public\n */\nexport const getActiveAnnotations: EditorSelector<Array<PortableTextObject>> = (\n  snapshot,\n) => {\n  if (!snapshot.context.selection) {\n    return []\n  }\n\n  const selectedBlocks = getSelectedBlocks(snapshot)\n  const selectedSpans = getSelectedSpans(snapshot)\n  const focusSpan = getFocusSpan(snapshot)\n\n  if (selectedSpans.length === 0 || !focusSpan) {\n    return []\n  }\n\n  if (selectedSpans.length === 1 && isSelectionCollapsed(snapshot)) {\n    if (snapshot.context.selection.focus.offset === 0) {\n      return []\n    }\n    if (\n      snapshot.context.selection.focus.offset === focusSpan.node.text.length\n    ) {\n      return []\n    }\n  }\n\n  const activeAnnotations = snapshot.beta.activeAnnotations\n  const selectionMarkDefs = selectedBlocks.flatMap((block) =>\n    isTextBlock(snapshot.context, block.node)\n      ? (block.node.markDefs ?? [])\n      : [],\n  )\n\n  return selectionMarkDefs.filter((markDef) =>\n    activeAnnotations.includes(markDef._key),\n  )\n}\n","import type {PortableTextListBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {isTextBlock} from '../internal-utils/parse-blocks'\nimport {getSelectedBlocks} from './selectors'\n\n/**\n * @public\n */\nexport const getActiveListItem: EditorSelector<\n  PortableTextListBlock['listItem'] | undefined\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return undefined\n  }\n\n  const selectedBlocks = getSelectedBlocks(snapshot).map((block) => block.node)\n  const selectedTextBlocks = selectedBlocks.filter((block) =>\n    isTextBlock(snapshot.context, block),\n  )\n\n  const firstTextBlock = selectedTextBlocks.at(0)\n\n  if (!firstTextBlock) {\n    return undefined\n  }\n\n  const firstListItem = firstTextBlock.listItem\n\n  if (!firstListItem) {\n    return undefined\n  }\n\n  if (selectedTextBlocks.every((block) => block.listItem === firstListItem)) {\n    return firstListItem\n  }\n\n  return undefined\n}\n","import type {PortableTextTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {isTextBlock} from '../internal-utils/parse-blocks'\nimport {getSelectedBlocks} from './selectors'\n\n/**\n * @public\n */\nexport const getActiveStyle: EditorSelector<PortableTextTextBlock['style']> = (\n  snapshot,\n) => {\n  if (!snapshot.context.selection) {\n    return undefined\n  }\n\n  const selectedBlocks = getSelectedBlocks(snapshot).map((block) => block.node)\n  const selectedTextBlocks = selectedBlocks.filter((block) =>\n    isTextBlock(snapshot.context, block),\n  )\n\n  const firstTextBlock = selectedTextBlocks.at(0)\n\n  if (!firstTextBlock) {\n    return undefined\n  }\n\n  const firstStyle = firstTextBlock.style\n\n  if (!firstStyle) {\n    return undefined\n  }\n\n  if (selectedTextBlocks.every((block) => block.style === firstStyle)) {\n    return firstStyle\n  }\n\n  return undefined\n}\n","import type {EditorSelectionPoint} from '..'\nimport type {EditorSelector} from '../editor/editor-selector'\n\n/**\n * @public\n */\nexport const getSelectionEndPoint: EditorSelector<\n  EditorSelectionPoint | undefined\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return undefined\n  }\n\n  return snapshot.context.selection.backward\n    ? snapshot.context.selection.anchor\n    : snapshot.context.selection.focus\n}\n","import {\n  isKeySegment,\n  type KeyedSegment,\n  type PortableTextObject,\n} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {isSpan} from '../utils'\nimport {getSelectionEndPoint} from './selector.get-selection-end-point'\nimport {getFocusTextBlock} from './selectors'\n\n/**\n * @public\n */\nexport const getNextInlineObject: EditorSelector<\n  | {\n      node: PortableTextObject\n      path: [KeyedSegment, 'children', KeyedSegment]\n    }\n  | undefined\n> = (snapshot) => {\n  const focusTextBlock = getFocusTextBlock(snapshot)\n  const selectionEndPoint = getSelectionEndPoint(snapshot)\n  const selectionEndPointChildKey =\n    selectionEndPoint && isKeySegment(selectionEndPoint.path[2])\n      ? selectionEndPoint.path[2]._key\n      : undefined\n\n  if (!focusTextBlock || !selectionEndPointChildKey) {\n    return undefined\n  }\n\n  let endPointChildFound = false\n  let inlineObject:\n    | {\n        node: PortableTextObject\n        path: [KeyedSegment, 'children', KeyedSegment]\n      }\n    | undefined\n\n  for (const child of focusTextBlock.node.children) {\n    if (child._key === selectionEndPointChildKey) {\n      endPointChildFound = true\n      continue\n    }\n\n    if (!isSpan(snapshot.context, child) && endPointChildFound) {\n      inlineObject = {\n        node: child,\n        path: [...focusTextBlock.path, 'children', {_key: child._key}],\n      }\n      break\n    }\n  }\n\n  return inlineObject\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {EditorSelection} from '../types/editor'\nimport {\n  blockOffsetToSpanSelectionPoint,\n  getBlockEndPoint,\n  getBlockStartPoint,\n  spanSelectionPointToBlockOffset,\n} from '../utils'\nimport {getNextInlineObject} from './selector.get-next-inline-object'\nimport {getPreviousInlineObject} from './selector.get-previous-inline-object'\nimport {getSelectionStartPoint} from './selector.get-selection-start-point'\nimport {getSelectionText} from './selector.get-selection-text'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\nimport {isSelectionExpanded} from './selector.is-selection-expanded'\nimport {getFocusTextBlock} from './selectors'\n\n/**\n * @public\n * Returns the selection of the of the word the caret is placed in.\n * Note: Only returns a word selection if the current selection is collapsed\n */\nexport const getCaretWordSelection: EditorSelector<EditorSelection> = (\n  snapshot,\n) => {\n  if (!snapshot.context.selection) {\n    return null\n  }\n\n  if (!isSelectionCollapsed(snapshot)) {\n    return null\n  }\n\n  const focusTextBlock = getFocusTextBlock(snapshot)\n  const selectionStartPoint = getSelectionStartPoint(snapshot)\n  const selectionStartOffset = selectionStartPoint\n    ? spanSelectionPointToBlockOffset({\n        context: snapshot.context,\n        selectionPoint: selectionStartPoint,\n      })\n    : undefined\n\n  if (!focusTextBlock || !selectionStartPoint || !selectionStartOffset) {\n    return null\n  }\n\n  const previousInlineObject = getPreviousInlineObject(snapshot)\n  const blockStartPoint = getBlockStartPoint({\n    context: snapshot.context,\n    block: focusTextBlock,\n  })\n  const textBefore = getSelectionText({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: {\n        anchor: previousInlineObject\n          ? {path: previousInlineObject.path, offset: 0}\n          : blockStartPoint,\n        focus: selectionStartPoint,\n      },\n    },\n  })\n  const textDirectlyBefore = textBefore.split(/\\s+/).at(-1)\n\n  const nextInlineObject = getNextInlineObject(snapshot)\n  const blockEndPoint = getBlockEndPoint({\n    context: snapshot.context,\n    block: focusTextBlock,\n  })\n  const textAfter = getSelectionText({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: {\n        anchor: selectionStartPoint,\n        focus: nextInlineObject\n          ? {path: nextInlineObject.path, offset: 0}\n          : blockEndPoint,\n      },\n    },\n  })\n  const textDirectlyAfter = textAfter.split(/\\s+/).at(0)\n\n  if (\n    (textDirectlyBefore === undefined || textDirectlyBefore === '') &&\n    (textDirectlyAfter === undefined || textDirectlyAfter === '')\n  ) {\n    return null\n  }\n\n  const caretWordStartOffset: BlockOffset = textDirectlyBefore\n    ? {\n        ...selectionStartOffset,\n        offset: selectionStartOffset.offset - textDirectlyBefore.length,\n      }\n    : selectionStartOffset\n  const caretWordEndOffset: BlockOffset = textDirectlyAfter\n    ? {\n        ...selectionStartOffset,\n        offset: selectionStartOffset.offset + textDirectlyAfter.length,\n      }\n    : selectionStartOffset\n\n  const caretWordStartSelectionPoint = blockOffsetToSpanSelectionPoint({\n    context: snapshot.context,\n    blockOffset: caretWordStartOffset,\n    direction: 'backward',\n  })\n  const caretWordEndSelectionPoint = blockOffsetToSpanSelectionPoint({\n    context: snapshot.context,\n    blockOffset: caretWordEndOffset,\n    direction: 'forward',\n  })\n\n  if (!caretWordStartSelectionPoint || !caretWordEndSelectionPoint) {\n    return null\n  }\n\n  const caretWordSelection = {\n    anchor: caretWordStartSelectionPoint,\n    focus: caretWordEndSelectionPoint,\n  }\n\n  return isSelectionExpanded({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: caretWordSelection,\n    },\n  })\n    ? caretWordSelection\n    : null\n}\n","import {\n  isPortableTextSpan,\n  type KeyedSegment,\n  type PortableTextObject,\n} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getFocusChild} from './selectors'\n\n/**\n * @public\n */\nexport const getFocusInlineObject: EditorSelector<\n  | {node: PortableTextObject; path: [KeyedSegment, 'children', KeyedSegment]}\n  | undefined\n> = (snapshot) => {\n  const focusChild = getFocusChild(snapshot)\n\n  return focusChild && !isPortableTextSpan(focusChild.node)\n    ? {node: focusChild.node, path: focusChild.path}\n    : undefined\n}\n","import type {KeyedSegment, PortableTextTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {isTextBlock} from '../internal-utils/parse-blocks'\nimport {isKeyedSegment} from '../utils'\n\n/**\n * @public\n */\nexport const getSelectedTextBlocks: EditorSelector<\n  Array<{node: PortableTextTextBlock; path: [KeyedSegment]}>\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return []\n  }\n\n  const selectedTextBlocks: Array<{\n    node: PortableTextTextBlock\n    path: [KeyedSegment]\n  }> = []\n  const startKey = snapshot.context.selection.backward\n    ? isKeyedSegment(snapshot.context.selection.focus.path[0])\n      ? snapshot.context.selection.focus.path[0]._key\n      : undefined\n    : isKeyedSegment(snapshot.context.selection.anchor.path[0])\n      ? snapshot.context.selection.anchor.path[0]._key\n      : undefined\n  const endKey = snapshot.context.selection.backward\n    ? isKeyedSegment(snapshot.context.selection.anchor.path[0])\n      ? snapshot.context.selection.anchor.path[0]._key\n      : undefined\n    : isKeyedSegment(snapshot.context.selection.focus.path[0])\n      ? snapshot.context.selection.focus.path[0]._key\n      : undefined\n\n  if (!startKey || !endKey) {\n    return selectedTextBlocks\n  }\n\n  for (const block of snapshot.context.value) {\n    if (block._key === startKey) {\n      if (isTextBlock(snapshot.context, block)) {\n        selectedTextBlocks.push({node: block, path: [{_key: block._key}]})\n      }\n\n      if (startKey === endKey) {\n        break\n      }\n      continue\n    }\n\n    if (block._key === endKey) {\n      if (isTextBlock(snapshot.context, block)) {\n        selectedTextBlocks.push({node: block, path: [{_key: block._key}]})\n      }\n\n      break\n    }\n\n    if (selectedTextBlocks.length > 0) {\n      if (isTextBlock(snapshot.context, block)) {\n        selectedTextBlocks.push({node: block, path: [{_key: block._key}]})\n      }\n    }\n  }\n\n  return selectedTextBlocks\n}\n","import type {PortableTextSpan} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {isSpan, isTextBlock} from '../internal-utils/parse-blocks'\nimport type {EditorSelection, EditorSelectionPoint} from '../types/editor'\nimport {isEmptyTextBlock, isKeyedSegment} from '../utils'\nimport {getSelectionEndPoint} from './selector.get-selection-end-point'\nimport {getSelectionStartPoint} from './selector.get-selection-start-point'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\nimport {getFocusTextBlock} from './selectors'\n\n/**\n * @public\n */\nexport const getTrimmedSelection: EditorSelector<EditorSelection> = (\n  snapshot,\n) => {\n  if (!snapshot.context.selection) {\n    return snapshot.context.selection\n  }\n\n  const startPoint = getSelectionStartPoint(snapshot)\n  const endPoint = getSelectionEndPoint(snapshot)\n\n  if (!startPoint || !endPoint) {\n    return snapshot.context.selection\n  }\n\n  const startBlockKey = isKeyedSegment(startPoint.path[0])\n    ? startPoint.path[0]._key\n    : null\n  const startChildKey = isKeyedSegment(startPoint.path[2])\n    ? startPoint.path[2]._key\n    : null\n  const endBlockKey = isKeyedSegment(endPoint.path[0])\n    ? endPoint.path[0]._key\n    : null\n  const endChildKey = isKeyedSegment(endPoint.path[2])\n    ? endPoint.path[2]._key\n    : null\n\n  if (!startBlockKey || !endBlockKey) {\n    return snapshot.context.selection\n  }\n\n  let startBlockFound = false\n  let adjustedStartPoint: EditorSelectionPoint | undefined\n  let trimStartPoint = false\n  let adjustedEndPoint: EditorSelectionPoint | undefined\n  let trimEndPoint = false\n  let previousPotentialEndpoint:\n    | {blockKey: string; span: PortableTextSpan}\n    | undefined\n\n  for (const block of snapshot.context.value) {\n    if (block._key === startBlockKey) {\n      startBlockFound = true\n\n      if (\n        isTextBlock(snapshot.context, block) &&\n        isEmptyTextBlock(snapshot.context, block)\n      ) {\n        continue\n      }\n    }\n\n    if (!startBlockFound) {\n      continue\n    }\n\n    if (!isTextBlock(snapshot.context, block)) {\n      continue\n    }\n\n    if (\n      block._key === endBlockKey &&\n      isEmptyTextBlock(snapshot.context, block)\n    ) {\n      break\n    }\n\n    for (const child of block.children) {\n      if (child._key === endChildKey) {\n        if (!isSpan(snapshot.context, child) || endPoint.offset === 0) {\n          adjustedEndPoint = previousPotentialEndpoint\n            ? {\n                path: [\n                  {_key: previousPotentialEndpoint.blockKey},\n                  'children',\n                  {_key: previousPotentialEndpoint.span._key},\n                ],\n                offset: previousPotentialEndpoint.span.text.length,\n              }\n            : undefined\n\n          trimEndPoint = true\n          break\n        }\n      }\n\n      if (trimStartPoint) {\n        const lonelySpan =\n          isSpan(snapshot.context, child) && block.children.length === 1\n\n        if (\n          (isSpan(snapshot.context, child) && child.text.length > 0) ||\n          lonelySpan\n        ) {\n          adjustedStartPoint = {\n            path: [{_key: block._key}, 'children', {_key: child._key}],\n            offset: 0,\n          }\n          previousPotentialEndpoint = {blockKey: block._key, span: child}\n          trimStartPoint = false\n        }\n\n        continue\n      }\n\n      if (child._key === startChildKey) {\n        if (!isSpan(snapshot.context, child)) {\n          trimStartPoint = true\n          continue\n        }\n\n        if (startPoint.offset === child.text.length) {\n          trimStartPoint = true\n          previousPotentialEndpoint =\n            child.text.length > 0\n              ? {blockKey: block._key, span: child}\n              : previousPotentialEndpoint\n          continue\n        }\n      }\n\n      previousPotentialEndpoint =\n        isSpan(snapshot.context, child) && child.text.length > 0\n          ? {blockKey: block._key, span: child}\n          : previousPotentialEndpoint\n    }\n\n    if (block._key === endBlockKey) {\n      break\n    }\n  }\n\n  const trimmedSelection = snapshot.context.selection.backward\n    ? {\n        anchor: trimEndPoint && adjustedEndPoint ? adjustedEndPoint : endPoint,\n        focus: adjustedStartPoint ?? startPoint,\n        backward: true,\n      }\n    : {\n        anchor: adjustedStartPoint ?? startPoint,\n        focus: trimEndPoint && adjustedEndPoint ? adjustedEndPoint : endPoint,\n      }\n\n  if (\n    isSelectionCollapsed({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: trimmedSelection,\n      },\n    })\n  ) {\n    const focusTextBlock = getFocusTextBlock({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: trimmedSelection,\n      },\n    })\n\n    if (\n      focusTextBlock &&\n      !isEmptyTextBlock(snapshot.context, focusTextBlock.node)\n    ) {\n      return null\n    }\n  }\n\n  return trimmedSelection\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {isTextBlock} from '../internal-utils/parse-blocks'\nimport {getSelectedBlocks} from './selectors'\n\n/**\n * @public\n */\nexport function isActiveAnnotation(\n  annotation: string,\n): EditorSelector<boolean> {\n  return (snapshot) => {\n    const selectedBlocks = getSelectedBlocks(snapshot)\n    const selectionMarkDefs = selectedBlocks.flatMap((block) =>\n      isTextBlock(snapshot.context, block.node)\n        ? (block.node.markDefs ?? [])\n        : [],\n    )\n    const activeMarkDefs = selectionMarkDefs.filter(\n      (markDef) =>\n        markDef._type === annotation &&\n        snapshot.beta.activeAnnotations.includes(markDef._key),\n    )\n\n    return activeMarkDefs.length > 0\n  }\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {getSelectedSpans} from './selector.get-selected-spans'\nimport {isSelectionExpanded} from './selector.is-selection-expanded'\n\n/**\n * @public\n */\nexport function isActiveDecorator(decorator: string): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (isSelectionExpanded(snapshot)) {\n      const selectedSpans = getSelectedSpans(snapshot)\n\n      return (\n        selectedSpans.length > 0 &&\n        selectedSpans.every((span) => span.node.marks?.includes(decorator))\n      )\n    }\n\n    return snapshot.beta.activeDecorators.includes(decorator)\n  }\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {getActiveListItem} from './selector.get-active-list-item'\n\n/**\n * @public\n */\nexport function isActiveListItem(listItem: string): EditorSelector<boolean> {\n  return (snapshot) => {\n    const activeListItem = getActiveListItem(snapshot)\n\n    return activeListItem === listItem\n  }\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {getActiveStyle} from './selector.get-active-style'\n\n/**\n * @public\n */\nexport function isActiveStyle(style: string): EditorSelector<boolean> {\n  return (snapshot) => {\n    const activeStyle = getActiveStyle(snapshot)\n\n    return activeStyle === style\n  }\n}\n","import type {KeyedSegment, PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport * as utils from '../utils'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\n\n/**\n * @public\n */\nexport function isAtTheEndOfBlock(block: {\n  node: PortableTextBlock\n  path: [KeyedSegment]\n}): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (!snapshot.context.selection || !isSelectionCollapsed(snapshot)) {\n      return false\n    }\n\n    const blockEndPoint = utils.getBlockEndPoint({\n      context: snapshot.context,\n      block,\n    })\n\n    return utils.isEqualSelectionPoints(\n      snapshot.context.selection.focus,\n      blockEndPoint,\n    )\n  }\n}\n","import type {KeyedSegment, PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport * as utils from '../utils'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\n\n/**\n * @public\n */\nexport function isAtTheStartOfBlock(block: {\n  node: PortableTextBlock\n  path: [KeyedSegment]\n}): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (!snapshot.context.selection || !isSelectionCollapsed(snapshot)) {\n      return false\n    }\n\n    const blockStartPoint = utils.getBlockStartPoint({\n      context: snapshot.context,\n      block,\n    })\n\n    return utils.isEqualSelectionPoints(\n      snapshot.context.selection.focus,\n      blockStartPoint,\n    )\n  }\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {isTextBlock} from '../internal-utils/parse-blocks'\nimport type {EditorSelectionPoint} from '../types/editor'\nimport {isKeyedSegment} from '../utils/util.is-keyed-segment'\nimport {reverseSelection} from '../utils/util.reverse-selection'\n\n/**\n * @public\n */\nexport function isPointAfterSelection(\n  point: EditorSelectionPoint,\n): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (!snapshot.context.selection) {\n      return false\n    }\n\n    const selection = snapshot.context.selection.backward\n      ? reverseSelection(snapshot.context.selection)\n      : snapshot.context.selection\n\n    const pointBlockKey = isKeyedSegment(point.path[0])\n      ? point.path[0]._key\n      : undefined\n    const pointChildKey = isKeyedSegment(point.path[2])\n      ? point.path[2]._key\n      : undefined\n\n    const endBlockKey = isKeyedSegment(selection.focus.path[0])\n      ? selection.focus.path[0]._key\n      : undefined\n    const endChildKey = isKeyedSegment(selection.focus.path[2])\n      ? selection.focus.path[2]._key\n      : undefined\n\n    if (!pointBlockKey || !endBlockKey) {\n      return false\n    }\n\n    let after = false\n\n    for (const block of snapshot.context.value) {\n      if (block._key === endBlockKey) {\n        if (block._key !== pointBlockKey) {\n          after = true\n          break\n        }\n\n        // Both the point and the selection end in this block\n\n        if (!isTextBlock(snapshot.context, block)) {\n          break\n        }\n\n        if (!pointChildKey || !endChildKey) {\n          break\n        }\n\n        for (const child of block.children) {\n          if (child._key === endChildKey) {\n            if (child._key !== pointChildKey) {\n              after = true\n              break\n            }\n\n            // Both the point and the selection end in this child\n\n            after = point.offset > selection.focus.offset\n            break\n          }\n\n          if (child._key === pointChildKey) {\n            break\n          }\n        }\n      }\n\n      if (block._key === pointBlockKey) {\n        break\n      }\n    }\n\n    return after\n  }\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {isTextBlock} from '../internal-utils/parse-blocks'\nimport type {EditorSelectionPoint} from '../types/editor'\nimport {isKeyedSegment} from '../utils/util.is-keyed-segment'\nimport {reverseSelection} from '../utils/util.reverse-selection'\n\n/**\n * @public\n */\nexport function isPointBeforeSelection(\n  point: EditorSelectionPoint,\n): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (!snapshot.context.selection) {\n      return false\n    }\n\n    const selection = snapshot.context.selection.backward\n      ? reverseSelection(snapshot.context.selection)\n      : snapshot.context.selection\n\n    const pointBlockKey = isKeyedSegment(point.path[0])\n      ? point.path[0]._key\n      : undefined\n    const pointChildKey = isKeyedSegment(point.path[2])\n      ? point.path[2]._key\n      : undefined\n\n    const startBlockKey = isKeyedSegment(selection.anchor.path[0])\n      ? selection.anchor.path[0]._key\n      : undefined\n    const startChildKey = isKeyedSegment(selection.anchor.path[2])\n      ? selection.anchor.path[2]._key\n      : undefined\n\n    if (!pointBlockKey || !startBlockKey) {\n      return false\n    }\n\n    let before = false\n\n    for (const block of snapshot.context.value) {\n      if (block._key === pointBlockKey) {\n        if (block._key !== startBlockKey) {\n          before = true\n          break\n        }\n\n        // Both the point and the selection start in this block\n\n        if (!isTextBlock(snapshot.context, block)) {\n          break\n        }\n\n        if (!pointChildKey || !startChildKey) {\n          break\n        }\n\n        for (const child of block.children) {\n          if (child._key === pointChildKey) {\n            if (child._key !== startChildKey) {\n              before = true\n              break\n            }\n\n            // Both the point and the selection start in this child\n\n            before = point.offset < selection.anchor.offset\n            break\n          }\n\n          if (child._key === startChildKey) {\n            break\n          }\n        }\n      }\n\n      if (block._key === startBlockKey) {\n        break\n      }\n    }\n\n    return before\n  }\n}\n","import type {EditorSelection} from '../types/editor'\nimport {isEqualSelectionPoints} from '../utils'\nimport type {EditorSelector} from './../editor/editor-selector'\nimport {getSelectionEndPoint} from './selector.get-selection-end-point'\nimport {getSelectionStartPoint} from './selector.get-selection-start-point'\nimport {isPointAfterSelection} from './selector.is-point-after-selection'\nimport {isPointBeforeSelection} from './selector.is-point-before-selection'\n\n/**\n * @public\n */\nexport function isOverlappingSelection(\n  selection: EditorSelection,\n): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (!selection || !snapshot.context.selection) {\n      return false\n    }\n\n    const selectionStartPoint = getSelectionStartPoint({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection,\n      },\n    })\n    const selectionEndPoint = getSelectionEndPoint({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection,\n      },\n    })\n\n    const originalSelectionStartPoint = getSelectionStartPoint(snapshot)\n    const originalSelectionEndPoint = getSelectionEndPoint(snapshot)\n\n    if (\n      !selectionStartPoint ||\n      !selectionEndPoint ||\n      !originalSelectionStartPoint ||\n      !originalSelectionEndPoint\n    ) {\n      return false\n    }\n\n    const startPointBeforeSelection =\n      isPointBeforeSelection(selectionStartPoint)(snapshot)\n    const startPointAfterSelection =\n      isPointAfterSelection(selectionStartPoint)(snapshot)\n    const endPointBeforeSelection =\n      isPointBeforeSelection(selectionEndPoint)(snapshot)\n    const endPointAfterSelection =\n      isPointAfterSelection(selectionEndPoint)(snapshot)\n\n    const originalStartPointBeforeStartPoint = isPointBeforeSelection(\n      originalSelectionStartPoint,\n    )({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionStartPoint,\n          focus: selectionStartPoint,\n        },\n      },\n    })\n    const originalStartPointAfterStartPoint = isPointAfterSelection(\n      originalSelectionStartPoint,\n    )({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionStartPoint,\n          focus: selectionStartPoint,\n        },\n      },\n    })\n\n    const originalEndPointBeforeEndPoint = isPointBeforeSelection(\n      originalSelectionEndPoint,\n    )({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionEndPoint,\n          focus: selectionEndPoint,\n        },\n      },\n    })\n    const originalEndPointAfterEndPoint = isPointAfterSelection(\n      originalSelectionEndPoint,\n    )({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionEndPoint,\n          focus: selectionEndPoint,\n        },\n      },\n    })\n\n    const endPointEqualToOriginalStartPoint = isEqualSelectionPoints(\n      selectionEndPoint,\n      originalSelectionStartPoint,\n    )\n    const startPointEqualToOriginalEndPoint = isEqualSelectionPoints(\n      selectionStartPoint,\n      originalSelectionEndPoint,\n    )\n\n    if (endPointBeforeSelection && !endPointEqualToOriginalStartPoint) {\n      return false\n    }\n\n    if (startPointAfterSelection && !startPointEqualToOriginalEndPoint) {\n      return false\n    }\n\n    if (\n      !originalStartPointBeforeStartPoint &&\n      originalStartPointAfterStartPoint &&\n      !originalEndPointBeforeEndPoint &&\n      originalEndPointAfterEndPoint\n    ) {\n      return !endPointEqualToOriginalStartPoint\n    }\n\n    if (\n      originalStartPointBeforeStartPoint &&\n      !originalStartPointAfterStartPoint &&\n      originalEndPointBeforeEndPoint &&\n      !originalEndPointAfterEndPoint\n    ) {\n      return !startPointEqualToOriginalEndPoint\n    }\n\n    if (\n      !startPointAfterSelection ||\n      !startPointBeforeSelection ||\n      !endPointAfterSelection ||\n      !endPointBeforeSelection\n    ) {\n      return true\n    }\n\n    return false\n  }\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport * as utils from '../utils'\nimport {getSelectionEndBlock, getSelectionStartBlock} from './selectors'\n\n/**\n * @public\n */\nexport const isSelectingEntireBlocks: EditorSelector<boolean> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return false\n  }\n\n  const startPoint = snapshot.context.selection.backward\n    ? snapshot.context.selection.focus\n    : snapshot.context.selection.anchor\n  const endPoint = snapshot.context.selection.backward\n    ? snapshot.context.selection.anchor\n    : snapshot.context.selection.focus\n\n  const startBlock = getSelectionStartBlock(snapshot)\n  const endBlock = getSelectionEndBlock(snapshot)\n\n  if (!startBlock || !endBlock) {\n    return false\n  }\n\n  const startBlockStartPoint = utils.getBlockStartPoint({\n    context: snapshot.context,\n    block: startBlock,\n  })\n  const endBlockEndPoint = utils.getBlockEndPoint({\n    context: snapshot.context,\n    block: endBlock,\n  })\n\n  return (\n    utils.isEqualSelectionPoints(startBlockStartPoint, startPoint) &&\n    utils.isEqualSelectionPoints(endBlockEndPoint, endPoint)\n  )\n}\n"],"names":["getSelectedSpans","snapshot","context","selection","selectedSpans","startPoint","backward","focus","anchor","endPoint","startBlockKey","isKeyedSegment","path","_key","undefined","endBlockKey","startSpanKey","endSpanKey","startBlockFound","block","value","isTextBlock","child","children","isSpan","offset","text","length","push","node","getActiveAnnotations","selectedBlocks","getSelectedBlocks","focusSpan","getFocusSpan","isSelectionCollapsed","activeAnnotations","beta","flatMap","markDefs","filter","markDef","includes","getActiveListItem","selectedTextBlocks","map","firstTextBlock","at","firstListItem","listItem","every","getActiveStyle","firstStyle","style","getSelectionEndPoint","getNextInlineObject","focusTextBlock","getFocusTextBlock","selectionEndPoint","selectionEndPointChildKey","isKeySegment","endPointChildFound","inlineObject","getCaretWordSelection","selectionStartPoint","getSelectionStartPoint","selectionStartOffset","spanSelectionPointToBlockOffset","selectionPoint","previousInlineObject","getPreviousInlineObject","blockStartPoint","getBlockStartPoint","textDirectlyBefore","getSelectionText","split","nextInlineObject","blockEndPoint","getBlockEndPoint","textDirectlyAfter","caretWordStartOffset","caretWordEndOffset","caretWordStartSelectionPoint","blockOffsetToSpanSelectionPoint","blockOffset","direction","caretWordEndSelectionPoint","caretWordSelection","isSelectionExpanded","getFocusInlineObject","focusChild","getFocusChild","isPortableTextSpan","getSelectedTextBlocks","startKey","endKey","getTrimmedSelection","startChildKey","endChildKey","adjustedStartPoint","trimStartPoint","adjustedEndPoint","trimEndPoint","previousPotentialEndpoint","isEmptyTextBlock","blockKey","span","lonelySpan","trimmedSelection","isActiveAnnotation","annotation","_type","isActiveDecorator","decorator","marks","activeDecorators","isActiveListItem","isActiveStyle","isAtTheEndOfBlock","utils","isAtTheStartOfBlock","isPointAfterSelection","point","reverseSelection","pointBlockKey","pointChildKey","after","isPointBeforeSelection","before","isOverlappingSelection","originalSelectionStartPoint","originalSelectionEndPoint","startPointBeforeSelection","startPointAfterSelection","endPointBeforeSelection","endPointAfterSelection","originalStartPointBeforeStartPoint","originalStartPointAfterStartPoint","originalEndPointBeforeEndPoint","originalEndPointAfterEndPoint","endPointEqualToOriginalStartPoint","isEqualSelectionPoints","startPointEqualToOriginalEndPoint","isSelectingEntireBlocks","startBlock","getSelectionStartBlock","endBlock","getSelectionEndBlock","startBlockStartPoint","endBlockEndPoint"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19],"debugId":null}},
    {"offset": {"line": 1259, "column": 0}, "map": {"version":3,"file":"util.child-selection-point-to-block-offset.js","sources":["file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/utils/util.block-offset-to-block-selection-point.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/utils/util.block-offset-to-selection-point.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/utils/util.block-offsets-to-selection.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/utils/util.child-selection-point-to-block-offset.ts"],"sourcesContent":["import type {EditorContext} from '../editor/editor-snapshot'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {EditorSelectionPoint} from '../types/editor'\n\n/**\n * @public\n */\nexport function blockOffsetToBlockSelectionPoint({\n  context,\n  blockOffset,\n}: {\n  context: Pick<EditorContext, 'value'>\n  blockOffset: BlockOffset\n}): EditorSelectionPoint | undefined {\n  let selectionPoint: EditorSelectionPoint | undefined\n\n  for (const block of context.value) {\n    if (block._key === blockOffset.path[0]._key) {\n      selectionPoint = {\n        path: [{_key: block._key}],\n        offset: blockOffset.offset,\n      }\n      break\n    }\n  }\n\n  return selectionPoint\n}\n","import type {EditorContext} from '../editor/editor-snapshot'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {EditorSelectionPoint} from '../types/editor'\nimport {blockOffsetToSpanSelectionPoint} from './util.block-offset'\nimport {blockOffsetToBlockSelectionPoint} from './util.block-offset-to-block-selection-point'\n\n/**\n * @public\n */\nexport function blockOffsetToSelectionPoint({\n  context,\n  blockOffset,\n  direction,\n}: {\n  context: Pick<EditorContext, 'schema' | 'value'>\n  blockOffset: BlockOffset\n  direction: 'forward' | 'backward'\n}): EditorSelectionPoint | undefined {\n  const spanSelectionPoint = blockOffsetToSpanSelectionPoint({\n    context,\n    blockOffset,\n    direction,\n  })\n\n  if (!spanSelectionPoint) {\n    return blockOffsetToBlockSelectionPoint({\n      context,\n      blockOffset,\n    })\n  }\n\n  return spanSelectionPoint\n}\n","import type {EditorSelection} from '..'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport type {BlockOffset} from '../types/block-offset'\nimport {blockOffsetToSelectionPoint} from './util.block-offset-to-selection-point'\n\n/**\n * @public\n */\nexport function blockOffsetsToSelection({\n  context,\n  offsets,\n  backward,\n}: {\n  context: Pick<EditorContext, 'schema' | 'value'>\n  offsets: {anchor: BlockOffset; focus: BlockOffset}\n  backward?: boolean\n}): EditorSelection {\n  const anchor = blockOffsetToSelectionPoint({\n    context,\n    blockOffset: offsets.anchor,\n    direction: backward ? 'backward' : 'forward',\n  })\n  const focus = blockOffsetToSelectionPoint({\n    context,\n    blockOffset: offsets.focus,\n    direction: backward ? 'forward' : 'backward',\n  })\n\n  if (!anchor || !focus) {\n    return null\n  }\n\n  return {\n    anchor,\n    focus,\n    backward,\n  }\n}\n","import type {EditorContext} from '../editor/editor-snapshot'\nimport {isSpan, isTextBlock} from '../internal-utils/parse-blocks'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {EditorSelectionPoint} from '../types/editor'\nimport {isKeyedSegment} from './util.is-keyed-segment'\n\n/**\n * @public\n */\nexport function childSelectionPointToBlockOffset({\n  context,\n  selectionPoint,\n}: {\n  context: Pick<EditorContext, 'schema' | 'value'>\n  selectionPoint: EditorSelectionPoint\n}): BlockOffset | undefined {\n  let offset = 0\n\n  const blockKey = isKeyedSegment(selectionPoint.path[0])\n    ? selectionPoint.path[0]._key\n    : undefined\n  const childKey = isKeyedSegment(selectionPoint.path[2])\n    ? selectionPoint.path[2]._key\n    : undefined\n\n  if (!blockKey || !childKey) {\n    return undefined\n  }\n\n  for (const block of context.value) {\n    if (block._key !== blockKey) {\n      continue\n    }\n\n    if (!isTextBlock(context, block)) {\n      continue\n    }\n\n    for (const child of block.children) {\n      if (child._key === childKey) {\n        return {\n          path: [{_key: block._key}],\n          offset: offset + selectionPoint.offset,\n        }\n      }\n\n      if (isSpan(context, child)) {\n        offset += child.text.length\n      }\n    }\n  }\n}\n"],"names":["blockOffsetToBlockSelectionPoint","context","blockOffset","selectionPoint","block","value","_key","path","offset","blockOffsetToSelectionPoint","direction","blockOffsetToSpanSelectionPoint","blockOffsetsToSelection","offsets","backward","anchor","focus","childSelectionPointToBlockOffset","blockKey","isKeyedSegment","undefined","childKey","isTextBlock","child","children","isSpan","text","length"],"mappings":";;;;;;;;AAOO,SAASA,iCAAiC,EAC/CC,OAAAA,EACAC,WAAAA,EAIF,EAAqC;IAC/BC,IAAAA;IAEJ,KAAA,MAAWC,SAASH,QAAQI,KAAAA,CAC1B,IAAID,MAAME,IAAAA,KAASJ,YAAYK,IAAAA,CAAK,CAAC,CAAA,CAAED,IAAAA,EAAM;QAC1B,iBAAA;YACfC,MAAM;gBAAC;oBAACD,MAAMF,MAAME,IAAAA;gBAAAA,CAAK;aAAA;YACzBE,QAAQN,YAAYM,MAAAA;QACtB;QACA;IAAA;IAIGL,OAAAA;AACT;AClBO,SAASM,4BAA4B,EAC1CR,OAAAA,EACAC,WAAAA,EACAQ,SAAAA,EAKF,EAAqC;IAOnC,WAN2BC,iOAAAA,EAAgC;QACzDV;QACAC;QACAQ;IAAAA,CACD,KAGQV,iCAAiC;QACtCC;QACAC;IAAAA,CACD;AAIL;ACxBO,SAASU,wBAAwB,EACtCX,OAAAA,EACAY,OAAAA,EACAC,QAAAA,EAKF,EAAoB;IAClB,MAAMC,SAASN,4BAA4B;QACzCR;QACAC,aAAaW,QAAQE,MAAAA;QACrBL,WAAWI,WAAW,aAAa;IAAA,CACpC,GACKE,QAAQP,4BAA4B;QACxCR;QACAC,aAAaW,QAAQG,KAAAA;QACrBN,WAAWI,WAAW,YAAY;IAAA,CACnC;IAED,OAAI,CAACC,UAAU,CAACC,QACP,OAGF;QACLD;QACAC;QACAF;IACF;AACF;AC5BO,SAASG,iCAAiC,EAC/ChB,OAAAA,EACAE,cAAAA,EAIF,EAA4B;IAC1B,IAAIK,SAAS;IAEPU,MAAAA,YAAWC,mNAAAA,EAAehB,eAAeI,IAAAA,CAAK,CAAC,CAAC,IAClDJ,eAAeI,IAAAA,CAAK,CAAC,CAAA,CAAED,IAAAA,GACvBc,KAAAA,GACEC,8MAAWF,iBAAAA,EAAehB,eAAeI,IAAAA,CAAK,CAAC,CAAC,IAClDJ,eAAeI,IAAAA,CAAK,CAAC,CAAA,CAAED,IAAAA,GACvBc,KAAAA;IAEA,IAAA,CAAA,CAAA,CAACF,YAAY,CAACG,QAAAA,GAAAA;QAIlB,KAAA,MAAWjB,SAASH,QAAQI,KAAAA,CAC1B,IAAID,MAAME,IAAAA,KAASY,aAIdI,gNAAAA,EAAYrB,SAASG,KAAK,GAIpBmB,KAAAA,MAAAA,SAASnB,MAAMoB,QAAAA,CAAU;YAClC,IAAID,MAAMjB,IAAAA,KAASe,UACV,OAAA;gBACLd,MAAM;oBAAC;wBAACD,MAAMF,MAAME,IAAAA;oBAAAA,CAAK;iBAAA;gBACzBE,QAAQA,SAASL,eAAeK,MAAAA;YAClC;YAGEiB,CAAAA,GAAAA,8LAAAA,CAAAA,WAAAA,EAAOxB,SAASsB,KAAK,KAAA,CACvBf,UAAUe,MAAMG,IAAAA,CAAKC,MAAAA;QAAAA;IAAAA;AAI7B","ignoreList":[0,1,2,3],"debugId":null}},
    {"offset": {"line": 1333, "column": 0}, "map": {"version":3,"file":"util.selection-point-to-block-offset.js","sources":["file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/utils/util.get-selection-end-point.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/utils/util.get-selection-start-point.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/utils/util.is-selection-collapsed.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/utils/util.selection-point-to-block-offset.ts"],"sourcesContent":["import type {EditorSelection, EditorSelectionPoint} from '..'\n\n/**\n * @public\n */\nexport function getSelectionEndPoint<\n  TEditorSelection extends NonNullable<EditorSelection> | null,\n  TEditorSelectionPoint extends\n    EditorSelectionPoint | null = TEditorSelection extends NonNullable<EditorSelection>\n    ? EditorSelectionPoint\n    : null,\n>(selection: TEditorSelection): TEditorSelectionPoint {\n  if (!selection) {\n    return null as TEditorSelectionPoint\n  }\n\n  return (\n    selection.backward ? selection.anchor : selection.focus\n  ) as TEditorSelectionPoint\n}\n","import type {EditorSelection, EditorSelectionPoint} from '..'\n\n/**\n * @public\n */\nexport function getSelectionStartPoint<\n  TEditorSelection extends NonNullable<EditorSelection> | null,\n  TEditorSelectionPoint extends\n    EditorSelectionPoint | null = TEditorSelection extends NonNullable<EditorSelection>\n    ? EditorSelectionPoint\n    : null,\n>(selection: TEditorSelection): TEditorSelectionPoint {\n  if (!selection) {\n    return null as TEditorSelectionPoint\n  }\n\n  return (\n    selection.backward ? selection.focus : selection.anchor\n  ) as TEditorSelectionPoint\n}\n","import type {EditorSelection} from '../types/editor'\n\n/**\n * @public\n */\nexport function isSelectionCollapsed(selection: EditorSelection) {\n  if (!selection) {\n    return false\n  }\n\n  return (\n    selection.anchor.path.join() === selection.focus.path.join() &&\n    selection.anchor.offset === selection.focus.offset\n  )\n}\n","import type {EditorContext} from '../editor/editor-snapshot'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {EditorSelectionPoint} from '../types/editor'\nimport {childSelectionPointToBlockOffset} from './util.child-selection-point-to-block-offset'\nimport {isKeyedSegment} from './util.is-keyed-segment'\n\n/**\n * @public\n */\nexport function selectionPointToBlockOffset({\n  context,\n  selectionPoint,\n}: {\n  context: Pick<EditorContext, 'schema' | 'value'>\n  selectionPoint: EditorSelectionPoint\n}): BlockOffset | undefined {\n  if (\n    selectionPoint.path.length === 1 &&\n    isKeyedSegment(selectionPoint.path[0])\n  ) {\n    return {\n      path: [{_key: selectionPoint.path[0]._key}],\n      offset: selectionPoint.offset,\n    }\n  }\n\n  return childSelectionPointToBlockOffset({\n    context,\n    selectionPoint,\n  })\n}\n"],"names":["getSelectionEndPoint","selection","backward","anchor","focus","getSelectionStartPoint","isSelectionCollapsed","path","join","offset","selectionPointToBlockOffset","context","selectionPoint","length","isKeyedSegment","_key","childSelectionPointToBlockOffset"],"mappings":";;;;;;;;;;AAKO,SAASA,qBAMdC,SAAAA,EAAoD;IACpD,OAAKA,YAKHA,UAAUC,QAAAA,GAAWD,UAAUE,MAAAA,GAASF,UAAUG,KAAAA,GAJ3C;AAMX;ACdO,SAASC,uBAMdJ,SAAAA,EAAoD;IACpD,OAAKA,YAKHA,UAAUC,QAAAA,GAAWD,UAAUG,KAAAA,GAAQH,UAAUE,MAAAA,GAJ1C;AAMX;ACdO,SAASG,qBAAqBL,SAAAA,EAA4B;IAC/D,OAAKA,YAKHA,UAAUE,MAAAA,CAAOI,IAAAA,CAAKC,IAAAA,CAAAA,MAAWP,UAAUG,KAAAA,CAAMG,IAAAA,CAAKC,IAAAA,CAAAA,KACtDP,UAAUE,MAAAA,CAAOM,MAAAA,KAAWR,UAAUG,KAAAA,CAAMK,MAAAA,GALrC,CAAA;AAOX;ACLO,SAASC,4BAA4B,EAC1CC,OAAAA,EACAC,cAAAA,EAIF,EAA4B;IAExBA,OAAAA,eAAeL,IAAAA,CAAKM,MAAAA,KAAW,wMAC/BC,iBAAAA,EAAeF,eAAeL,IAAAA,CAAK,CAAC,CAAC,IAE9B;QACLA,MAAM;YAAC;gBAACQ,MAAMH,eAAeL,IAAAA,CAAK,CAAC,CAAA,CAAEQ,IAAAA;YAAAA,CAAK;SAAA;QAC1CN,QAAQG,eAAeH,MAAAA;IAAAA,4OAIpBO,mCAAAA,EAAiC;QACtCL;QACAC;IAAAA,CACD;AACH","ignoreList":[0,1,2,3],"debugId":null}},
    {"offset": {"line": 1373, "column": 0}, "map": {"version":3,"file":"index.js","sources":["file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/behaviors/behavior.types.action.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/behaviors/behavior.types.behavior.ts"],"sourcesContent":["import type {EditorSnapshot} from '../editor/editor-snapshot'\nimport type {PickFromUnion} from '../type-utils'\nimport type {\n  CustomBehaviorEvent,\n  NativeBehaviorEvent,\n  SyntheticBehaviorEvent,\n} from './behavior.types.event'\n\n/**\n * @beta\n */\nexport type BehaviorAction =\n  | {\n      type: 'execute'\n      event: SyntheticBehaviorEvent\n    }\n  | {\n      type: 'forward'\n      event: NativeBehaviorEvent | SyntheticBehaviorEvent | CustomBehaviorEvent\n    }\n  | {\n      type: 'raise'\n      event: SyntheticBehaviorEvent | CustomBehaviorEvent\n    }\n  | {\n      type: 'effect'\n      effect: () => void\n    }\n\n/**\n * @beta\n */\nexport function execute(\n  event: SyntheticBehaviorEvent,\n): PickFromUnion<BehaviorAction, 'type', 'execute'> {\n  return {type: 'execute', event}\n}\n\n/**\n * @beta\n */\nexport function forward(\n  event: NativeBehaviorEvent | SyntheticBehaviorEvent | CustomBehaviorEvent,\n): PickFromUnion<BehaviorAction, 'type', 'forward'> {\n  return {type: 'forward', event}\n}\n\n/**\n * @beta\n */\nexport function raise(\n  event: SyntheticBehaviorEvent | CustomBehaviorEvent,\n): PickFromUnion<BehaviorAction, 'type', 'raise'> {\n  return {type: 'raise', event}\n}\n\n/**\n * @beta\n */\nexport function effect(\n  effect: () => void,\n): PickFromUnion<BehaviorAction, 'type', 'effect'> {\n  return {type: 'effect', effect}\n}\n\n/**\n * @beta\n */\nexport type BehaviorActionSet<TBehaviorEvent, TGuardResponse> = (\n  payload: {\n    snapshot: EditorSnapshot\n    event: TBehaviorEvent\n  },\n  guardResponse: TGuardResponse,\n) => Array<BehaviorAction>\n","import type {BehaviorActionSet} from './behavior.types.action'\nimport type {\n  BehaviorEvent,\n  BehaviorEventTypeNamespace,\n  CustomBehaviorEvent,\n  ResolveBehaviorEvent,\n} from './behavior.types.event'\nimport type {BehaviorGuard} from './behavior.types.guard'\n\n/**\n * @beta\n */\nexport type Behavior<\n  TBehaviorEventType extends\n    | '*'\n    | `${BehaviorEventTypeNamespace}.*`\n    | BehaviorEvent['type'] =\n    | '*'\n    | `${BehaviorEventTypeNamespace}.*`\n    | BehaviorEvent['type'],\n  TGuardResponse = true,\n  TBehaviorEvent extends\n    ResolveBehaviorEvent<TBehaviorEventType> = ResolveBehaviorEvent<TBehaviorEventType>,\n> = {\n  /**\n   * Editor Event that triggers this Behavior.\n   */\n  on: TBehaviorEventType\n  /**\n   * Predicate function that determines if the Behavior should be executed.\n   * Returning a non-nullable value from the guard will pass the value to the\n   * actions and execute them.\n   */\n  guard?: BehaviorGuard<TBehaviorEvent, TGuardResponse>\n  /**\n   * Array of Behavior Action sets.\n   * Each set represents a step in the history stack.\n   */\n  actions: Array<BehaviorActionSet<TBehaviorEvent, TGuardResponse>>\n}\n\n/**\n * @beta\n *\n * @example\n *\n * ```tsx\n * const noLowerCaseA = defineBehavior({\n *   on: 'insert.text',\n *   guard: ({event, snapshot}) => event.text === 'a',\n *   actions: [({event, snapshot}) => [{type: 'insert.text', text: 'A'}]],\n * })\n * ```\n *\n */\nexport function defineBehavior<\n  TPayload extends Record<string, unknown>,\n  TBehaviorEventType extends\n    | '*'\n    | `${BehaviorEventTypeNamespace}.*`\n    | BehaviorEvent['type'] = CustomBehaviorEvent['type'],\n  TGuardResponse = true,\n>(\n  behavior: Behavior<\n    TBehaviorEventType,\n    TGuardResponse,\n    ResolveBehaviorEvent<TBehaviorEventType, TPayload>\n  >,\n): Behavior\nexport function defineBehavior<\n  TPayload extends never = never,\n  TBehaviorEventType extends\n    | '*'\n    | `${BehaviorEventTypeNamespace}.*`\n    | BehaviorEvent['type'] = BehaviorEvent['type'],\n  TGuardResponse = true,\n  TBehaviorEvent extends ResolveBehaviorEvent<\n    TBehaviorEventType,\n    TPayload\n  > = ResolveBehaviorEvent<TBehaviorEventType, TPayload>,\n>(\n  behavior: Behavior<TBehaviorEventType, TGuardResponse, TBehaviorEvent>,\n): Behavior {\n  return behavior as unknown as Behavior\n}\n"],"names":["execute","event","type","forward","raise","effect","defineBehavior","behavior"],"mappings":";;;;;;;AAgCO,SAASA,QACdC,KAAAA,EACkD;IAC3C,OAAA;QAACC,MAAM;QAAWD;IAAK;AAChC;AAKO,SAASE,QACdF,KAAAA,EACkD;IAC3C,OAAA;QAACC,MAAM;QAAWD;IAAK;AAChC;AAKO,SAASG,MACdH,KAAAA,EACgD;IACzC,OAAA;QAACC,MAAM;QAASD;IAAK;AAC9B;AAKO,SAASI,OACdA,OAAAA,EACiD;IAC1C,OAAA;QAACH,MAAM;QAAUG,QAAAA;IAAM;AAChC;ACMO,SAASC,eAYdC,QAAAA,EACU;IACHA,OAAAA;AACT","ignoreList":[0,1],"debugId":null}},
    {"offset": {"line": 1415, "column": 0}, "map": {"version":3,"file":"index.js","sources":["file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor-event-listener.tsx","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/internal-utils/compound-client-rect.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/internal-utils/debug.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/internal-utils/drag-selection.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/internal-utils/values.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/internal-utils/slate-utils.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/internal-utils/event-position.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/internal-utils/paths.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/internal-utils/ranges.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/internal-utils/selection.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/internal-utils/selection-elements.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/internal-utils/weakMaps.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/editor-actor-context.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/components/drop-indicator.tsx","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/components/render-default-object.tsx","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/key-generator.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/priority/priority.types.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/priority/priority.core.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/behaviors/behavior.core.block-element.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/components/use-core-block-element-behaviors.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/components/render-block-object.tsx","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/components/render-inline-object.tsx","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/components/render-text-block.tsx","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/components/render-element.tsx","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/hooks/usePortableTextEditor.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/internal-utils/stop-actor.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/converters/converter.json.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/converters/converter.portable-text.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/converters/converter.text-html.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/converters/converter.text-plain.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/converters/converters.core.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/internal-utils/schema.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/internal-utils/create-placeholder-block.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/get-active-annotations.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/get-active-decorators.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/operations/behavior.operation.insert.text.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/node_modules/.pnpm/%40portabletext%2Btoolkit%402.0.17/node_modules/%40portabletext/toolkit/dist/index.js","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/internal-utils/sibling-utils.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/internal-utils/withChanges.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/internal-utils/withUndoRedo.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/editor-selector.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/plugins/createWithPortableTextMarkModel.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/node_modules/.pnpm/%40sanity%2Bdiff-match-patch%403.2.0/node_modules/%40sanity/diff-match-patch/dist/index.js","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/with-undo-step.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/plugins/createWithUndoRedo.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/operations/behavior.operation.annotation.add.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/operations/behavior.operation.annotation.remove.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/operations/behavior.operation.block.set.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/operations/behavior.operation.block.unset.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/operations/behavior.operation.decorator.add.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/operations/behavior.operation.delete.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/operations/behavior.operation.delete.backward.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/operations/behavior.operation.delete.block.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/operations/behavior.operation.delete.forward.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/operations/behavior.operation.insert-inline-object.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/operations/behavior.operation.insert-span.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/operations/behavior.operation.insert.block.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/operations/behavior.operation.move.backward.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/operations/behavior.operation.move.block.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/operations/behavior.operation.move.forward.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/operations/behavior.operation.select.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/operations/behavior.operations.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/with-applying-behavior-operations.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/plugins/create-with-event-listeners.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/plugins/createWithMaxBlocks.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/plugins/createWithObjectKeys.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/internal-utils/applyPatch.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/internal-utils/operation-to-patches.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/internal-utils/withoutPatching.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/plugins/createWithPatches.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/plugins/createWithPlaceholderBlock.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/plugins/createWithPortableTextBlockStyle.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/plugins/createWithPortableTextSelections.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/plugins/createWithSchemaTypes.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/plugins/createWithUtils.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/internal-utils/mark-state.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/plugins/slate-plugin.update-mark-state.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/internal-utils/portable-text-node.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/internal-utils/apply-operation-to-portable-text.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/plugins/slate-plugin.update-value.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/plugins/with-plugins.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/create-slate-editor.tsx","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/behaviors/behavior.core.annotations.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/internal-utils/is-hotkey.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/behaviors/behavior.core.block-objects.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/behaviors/behavior.core.decorators.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/behaviors/behavior.core.dnd.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/behaviors/behavior.core.insert-break.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/behaviors/behavior.core.lists.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/behaviors/behavior.core.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.annotation.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.decorator.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.delete.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.insert.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/internal-utils/key-is.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.keyboard.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.list-item.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.move.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.select.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.split.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.style.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/behaviors/behavior.types.event.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/behaviors/behavior.perform-event.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/priority/priority.sort.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/editor-snapshot.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/editor-machine.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/legacy-schema.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/editor-schema.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/mutation-machine.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/plugins/createWithEditableAPI.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/relay-machine.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/internal-utils/validateValue.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/sync-machine.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/create-editor.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/hooks/usePortableTextEditorSelection.tsx","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/relay-actor-context.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/route-events-to-changes.tsx","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/PortableTextEditor.tsx","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/components/render-span.tsx","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/components/render-leaf.tsx","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/components/render-text.tsx","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/plugins/createWithHotKeys.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/range-decorations-machine.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/Editable.tsx","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/internal-utils/use-constant.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/editor/editor-provider.tsx"],"sourcesContent":["import {useEffect} from 'react'\nimport {useEffectEvent} from 'use-effect-event'\nimport type {EditorEmittedEvent} from './editor/relay-machine'\nimport {useEditor} from './editor/use-editor'\n\n/**\n * @public\n * @deprecated\n * This component has been renamed. Use `EventListenerPlugin` instead.\n *\n * ```\n * import {EventListenerPlugin} from '@portabletext/editor/plugins'\n * ```\n */\nexport function EditorEventListener(props: {\n  on: (event: EditorEmittedEvent) => void\n}) {\n  const editor = useEditor()\n  const on = useEffectEvent(props.on)\n\n  useEffect(() => {\n    const subscription = editor.on('*', on)\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [editor])\n\n  return null\n}\n","export function getCompoundClientRect(nodes: Array<Node>): DOMRect {\n  if (nodes.length === 0) {\n    return new DOMRect(0, 0, 0, 0)\n  }\n\n  const elements = nodes.filter((node) => node instanceof Element)\n\n  const firstRect = elements.at(0)?.getBoundingClientRect()\n\n  if (!firstRect) {\n    return new DOMRect(0, 0, 0, 0)\n  }\n\n  let left = firstRect.left\n  let top = firstRect.top\n  let right = firstRect.right\n  let bottom = firstRect.bottom\n\n  for (let i = 1; i < elements.length; i++) {\n    const rect = elements[i].getBoundingClientRect()\n    left = Math.min(left, rect.left)\n    top = Math.min(top, rect.top)\n    right = Math.max(right, rect.right)\n    bottom = Math.max(bottom, rect.bottom)\n  }\n\n  return new DOMRect(left, top, right - left, bottom - top)\n}\n","import debug from 'debug'\n\nconst rootName = 'sanity-pte:'\n\nexport default debug(rootName)\nexport function debugWithName(name: string): debug.Debugger {\n  const namespace = `${rootName}${name}`\n  if (debug && debug.enabled(namespace)) {\n    return debug(namespace)\n  }\n  return debug(rootName)\n}\n","import type {EditorSnapshot} from '..'\nimport * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport type {EventPosition} from './event-position'\n\n/**\n * Given the current editor `snapshot` and an `eventSelection` representing\n * where the drag event origins from, this function calculates the selection\n * in the editor that should be dragged.\n */\nexport function getDragSelection({\n  eventSelection,\n  snapshot,\n}: {\n  eventSelection: EventPosition['selection']\n  snapshot: EditorSnapshot\n}) {\n  let dragSelection = eventSelection\n\n  const draggedInlineObject = selectors.getFocusInlineObject({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n\n  if (draggedInlineObject) {\n    return dragSelection\n  }\n\n  const draggingCollapsedSelection = selectors.isSelectionCollapsed({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n  const draggedTextBlock = selectors.getFocusTextBlock({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n  const draggedSpan = selectors.getFocusSpan({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n\n  if (draggingCollapsedSelection && draggedTextBlock && draggedSpan) {\n    // Looks like we are dragging an empty span\n    // Let's drag the entire block instead\n    dragSelection = {\n      anchor: utils.getBlockStartPoint({\n        context: snapshot.context,\n        block: draggedTextBlock,\n      }),\n      focus: utils.getBlockEndPoint({\n        context: snapshot.context,\n        block: draggedTextBlock,\n      }),\n    }\n  }\n\n  const selectedBlocks = selectors.getSelectedBlocks(snapshot)\n\n  if (\n    snapshot.context.selection &&\n    selectors.isSelectionExpanded(snapshot) &&\n    selectedBlocks.length > 1\n  ) {\n    const selectionStartBlock = selectors.getSelectionStartBlock(snapshot)\n    const selectionEndBlock = selectors.getSelectionEndBlock(snapshot)\n\n    if (!selectionStartBlock || !selectionEndBlock) {\n      return dragSelection\n    }\n\n    const selectionStartPoint = utils.getBlockStartPoint({\n      context: snapshot.context,\n      block: selectionStartBlock,\n    })\n    const selectionEndPoint = utils.getBlockEndPoint({\n      context: snapshot.context,\n      block: selectionEndBlock,\n    })\n\n    const eventSelectionInsideBlocks = selectors.isOverlappingSelection(\n      eventSelection,\n    )({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {anchor: selectionStartPoint, focus: selectionEndPoint},\n      },\n    })\n\n    if (eventSelectionInsideBlocks) {\n      dragSelection = {\n        anchor: selectionStartPoint,\n        focus: selectionEndPoint,\n      }\n    }\n  }\n\n  return dragSelection\n}\n","import type {\n  PathSegment,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {Element, Text, type Descendant, type Node} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\n\nexport const EMPTY_MARKDEFS: PortableTextObject[] = []\n\nexport const VOID_CHILD_KEY = 'void-child'\n\ntype Partial<T> = {\n  [P in keyof T]?: T[P]\n}\n\nfunction keepObjectEquality(\n  object: PortableTextBlock | PortableTextChild,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild>,\n) {\n  const value = keyMap[object._key]\n  if (value && isEqual(object, value)) {\n    return value\n  }\n  keyMap[object._key] = object\n  return object\n}\n\nexport function toSlateValue(\n  value: PortableTextBlock[] | undefined,\n  {schemaTypes}: {schemaTypes: EditorSchema},\n  keyMap: Record<string, any> = {},\n): Descendant[] {\n  if (value && Array.isArray(value)) {\n    return value.map((block) => {\n      const {_type, _key, ...rest} = block\n      const isPortableText = block && block._type === schemaTypes.block.name\n      if (isPortableText) {\n        const textBlock = block as PortableTextTextBlock\n        let hasInlines = false\n        const hasMissingStyle = typeof textBlock.style === 'undefined'\n        const hasMissingMarkDefs = typeof textBlock.markDefs === 'undefined'\n        const hasMissingChildren = typeof textBlock.children === 'undefined'\n\n        const children = (textBlock.children || []).map((child) => {\n          const {_type: cType, _key: cKey, ...cRest} = child\n          // Return 'slate' version of inline object where the actual\n          // value is stored in the `value` property.\n          // In slate, inline objects are represented as regular\n          // children with actual text node in order to be able to\n          // be selected the same way as the rest of the (text) content.\n          if (cType !== 'span') {\n            hasInlines = true\n            return keepObjectEquality(\n              {\n                _type: cType,\n                _key: cKey,\n                children: [\n                  {\n                    _key: VOID_CHILD_KEY,\n                    _type: 'span',\n                    text: '',\n                    marks: [],\n                  },\n                ],\n                value: cRest,\n                __inline: true,\n              },\n              keyMap,\n            )\n          }\n          // Original child object (span)\n          return child\n        })\n        // Return original block\n        if (\n          !hasMissingStyle &&\n          !hasMissingMarkDefs &&\n          !hasMissingChildren &&\n          !hasInlines &&\n          Element.isElement(block)\n        ) {\n          // Original object\n          return block\n        }\n        // TODO: remove this when we have a better way to handle missing style\n        if (hasMissingStyle) {\n          rest.style = schemaTypes.styles[0].name\n        }\n        return keepObjectEquality({_type, _key, ...rest, children}, keyMap)\n      }\n      return keepObjectEquality(\n        {\n          _type,\n          _key,\n          children: [\n            {\n              _key: VOID_CHILD_KEY,\n              _type: 'span',\n              text: '',\n              marks: [],\n            },\n          ],\n          value: rest,\n        },\n        keyMap,\n      )\n    }) as Descendant[]\n  }\n  return []\n}\n\nexport function fromSlateValue(\n  value: Descendant[],\n  textBlockType: string,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild> = {},\n): PortableTextBlock[] {\n  return value.map((block) => {\n    const {_key, _type} = block\n    if (!_key || !_type) {\n      throw new Error('Not a valid block')\n    }\n    if (\n      _type === textBlockType &&\n      'children' in block &&\n      Array.isArray(block.children) &&\n      _key\n    ) {\n      let hasInlines = false\n      const children = block.children.map((child) => {\n        const {_type: _cType} = child\n        if ('value' in child && _cType !== 'span') {\n          hasInlines = true\n          const {\n            value: v,\n            _key: k,\n            _type: t,\n            __inline: _i,\n            children: _c,\n            ...rest\n          } = child\n          return keepObjectEquality(\n            {...rest, ...v, _key: k as string, _type: t as string},\n            keyMap,\n          )\n        }\n        return child\n      })\n      if (!hasInlines) {\n        return block as PortableTextBlock // Original object\n      }\n      return keepObjectEquality(\n        {...block, children, _key, _type},\n        keyMap,\n      ) as PortableTextBlock\n    }\n    const blockValue = 'value' in block && block.value\n    return keepObjectEquality(\n      {_key, _type, ...(typeof blockValue === 'object' ? blockValue : {})},\n      keyMap,\n    ) as PortableTextBlock\n  })\n}\n\nexport function isEqualToEmptyEditor(\n  children: Descendant[] | PortableTextBlock[],\n  schemaTypes: EditorSchema,\n): boolean {\n  return (\n    children === undefined ||\n    (children && Array.isArray(children) && children.length === 0) ||\n    (children &&\n      Array.isArray(children) &&\n      children.length === 1 &&\n      Element.isElement(children[0]) &&\n      children[0]._type === schemaTypes.block.name &&\n      'style' in children[0] &&\n      children[0].style === schemaTypes.styles[0].name &&\n      !('listItem' in children[0]) &&\n      Array.isArray(children[0].children) &&\n      children[0].children.length === 1 &&\n      Text.isText(children[0].children[0]) &&\n      children[0].children[0]._type === 'span' &&\n      !children[0].children[0].marks?.join('') &&\n      children[0].children[0].text === '')\n  )\n}\n\nexport function findBlockAndIndexFromPath(\n  firstPathSegment: PathSegment,\n  children: (Node | Partial<Node>)[],\n): [Element | undefined, number | undefined] {\n  let blockIndex = -1\n  const isNumber = Number.isInteger(Number(firstPathSegment))\n  if (isNumber) {\n    blockIndex = Number(firstPathSegment)\n  } else if (children) {\n    blockIndex = children.findIndex(\n      (blk) =>\n        Element.isElement(blk) && isEqual({_key: blk._key}, firstPathSegment),\n    )\n  }\n  if (blockIndex > -1) {\n    return [children[blockIndex] as Element, blockIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function findChildAndIndexFromPath(\n  secondPathSegment: PathSegment,\n  block: Element,\n): [Element | Text | undefined, number] {\n  let childIndex = -1\n  const isNumber = Number.isInteger(Number(secondPathSegment))\n  if (isNumber) {\n    childIndex = Number(secondPathSegment)\n  } else {\n    childIndex = block.children.findIndex((child) =>\n      isEqual({_key: child._key}, secondPathSegment),\n    )\n  }\n  if (childIndex > -1) {\n    return [block.children[childIndex] as Element | Text, childIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function getValueOrInitialValue(\n  value: unknown,\n  initialValue: PortableTextBlock[],\n): PortableTextBlock[] | undefined {\n  if (value && Array.isArray(value) && value.length > 0) {\n    return value\n  }\n  return initialValue\n}\n","import type {PortableTextSpan} from '@sanity/types'\nimport {Editor, Element, Node, Range, type Path, type Point} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {EditorSelection, PortableTextSlateEditor} from '../types/editor'\nimport {fromSlateValue} from './values'\n\nexport function getAnchorBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  try {\n    return (\n      Editor.node(editor, editor.selection.anchor.path.slice(0, 1)) ?? [\n        undefined,\n        undefined,\n      ]\n    )\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getFocusBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  try {\n    return (\n      Editor.node(editor, editor.selection.focus.path.slice(0, 1)) ?? [\n        undefined,\n        undefined,\n      ]\n    )\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getFocusSpan({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: PortableTextSpan, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  try {\n    const [node, path] = Editor.node(editor, editor.selection.focus.path)\n\n    if (editor.isTextSpan(node)) {\n      return [node, path]\n    }\n  } catch {\n    return [undefined, undefined]\n  }\n\n  return [undefined, undefined]\n}\n\nexport function getSelectedSpans({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): Array<[node: PortableTextSpan, path: Path]> {\n  if (!editor.selection) {\n    return []\n  }\n\n  try {\n    return Array.from(\n      Editor.nodes(editor, {\n        at: editor.selection,\n        match: (node) => editor.isTextSpan(node),\n      }),\n    )\n  } catch {\n    return []\n  }\n}\n\nexport function getSelectionStartBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  const selectionStartPoint = Range.start(editor.selection)\n\n  return getPointBlock({editor, point: selectionStartPoint})\n}\n\nexport function getSelectionEndBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  const selectionEndPoint = Range.end(editor.selection)\n\n  return getPointBlock({editor, point: selectionEndPoint})\n}\n\nexport function getPointBlock({\n  editor,\n  point,\n}: {\n  editor: PortableTextSlateEditor\n  point: Point\n}): [node: Node, path: Path] | [undefined, undefined] {\n  try {\n    const [block] = Editor.node(editor, point.path.slice(0, 1)) ?? [\n      undefined,\n      undefined,\n    ]\n    return block ? [block, point.path.slice(0, 1)] : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getFocusChild({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  const [focusBlock, focusBlockPath] = getFocusBlock({editor})\n  const childIndex = editor.selection?.focus.path.at(1)\n\n  if (!focusBlock || !focusBlockPath || childIndex === undefined) {\n    return [undefined, undefined]\n  }\n\n  try {\n    const focusChild = Node.child(focusBlock, childIndex)\n\n    return focusChild\n      ? [focusChild, [...focusBlockPath, childIndex]]\n      : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nfunction getPointChild({\n  editor,\n  point,\n}: {\n  editor: PortableTextSlateEditor\n  point: Point\n}): [node: Node, path: Path] | [undefined, undefined] {\n  const [block, blockPath] = getPointBlock({editor, point})\n  const childIndex = point.path.at(1)\n\n  if (!block || !blockPath || childIndex === undefined) {\n    return [undefined, undefined]\n  }\n\n  try {\n    const pointChild = Node.child(block, childIndex)\n\n    return pointChild\n      ? [pointChild, [...blockPath, childIndex]]\n      : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getFirstBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (editor.children.length === 0) {\n    return [undefined, undefined]\n  }\n\n  const firstPoint = Editor.start(editor, [])\n  const firstBlockPath = firstPoint.path.at(0)\n\n  try {\n    return firstBlockPath !== undefined\n      ? (Editor.node(editor, [firstBlockPath]) ?? [undefined, undefined])\n      : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getLastBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (editor.children.length === 0) {\n    return [undefined, undefined]\n  }\n\n  const lastPoint = Editor.end(editor, [])\n  const lastBlockPath = lastPoint.path.at(0)\n\n  try {\n    return lastBlockPath !== undefined\n      ? (Editor.node(editor, [lastBlockPath]) ?? [undefined, undefined])\n      : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getNodeBlock({\n  editor,\n  schema,\n  node,\n}: {\n  editor: PortableTextSlateEditor\n  schema: EditorSchema\n  node: Node\n}) {\n  if (Editor.isEditor(node)) {\n    return undefined\n  }\n\n  if (isBlockElement({editor, schema}, node)) {\n    return elementToBlock({schema, element: node})\n  }\n\n  const parent = Array.from(\n    Editor.nodes(editor, {\n      mode: 'highest',\n      at: [],\n      match: (n) =>\n        isBlockElement({editor, schema}, n) &&\n        n.children.some((child) => child._key === node._key),\n    }),\n  )\n    .at(0)\n    ?.at(0)\n\n  return Element.isElement(parent)\n    ? elementToBlock({\n        schema,\n        element: parent,\n      })\n    : undefined\n}\n\nfunction elementToBlock({\n  schema,\n  element,\n}: {\n  schema: EditorSchema\n  element: Element\n}) {\n  return fromSlateValue([element], schema.block.name)?.at(0)\n}\n\nfunction isBlockElement(\n  {editor, schema}: {editor: PortableTextSlateEditor; schema: EditorSchema},\n  node: Node,\n): node is Element {\n  return (\n    Element.isElement(node) &&\n    !editor.isInline(node) &&\n    (schema.block.name === node._type ||\n      schema.blockObjects.some(\n        (blockObject) => blockObject.name === node._type,\n      ))\n  )\n}\n\nexport function isListItemActive({\n  editor,\n  listItem,\n}: {\n  editor: Editor\n  listItem: string\n}): boolean {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedBlocks = [\n    ...Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    }),\n  ]\n\n  if (selectedBlocks.length > 0) {\n    return selectedBlocks.every(\n      ([node]) => editor.isListBlock(node) && node.listItem === listItem,\n    )\n  }\n\n  return false\n}\n\nexport function isStyleActive({\n  editor,\n  style,\n}: {\n  editor: Editor\n  style: string\n}): boolean {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedBlocks = [\n    ...Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    }),\n  ]\n\n  if (selectedBlocks.length > 0) {\n    return selectedBlocks.every(([node]) => node.style === style)\n  }\n\n  return false\n}\n\nexport function slateRangeToSelection({\n  schema,\n  editor,\n  range,\n}: {\n  schema: EditorSchema\n  editor: PortableTextSlateEditor\n  range: Range\n}): EditorSelection {\n  const [anchorBlock] = getPointBlock({\n    editor,\n    point: range.anchor,\n  })\n  const [focusBlock] = getPointBlock({\n    editor,\n    point: range.focus,\n  })\n\n  if (!anchorBlock || !focusBlock) {\n    return null\n  }\n\n  const [anchorChild] =\n    anchorBlock._type === schema.block.name\n      ? getPointChild({\n          editor,\n          point: range.anchor,\n        })\n      : [undefined, undefined]\n  const [focusChild] =\n    focusBlock._type === schema.block.name\n      ? getPointChild({\n          editor,\n          point: range.focus,\n        })\n      : [undefined, undefined]\n\n  const selection: EditorSelection = {\n    anchor: {\n      path: [{_key: anchorBlock._key}],\n      offset: range.anchor.offset,\n    },\n    focus: {\n      path: [{_key: focusBlock._key}],\n      offset: range.focus.offset,\n    },\n    backward: Range.isBackward(range),\n  }\n\n  if (anchorChild) {\n    selection.anchor.path.push('children')\n    selection.anchor.path.push({_key: anchorChild._key})\n  }\n\n  if (focusChild) {\n    selection.focus.path.push('children')\n    selection.focus.path.push({_key: focusChild._key})\n  }\n\n  return selection\n}\n","import {Editor, type BaseRange, type Node} from 'slate'\nimport {DOMEditor, isDOMNode} from 'slate-dom'\nimport type {EditorSchema, EditorSelection} from '..'\nimport type {EditorActor} from '../editor/editor-machine'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport * as utils from '../utils'\nimport {\n  getFirstBlock,\n  getLastBlock,\n  getNodeBlock,\n  slateRangeToSelection,\n} from './slate-utils'\n\nexport type EventPosition = {\n  block: 'start' | 'end'\n  /**\n   * Did the event origin from the editor DOM node itself or from a child node?\n   */\n  isEditor: boolean\n  selection: NonNullable<EditorSelection>\n}\nexport type EventPositionBlock = EventPosition['block']\n\nexport function getEventPosition({\n  editorActor,\n  slateEditor,\n  event,\n}: {\n  editorActor: EditorActor\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}): EventPosition | undefined {\n  if (editorActor.getSnapshot().matches({setup: 'setting up'})) {\n    return undefined\n  }\n\n  const node = getEventNode({slateEditor, event})\n\n  if (!node) {\n    return undefined\n  }\n\n  const block = getNodeBlock({\n    editor: slateEditor,\n    schema: editorActor.getSnapshot().context.schema,\n    node,\n  })\n\n  const positionBlock = getEventPositionBlock({node, slateEditor, event})\n  const selection = getEventSelection({\n    schema: editorActor.getSnapshot().context.schema,\n    slateEditor,\n    event,\n  })\n\n  if (block && positionBlock && !selection && !Editor.isEditor(node)) {\n    return {\n      block: positionBlock,\n      isEditor: false,\n      selection: {\n        anchor: utils.getBlockStartPoint({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: block,\n            path: [{_key: block._key}],\n          },\n        }),\n        focus: utils.getBlockEndPoint({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: block,\n            path: [{_key: block._key}],\n          },\n        }),\n      },\n    }\n  }\n\n  if (!positionBlock || !selection) {\n    return undefined\n  }\n\n  const focusBlockPath = selection.focus.path.at(0)\n  const focusBlockKey = utils.isKeyedSegment(focusBlockPath)\n    ? focusBlockPath._key\n    : undefined\n\n  if (!focusBlockKey) {\n    return undefined\n  }\n\n  if (\n    utils.isSelectionCollapsed(selection) &&\n    block &&\n    focusBlockKey !== block._key\n  ) {\n    return {\n      block: positionBlock,\n      isEditor: false,\n      selection: {\n        anchor: utils.getBlockStartPoint({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: block,\n            path: [{_key: block._key}],\n          },\n        }),\n        focus: utils.getBlockEndPoint({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: block,\n            path: [{_key: block._key}],\n          },\n        }),\n      },\n    }\n  }\n\n  return {\n    block: positionBlock,\n    isEditor: Editor.isEditor(node),\n    selection,\n  }\n}\n\nexport function getEventNode({\n  slateEditor,\n  event,\n}: {\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}) {\n  if (!DOMEditor.hasTarget(slateEditor, event.target)) {\n    return undefined\n  }\n\n  const node = DOMEditor.toSlateNode(slateEditor, event.target)\n\n  return node\n}\n\nfunction getEventPositionBlock({\n  node,\n  slateEditor,\n  event,\n}: {\n  node: Node\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}): EventPositionBlock | undefined {\n  const [firstBlock] = getFirstBlock({editor: slateEditor})\n\n  if (!firstBlock) {\n    return undefined\n  }\n\n  const firstBlockElement = DOMEditor.toDOMNode(slateEditor, firstBlock)\n  const firstBlockRect = firstBlockElement.getBoundingClientRect()\n\n  if (event.pageY < firstBlockRect.top) {\n    return 'start'\n  }\n\n  const [lastBlock] = getLastBlock({editor: slateEditor})\n\n  if (!lastBlock) {\n    return undefined\n  }\n\n  const lastBlockElement = DOMEditor.toDOMNode(slateEditor, lastBlock)\n  const lastBlockRef = lastBlockElement.getBoundingClientRect()\n\n  if (event.pageY > lastBlockRef.bottom) {\n    return 'end'\n  }\n\n  const element = DOMEditor.toDOMNode(slateEditor, node)\n  const elementRect = element.getBoundingClientRect()\n  const top = elementRect.top\n  const height = elementRect.height\n  const location = Math.abs(top - event.pageY)\n\n  return location < height / 2 ? 'start' : 'end'\n}\n\nexport function getEventSelection({\n  schema,\n  slateEditor,\n  event,\n}: {\n  schema: EditorSchema\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}): EditorSelection {\n  const range = getSlateRangeFromEvent(slateEditor, event)\n\n  const selection = range\n    ? slateRangeToSelection({\n        schema,\n        editor: slateEditor,\n        range,\n      })\n    : null\n\n  return selection\n}\n\nfunction getSlateRangeFromEvent(\n  editor: PortableTextSlateEditor,\n  event: DragEvent | MouseEvent,\n) {\n  if (!event.target) {\n    return undefined\n  }\n\n  if (!isDOMNode(event.target)) {\n    return undefined\n  }\n\n  const window = DOMEditor.getWindow(editor)\n\n  let domRange: Range | undefined\n\n  if (window.document.caretPositionFromPoint !== undefined) {\n    const position = window.document.caretPositionFromPoint(\n      event.clientX,\n      event.clientY,\n    )\n\n    if (position) {\n      try {\n        domRange = window.document.createRange()\n        domRange.setStart(position.offsetNode, position.offset)\n        domRange.setEnd(position.offsetNode, position.offset)\n      } catch {}\n    }\n  } else if (window.document.caretRangeFromPoint !== undefined) {\n    // Use WebKit-proprietary fallback method\n    domRange =\n      window.document.caretRangeFromPoint(event.clientX, event.clientY) ??\n      undefined\n  } else {\n    console.warn(\n      'Neither caretPositionFromPoint nor caretRangeFromPoint is supported',\n    )\n    return undefined\n  }\n\n  if (!domRange) {\n    return undefined\n  }\n\n  let range: BaseRange | undefined\n\n  try {\n    range = DOMEditor.toSlateRange(editor, domRange, {\n      exactMatch: false,\n      // It can still throw even with this option set to true\n      suppressThrow: false,\n    })\n  } catch {}\n\n  return range\n}\n","import {isKeySegment, type Path} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {Editor, Element, type Descendant, type Path as SlatePath} from 'slate'\n\nexport function toSlatePath(path: Path, editor: Editor): SlatePath {\n  if (!editor) {\n    return []\n  }\n  const [block, blockPath] = Array.from(\n    Editor.nodes(editor, {\n      at: [],\n      match: (n) =>\n        isKeySegment(path[0]) && (n as Descendant)._key === path[0]._key,\n    }),\n  )[0] || [undefined, undefined]\n\n  if (!block || !Element.isElement(block)) {\n    return []\n  }\n\n  if (editor.isVoid(block)) {\n    return [blockPath[0], 0]\n  }\n\n  const childPath = [path[2]]\n  const childIndex = block.children.findIndex((child) =>\n    isEqual([{_key: child._key}], childPath),\n  )\n\n  if (childIndex >= 0 && block.children[childIndex]) {\n    const child = block.children[childIndex]\n    if (Element.isElement(child) && editor.isVoid(child)) {\n      return blockPath.concat(childIndex).concat(0)\n    }\n    return blockPath.concat(childIndex)\n  }\n\n  return [blockPath[0], 0]\n}\n","import {Point, type Editor, type Operation, type Range} from 'slate'\nimport type {EditorSelection} from '../types/editor'\nimport {toSlatePath} from './paths'\n\nexport interface ObjectWithKeyAndType {\n  _key: string\n  _type: string\n  children?: ObjectWithKeyAndType[]\n}\n\nexport function toSlateRange(\n  selection: EditorSelection,\n  editor: Editor,\n): Range | null {\n  if (!selection || !editor) {\n    return null\n  }\n  const anchor = {\n    path: toSlatePath(selection.anchor.path, editor),\n    offset: selection.anchor.offset,\n  }\n  const focus = {\n    path: toSlatePath(selection.focus.path, editor),\n    offset: selection.focus.offset,\n  }\n  if (focus.path.length === 0 || anchor.path.length === 0) {\n    return null\n  }\n  const range = anchor && focus ? {anchor, focus} : null\n  return range\n}\n\nexport function moveRangeByOperation(\n  range: Range,\n  operation: Operation,\n): Range | null {\n  const anchor = Point.transform(range.anchor, operation)\n  const focus = Point.transform(range.focus, operation)\n\n  if (anchor === null || focus === null) {\n    return null\n  }\n\n  if (Point.equals(anchor, range.anchor) && Point.equals(focus, range.focus)) {\n    return range\n  }\n\n  return {anchor, focus}\n}\n","import type {Path, PortableTextBlock} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport type {EditorSelection, EditorSelectionPoint} from '../types/editor'\n\nexport function normalizePoint(\n  point: EditorSelectionPoint,\n  value: PortableTextBlock[],\n): EditorSelectionPoint | null {\n  if (!point || !value) {\n    return null\n  }\n  const newPath: Path = []\n  let newOffset: number = point.offset || 0\n  const blockKey =\n    typeof point.path[0] === 'object' &&\n    '_key' in point.path[0] &&\n    point.path[0]._key\n  const childKey =\n    typeof point.path[2] === 'object' &&\n    '_key' in point.path[2] &&\n    point.path[2]._key\n  const block: PortableTextBlock | undefined = value.find(\n    (blk) => blk._key === blockKey,\n  )\n  if (block) {\n    newPath.push({_key: block._key})\n  } else {\n    return null\n  }\n  if (block && point.path[1] === 'children') {\n    if (\n      !block.children ||\n      (Array.isArray(block.children) && block.children.length === 0)\n    ) {\n      return null\n    }\n    const child =\n      Array.isArray(block.children) &&\n      block.children.find((cld) => cld._key === childKey)\n    if (child) {\n      newPath.push('children')\n      newPath.push({_key: child._key})\n      newOffset =\n        child.text && child.text.length >= point.offset\n          ? point.offset\n          : (child.text && child.text.length) || 0\n    } else {\n      return null\n    }\n  }\n  return {path: newPath, offset: newOffset}\n}\n\nexport function normalizeSelection(\n  selection: EditorSelection,\n  value: PortableTextBlock[] | undefined,\n): EditorSelection | null {\n  if (!selection || !value || value.length === 0) {\n    return null\n  }\n  let newAnchor: EditorSelectionPoint | null = null\n  let newFocus: EditorSelectionPoint | null = null\n  const {anchor, focus} = selection\n  if (\n    anchor &&\n    value.find((blk) => isEqual({_key: blk._key}, anchor.path[0]))\n  ) {\n    newAnchor = normalizePoint(anchor, value)\n  }\n  if (focus && value.find((blk) => isEqual({_key: blk._key}, focus.path[0]))) {\n    newFocus = normalizePoint(focus, value)\n  }\n  if (newAnchor && newFocus) {\n    return {anchor: newAnchor, focus: newFocus, backward: selection.backward}\n  }\n  return null\n}\n","import {Editor} from 'slate'\nimport {DOMEditor} from 'slate-dom'\nimport type {EditorSnapshot} from '..'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {toSlateRange} from './ranges'\n\nexport type SelectionDomNodes = {\n  blockNodes: Array<Node>\n  childNodes: Array<Node>\n}\n\nexport function getSelectionDomNodes({\n  slateEditor,\n  snapshot,\n}: {\n  slateEditor: PortableTextSlateEditor\n  snapshot: EditorSnapshot\n}): SelectionDomNodes {\n  if (!snapshot.context.selection) {\n    return {\n      blockNodes: [],\n      childNodes: [],\n    }\n  }\n\n  const range = toSlateRange(snapshot.context.selection, slateEditor)\n\n  if (!range) {\n    return {\n      blockNodes: [],\n      childNodes: [],\n    }\n  }\n\n  const blockEntries = Array.from(\n    Editor.nodes(slateEditor, {\n      at: range,\n      mode: 'highest',\n      match: (n) => !Editor.isEditor(n),\n    }),\n  )\n\n  const childEntries = Array.from(\n    Editor.nodes(slateEditor, {\n      at: range,\n      mode: 'lowest',\n      match: (n) =>\n        (!Editor.isEditor(n) && slateEditor.isTextSpan(n)) ||\n        !slateEditor.isBlock(n),\n    }),\n  )\n\n  return {\n    blockNodes: blockEntries.map(([blockNode]) =>\n      DOMEditor.toDOMNode(slateEditor, blockNode),\n    ),\n    childNodes: childEntries.map(([childNode]) =>\n      DOMEditor.toDOMNode(slateEditor, childNode),\n    ),\n  }\n}\n","import type {Editor, Range} from 'slate'\nimport type {EditorSelection} from '..'\n\n// Is the editor currently receiving remote changes that are being applied to the content?\nexport const IS_PROCESSING_REMOTE_CHANGES: WeakMap<Editor, boolean> =\n  new WeakMap()\n\nexport const KEY_TO_SLATE_ELEMENT: WeakMap<Editor, any | undefined> =\n  new WeakMap()\nexport const KEY_TO_VALUE_ELEMENT: WeakMap<Editor, any | undefined> =\n  new WeakMap()\n\n// Keep object relation to slate range in the portable-text-range\nexport const SLATE_TO_PORTABLE_TEXT_RANGE = new WeakMap<\n  Range,\n  EditorSelection\n>()\n","import {createContext} from 'react'\nimport type {EditorActor} from './editor-machine'\n\nexport const EditorActorContext = createContext<EditorActor>({} as EditorActor)\n","export function DropIndicator() {\n  return (\n    <div\n      contentEditable={false}\n      className=\"pt-drop-indicator\"\n      style={{\n        position: 'absolute',\n        width: '100%',\n        height: 1,\n        borderBottom: '1px solid currentColor',\n        zIndex: 5,\n      }}\n    >\n      <span />\n    </div>\n  )\n}\n","import type {PortableTextChild, PortableTextObject} from '@sanity/types'\n\nexport function RenderDefaultBlockObject(props: {\n  blockObject: PortableTextObject\n}) {\n  return (\n    <div style={{userSelect: 'none'}}>\n      [{props.blockObject._type}: {props.blockObject._key}]\n    </div>\n  )\n}\n\nexport function RenderDefaultInlineObject(props: {\n  inlineObject: PortableTextObject | PortableTextChild\n}) {\n  return (\n    <span style={{userSelect: 'none'}}>\n      [{props.inlineObject._type}: {props.inlineObject._key}]\n    </span>\n  )\n}\n","import getRandomValues from 'get-random-values-esm'\n\n/**\n * @public\n */\nexport const defaultKeyGenerator = (): string => randomKey(12)\n\nconst getByteHexTable = (() => {\n  let table: any[]\n  return () => {\n    if (table) {\n      return table\n    }\n\n    table = []\n    for (let i = 0; i < 256; ++i) {\n      table[i] = (i + 0x100).toString(16).slice(1)\n    }\n    return table\n  }\n})()\n\n// WHATWG crypto RNG - https://w3c.github.io/webcrypto/Overview.html\nfunction whatwgRNG(length = 16) {\n  const rnds8 = new Uint8Array(length)\n  getRandomValues(rnds8)\n  return rnds8\n}\n\nfunction randomKey(length?: number): string {\n  const table = getByteHexTable()\n  return whatwgRNG(length)\n    .reduce((str, n) => str + table[n], '')\n    .slice(0, length)\n}\n","import {defaultKeyGenerator} from '../editor/key-generator'\n\nexport type EditorPriority = {\n  id: string\n  name?: string\n  reference?: {\n    priority: EditorPriority\n    importance: 'higher' | 'lower'\n  }\n}\n\nexport function createEditorPriority(config?: {\n  name?: string\n  reference?: {\n    priority: EditorPriority\n    importance: 'higher' | 'lower'\n  }\n}): EditorPriority {\n  return {\n    id: defaultKeyGenerator(),\n    name: config?.name,\n    reference: config?.reference,\n  }\n}\n","import {createEditorPriority} from './priority.types'\n\nexport const corePriority = createEditorPriority({name: 'core'})\n","import type {EventPositionBlock} from '../internal-utils/event-position'\nimport {corePriority} from '../priority/priority.core'\nimport {createEditorPriority} from '../priority/priority.types'\nimport * as selectors from '../selectors'\nimport {forward} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport function createCoreBlockElementBehaviorsConfig({\n  key,\n  onSetDragPositionBlock,\n}: {\n  key: string\n  onSetDragPositionBlock: (\n    eventPositionBlock: EventPositionBlock | undefined,\n  ) => void\n}) {\n  return [\n    {\n      behavior: defineBehavior({\n        on: 'drag.dragover',\n        guard: ({snapshot, event}) => {\n          const dropFocusBlock = selectors.getFocusBlock({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: event.position.selection,\n            },\n          })\n\n          if (!dropFocusBlock || dropFocusBlock.node._key !== key) {\n            return false\n          }\n\n          const dragOrigin = snapshot.beta.internalDrag?.origin\n\n          if (!dragOrigin) {\n            return false\n          }\n\n          const draggedBlocks = selectors.getSelectedBlocks({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragOrigin.selection,\n            },\n          })\n\n          if (\n            draggedBlocks.some((draggedBlock) => draggedBlock.node._key === key)\n          ) {\n            return false\n          }\n\n          const draggingEntireBlocks = selectors.isSelectingEntireBlocks({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragOrigin.selection,\n            },\n          })\n\n          return draggingEntireBlocks\n        },\n        actions: [\n          ({event}) => [\n            {\n              type: 'effect',\n              effect: () => {\n                onSetDragPositionBlock(event.position.block)\n              },\n            },\n          ],\n        ],\n      }),\n      priority: createEditorPriority({\n        reference: {\n          priority: corePriority,\n          importance: 'lower',\n        },\n      }),\n    },\n    {\n      behavior: defineBehavior({\n        on: 'drag.*',\n        guard: ({event}) => {\n          return event.type !== 'drag.dragover'\n        },\n        actions: [\n          ({event}) => [\n            {\n              type: 'effect',\n              effect: () => {\n                onSetDragPositionBlock(undefined)\n              },\n            },\n            forward(event),\n          ],\n        ],\n      }),\n      priority: createEditorPriority({\n        reference: {\n          priority: corePriority,\n          importance: 'lower',\n        },\n      }),\n    },\n  ]\n}\n","import {useContext, useEffect} from 'react'\nimport {createCoreBlockElementBehaviorsConfig} from '../../behaviors/behavior.core.block-element'\nimport type {EventPositionBlock} from '../../internal-utils/event-position'\nimport {EditorActorContext} from '../editor-actor-context'\n\nexport function useCoreBlockElementBehaviors({\n  key,\n  onSetDragPositionBlock,\n}: {\n  key: string\n  onSetDragPositionBlock: (\n    eventPositionBlock: EventPositionBlock | undefined,\n  ) => void\n}) {\n  const editorActor = useContext(EditorActorContext)\n\n  useEffect(() => {\n    const behaviorConfigs = createCoreBlockElementBehaviorsConfig({\n      key,\n      onSetDragPositionBlock,\n    })\n\n    for (const behaviorConfig of behaviorConfigs) {\n      editorActor.send({\n        type: 'add behavior',\n        behaviorConfig,\n      })\n    }\n\n    return () => {\n      for (const behaviorConfig of behaviorConfigs) {\n        editorActor.send({\n          type: 'remove behavior',\n          behaviorConfig,\n        })\n      }\n    }\n  }, [editorActor, key, onSetDragPositionBlock])\n}\n","import type {PortableTextObject} from '@sanity/types'\nimport {useSelector} from '@xstate/react'\nimport {useContext, useRef, useState, type ReactElement} from 'react'\nimport {Range, type Element as SlateElement} from 'slate'\nimport {useSelected, useSlateStatic, type RenderElementProps} from 'slate-react'\nimport type {EventPositionBlock} from '../../internal-utils/event-position'\nimport type {RenderBlockFunction} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\nimport {DropIndicator} from './drop-indicator'\nimport {RenderDefaultBlockObject} from './render-default-object'\nimport {useCoreBlockElementBehaviors} from './use-core-block-element-behaviors'\n\nexport function RenderBlockObject(props: {\n  attributes: RenderElementProps['attributes']\n  blockObject: PortableTextObject\n  children: ReactElement\n  element: SlateElement\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n}) {\n  const [dragPositionBlock, setDragPositionBlock] =\n    useState<EventPositionBlock>()\n  const blockObjectRef = useRef<HTMLDivElement>(null)\n\n  const slateEditor = useSlateStatic()\n  const selected = useSelected()\n\n  const editorActor = useContext(EditorActorContext)\n\n  useCoreBlockElementBehaviors({\n    key: props.element._key,\n    onSetDragPositionBlock: setDragPositionBlock,\n  })\n\n  const legacySchemaType = useSelector(editorActor, (s) =>\n    s.context\n      .getLegacySchema()\n      .blockObjects.find(\n        (blockObject) => blockObject.name === props.element._type,\n      ),\n  )\n\n  if (!legacySchemaType) {\n    console.error(\n      `Block object type ${props.element._type} not found in Schema`,\n    )\n  }\n\n  const focused =\n    selected &&\n    slateEditor.selection !== null &&\n    Range.isCollapsed(slateEditor.selection)\n\n  return (\n    <div\n      {...props.attributes}\n      className=\"pt-block pt-object-block\"\n      data-block-key={props.element._key}\n      data-block-name={props.element._type}\n      data-block-type=\"object\"\n    >\n      {dragPositionBlock === 'start' ? <DropIndicator /> : null}\n      {props.children}\n      <div\n        ref={blockObjectRef}\n        contentEditable={false}\n        draggable={!props.readOnly}\n      >\n        {props.renderBlock && legacySchemaType ? (\n          props.renderBlock({\n            children: (\n              <RenderDefaultBlockObject blockObject={props.blockObject} />\n            ),\n            editorElementRef: blockObjectRef,\n            focused,\n            path: [{_key: props.element._key}],\n            schemaType: legacySchemaType,\n            selected,\n            type: legacySchemaType,\n            value: props.blockObject,\n          })\n        ) : (\n          <RenderDefaultBlockObject blockObject={props.blockObject} />\n        )}\n      </div>\n      {dragPositionBlock === 'end' ? <DropIndicator /> : null}\n    </div>\n  )\n}\n","import type {PortableTextObject} from '@sanity/types'\nimport {useSelector} from '@xstate/react'\nimport {useContext, useRef, type ReactElement} from 'react'\nimport {Range, type Element as SlateElement} from 'slate'\nimport {DOMEditor} from 'slate-dom'\nimport {useSelected, useSlateStatic, type RenderElementProps} from 'slate-react'\nimport {getPointBlock} from '../../internal-utils/slate-utils'\nimport type {RenderChildFunction} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\nimport {RenderDefaultInlineObject} from './render-default-object'\n\nexport function RenderInlineObject(props: {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement\n  element: SlateElement\n  inlineObject: PortableTextObject\n  readOnly: boolean\n  renderChild?: RenderChildFunction\n}) {\n  const inlineObjectRef = useRef<HTMLElement>(null)\n\n  const slateEditor = useSlateStatic()\n  const selected = useSelected()\n\n  const editorActor = useContext(EditorActorContext)\n  const legacySchemaType = useSelector(editorActor, (s) =>\n    s.context\n      .getLegacySchema()\n      .inlineObjects.find(\n        (inlineObject) => inlineObject.name === props.element._type,\n      ),\n  )\n\n  if (!legacySchemaType) {\n    console.error(\n      `Inline object type ${props.element._type} not found in Schema`,\n    )\n  }\n\n  const focused =\n    selected &&\n    slateEditor.selection !== null &&\n    Range.isCollapsed(slateEditor.selection)\n  const path = DOMEditor.findPath(slateEditor, props.element)\n  const [block] = getPointBlock({\n    editor: slateEditor,\n    point: {\n      path,\n      offset: 0,\n    },\n  })\n\n  if (!block) {\n    console.error(\n      `Unable to find parent block of inline object ${props.element._key}`,\n    )\n  }\n\n  return (\n    <span\n      {...props.attributes}\n      draggable={!props.readOnly}\n      className=\"pt-inline-object\"\n      data-child-key={props.inlineObject._key}\n      data-child-name={props.inlineObject._type}\n      data-child-type=\"object\"\n    >\n      {props.children}\n      <span ref={inlineObjectRef} style={{display: 'inline-block'}}>\n        {props.renderChild && block && legacySchemaType ? (\n          props.renderChild({\n            annotations: [],\n            children: (\n              <RenderDefaultInlineObject inlineObject={props.inlineObject} />\n            ),\n            editorElementRef: inlineObjectRef,\n            selected,\n            focused,\n            path: [{_key: block._key}, 'children', {_key: props.element._key}],\n            schemaType: legacySchemaType,\n            value: props.inlineObject,\n            type: legacySchemaType,\n          })\n        ) : (\n          <RenderDefaultInlineObject inlineObject={props.inlineObject} />\n        )}\n      </span>\n    </span>\n  )\n}\n","import type {PortableTextTextBlock} from '@sanity/types'\nimport {useSelector} from '@xstate/react'\nimport {useContext, useRef, useState, type ReactElement} from 'react'\nimport {Range, type Element as SlateElement} from 'slate'\nimport {useSelected, useSlateStatic, type RenderElementProps} from 'slate-react'\nimport type {EventPositionBlock} from '../../internal-utils/event-position'\nimport type {\n  RenderBlockFunction,\n  RenderListItemFunction,\n  RenderStyleFunction,\n} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\nimport {DropIndicator} from './drop-indicator'\nimport {useCoreBlockElementBehaviors} from './use-core-block-element-behaviors'\n\nexport function RenderTextBlock(props: {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement\n  element: SlateElement\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n  renderListItem?: RenderListItemFunction\n  renderStyle?: RenderStyleFunction\n  spellCheck?: boolean\n  textBlock: PortableTextTextBlock\n}) {\n  const [dragPositionBlock, setDragPositionBlock] =\n    useState<EventPositionBlock>()\n  const blockRef = useRef<HTMLDivElement>(null)\n\n  const slateEditor = useSlateStatic()\n  const selected = useSelected()\n\n  const editorActor = useContext(EditorActorContext)\n\n  useCoreBlockElementBehaviors({\n    key: props.element._key,\n    onSetDragPositionBlock: setDragPositionBlock,\n  })\n\n  const legacySchema = useSelector(editorActor, (s) =>\n    s.context.getLegacySchema(),\n  )\n\n  const focused =\n    selected &&\n    slateEditor.selection !== null &&\n    Range.isCollapsed(slateEditor.selection)\n\n  let children = props.children\n\n  const legacyBlockSchemaType = legacySchema.block\n\n  if (props.renderStyle && props.textBlock.style) {\n    const legacyStyleSchemaType =\n      props.textBlock.style !== undefined\n        ? legacySchema.styles.find(\n            (style) => style.value === props.textBlock.style,\n          )\n        : undefined\n\n    if (legacyStyleSchemaType) {\n      children = props.renderStyle({\n        block: props.textBlock,\n        children,\n        editorElementRef: blockRef,\n        focused,\n        path: [{_key: props.textBlock._key}],\n        schemaType: legacyStyleSchemaType,\n        selected,\n        value: props.textBlock.style,\n      })\n    } else {\n      console.error(\n        `Unable to find Schema type for text block style ${props.textBlock.style}`,\n      )\n    }\n  }\n\n  if (props.renderListItem && props.textBlock.listItem) {\n    const legacyListItemSchemaType = legacySchema.lists.find(\n      (list) => list.value === props.textBlock.listItem,\n    )\n\n    if (legacyListItemSchemaType) {\n      children = props.renderListItem({\n        block: props.textBlock,\n        children,\n        editorElementRef: blockRef,\n        focused,\n        level: props.textBlock.level ?? 1,\n        path: [{_key: props.textBlock._key}],\n        selected,\n        value: props.textBlock.listItem,\n        schemaType: legacyListItemSchemaType,\n      })\n    } else {\n      console.error(\n        `Unable to find Schema type for text block list item ${props.textBlock.listItem}`,\n      )\n    }\n  }\n\n  return (\n    <div\n      {...props.attributes}\n      className={[\n        'pt-block',\n        'pt-text-block',\n        ...(props.textBlock.style\n          ? [`pt-text-block-style-${props.textBlock.style}`]\n          : []),\n        ...(props.textBlock.listItem\n          ? [\n              'pt-list-item',\n              `pt-list-item-${props.textBlock.listItem}`,\n              `pt-list-item-level-${props.textBlock.level ?? 1}`,\n            ]\n          : []),\n      ].join(' ')}\n      spellCheck={props.spellCheck}\n      data-block-key={props.textBlock._key}\n      data-block-name={props.textBlock._type}\n      data-block-type=\"text\"\n      {...(props.textBlock.listItem !== undefined\n        ? {\n            'data-list-item': props.textBlock.listItem,\n          }\n        : {})}\n      {...(props.textBlock.level !== undefined\n        ? {\n            'data-level': props.textBlock.level,\n          }\n        : {})}\n      {...(props.textBlock.style !== undefined\n        ? {\n            'data-style': props.textBlock.style,\n          }\n        : {})}\n    >\n      {dragPositionBlock === 'start' ? <DropIndicator /> : null}\n      <div ref={blockRef}>\n        {props.renderBlock\n          ? props.renderBlock({\n              children,\n              editorElementRef: blockRef,\n              focused,\n              level: props.textBlock.level,\n              listItem: props.textBlock.listItem,\n              path: [{_key: props.textBlock._key}],\n              selected,\n              schemaType: legacyBlockSchemaType,\n              style: props.textBlock.style,\n              type: legacyBlockSchemaType,\n              value: props.textBlock,\n            })\n          : props.children}\n      </div>\n      {dragPositionBlock === 'end' ? <DropIndicator /> : null}\n    </div>\n  )\n}\n","import {useSelector} from '@xstate/react'\nimport {useContext, type ReactElement} from 'react'\nimport type {Element as SlateElement} from 'slate'\nimport type {RenderElementProps} from 'slate-react'\nimport {\n  parseBlockObject,\n  parseInlineObject,\n  parseTextBlock,\n} from '../../internal-utils/parse-blocks'\nimport type {\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderListItemFunction,\n  RenderStyleFunction,\n} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\nimport {RenderBlockObject} from './render-block-object'\nimport {RenderInlineObject} from './render-inline-object'\nimport {RenderTextBlock} from './render-text-block'\n\nexport function RenderElement(props: {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement\n  element: SlateElement\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderListItem?: RenderListItemFunction\n  renderStyle?: RenderStyleFunction\n  spellCheck?: boolean\n}) {\n  const editorActor = useContext(EditorActorContext)\n  const schema = useSelector(editorActor, (s) => s.context.schema)\n  const isInline =\n    '__inline' in props.element && props.element.__inline === true\n\n  if (isInline) {\n    const inlineObject = parseInlineObject({\n      context: {\n        keyGenerator: () => '',\n        schema,\n      },\n      options: {refreshKeys: false, validateFields: false},\n      inlineObject: {\n        _key: props.element._key,\n        _type: props.element._type,\n        ...('value' in props.element && typeof props.element.value === 'object'\n          ? props.element.value\n          : {}),\n      },\n    })\n\n    if (!inlineObject) {\n      console.error(\n        `Unable to find Inline Object \"${props.element._type}\" in Schema`,\n      )\n    }\n\n    return (\n      <RenderInlineObject\n        attributes={props.attributes}\n        element={props.element}\n        inlineObject={\n          inlineObject ?? {\n            _key: props.element._key,\n            _type: props.element._type,\n          }\n        }\n        readOnly={props.readOnly}\n        renderChild={props.renderChild}\n      >\n        {props.children}\n      </RenderInlineObject>\n    )\n  }\n\n  const textBlock = parseTextBlock({\n    context: {\n      keyGenerator: () => '',\n      schema,\n    },\n    options: {refreshKeys: false, validateFields: false},\n    block: props.element,\n  })\n\n  if (textBlock) {\n    return (\n      <RenderTextBlock\n        attributes={props.attributes}\n        element={props.element}\n        readOnly={props.readOnly}\n        renderBlock={props.renderBlock}\n        renderListItem={props.renderListItem}\n        renderStyle={props.renderStyle}\n        spellCheck={props.spellCheck}\n        textBlock={textBlock}\n      >\n        {props.children}\n      </RenderTextBlock>\n    )\n  }\n\n  const blockObject = parseBlockObject({\n    context: {\n      keyGenerator: () => '',\n      schema,\n    },\n    options: {refreshKeys: false, validateFields: false},\n    blockObject: {\n      _key: props.element._key,\n      _type: props.element._type,\n      ...('value' in props.element && typeof props.element.value === 'object'\n        ? props.element.value\n        : {}),\n    },\n  })\n\n  if (!blockObject) {\n    console.error(\n      `Unable to find Block Object \"${props.element._type}\" in Schema`,\n    )\n  }\n\n  return (\n    <RenderBlockObject\n      attributes={props.attributes}\n      blockObject={\n        blockObject ?? {\n          _key: props.element._key,\n          _type: props.element._type,\n        }\n      }\n      element={props.element}\n      readOnly={props.readOnly}\n      renderBlock={props.renderBlock}\n    >\n      {props.children}\n    </RenderBlockObject>\n  )\n}\n","import {createContext, useContext} from 'react'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\n/**\n * A React context for sharing the editor object.\n */\nexport const PortableTextEditorContext =\n  createContext<PortableTextEditor | null>(null)\n\n/**\n * @deprecated Use `useEditor` to get the current editor instance.\n * @public\n * Get the current editor object from the React context.\n */\nexport const usePortableTextEditor = (): PortableTextEditor => {\n  const editor = useContext(PortableTextEditorContext)\n\n  if (!editor) {\n    throw new Error(\n      `The \\`usePortableTextEditor\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n\n  return editor\n}\n","/**\n * Copy/pasted from https://github.com/statelyai/xstate/blob/main/packages/xstate-react/src/stopRootWithRehydration.ts\n * and renamed to `stopActor`\n */\n\nimport type {AnyActorRef, Snapshot} from 'xstate'\n\nconst forEachActor = (\n  actorRef: AnyActorRef,\n  callback: (ref: AnyActorRef) => void,\n) => {\n  callback(actorRef)\n  const children = actorRef.getSnapshot().children\n  if (children) {\n    Object.values(children).forEach((child) => {\n      forEachActor(child as AnyActorRef, callback)\n    })\n  }\n}\n\nexport function stopActor(actorRef: AnyActorRef) {\n  // persist snapshot here in a custom way allows us to persist inline actors and to preserve actor references\n  // we do it to avoid setState in useEffect when the effect gets \"reconnected\"\n  // this currently only happens in Strict Effects but it simulates the Offscreen aka Activity API\n  // it also just allows us to end up with a somewhat more predictable behavior for the users\n  const persistedSnapshots: Array<[AnyActorRef, Snapshot<unknown>]> = []\n  forEachActor(actorRef, (ref) => {\n    persistedSnapshots.push([ref, ref.getSnapshot()])\n    // muting observers allow us to avoid `useSelector` from being notified about the stopped snapshot\n    // React reconnects its subscribers (from the useSyncExternalStore) on its own\n    // and userland subscibers should basically always do the same anyway\n    // as each subscription should have its own cleanup logic and that should be called each such reconnect\n    ;(ref as any).observers = new Set()\n  })\n  const systemSnapshot = actorRef.system.getSnapshot?.()\n\n  actorRef.stop()\n  ;(actorRef.system as any)._snapshot = systemSnapshot\n  persistedSnapshots.forEach(([ref, snapshot]) => {\n    ;(ref as any)._processingStatus = 0\n    ;(ref as any)._snapshot = snapshot\n  })\n}\n","import {defineConverter} from './converter.types'\n\nexport const converterJson = defineConverter({\n  mimeType: 'application/json',\n  serialize: ({snapshot, event}) => {\n    const portableTextConverter = snapshot.context.converters.find(\n      (converter) => converter.mimeType === 'application/x-portable-text',\n    )\n\n    if (!portableTextConverter) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'application/json',\n        originEvent: event.originEvent,\n        reason: 'No application/x-portable-text Converter found',\n      }\n    }\n\n    const serializationEvent = portableTextConverter.serialize({\n      snapshot,\n      event,\n    })\n\n    return {\n      ...serializationEvent,\n      mimeType: 'application/json',\n      originEvent: event.originEvent,\n    }\n  },\n  deserialize: ({snapshot, event}) => {\n    const portableTextConverter = snapshot.context.converters.find(\n      (converter) => converter.mimeType === 'application/x-portable-text',\n    )\n\n    if (!portableTextConverter) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: 'application/json',\n        reason: 'No application/x-portable-text Converter found',\n      }\n    }\n\n    const deserializationEvent = portableTextConverter.deserialize({\n      snapshot,\n      event,\n    })\n\n    return {\n      ...deserializationEvent,\n      mimeType: 'application/json',\n    }\n  },\n})\n","import {parseBlock} from '../internal-utils/parse-blocks'\nimport {sliceBlocks} from '../utils'\nimport {defineConverter} from './converter.types'\n\nexport const converterPortableText = defineConverter({\n  mimeType: 'application/x-portable-text',\n  serialize: ({snapshot, event}) => {\n    const selection =\n      snapshot.beta.internalDrag?.origin.selection ?? snapshot.context.selection\n\n    if (!selection) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'application/x-portable-text',\n        originEvent: event.originEvent,\n        reason: 'No selection',\n      }\n    }\n\n    const blocks = sliceBlocks({\n      context: {\n        selection,\n        schema: snapshot.context.schema,\n      },\n      blocks: snapshot.context.value,\n    })\n\n    if (blocks.length === 0) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'application/x-portable-text',\n        reason: 'No blocks serialized',\n        originEvent: event.originEvent,\n      }\n    }\n\n    return {\n      type: 'serialization.success',\n      data: JSON.stringify(blocks),\n      mimeType: 'application/x-portable-text',\n      originEvent: event.originEvent,\n    }\n  },\n  deserialize: ({snapshot, event}) => {\n    const blocks = JSON.parse(event.data)\n\n    if (!Array.isArray(blocks)) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: 'application/x-portable-text',\n        reason: 'Data is not an array',\n      }\n    }\n\n    const parsedBlocks = blocks.flatMap((block) => {\n      const parsedBlock = parseBlock({\n        context: snapshot.context,\n        block,\n        options: {\n          /**\n           * If we are dragging internally then we would like to keep the\n           * dropped portable text as is.\n           */\n          refreshKeys: !snapshot.beta.hasTag?.('dragging internally'),\n          validateFields: false,\n        },\n      })\n      return parsedBlock ? [parsedBlock] : []\n    })\n\n    if (parsedBlocks.length === 0 && blocks.length > 0) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: 'application/x-portable-text',\n        reason: 'No blocks were parsed',\n      }\n    }\n\n    return {\n      type: 'deserialization.success',\n      data: parsedBlocks,\n      mimeType: 'application/x-portable-text',\n    }\n  },\n})\n","import {htmlToBlocks} from '@portabletext/block-tools'\nimport {toHTML} from '@portabletext/to-html'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {parseBlock} from '../internal-utils/parse-blocks'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {sliceBlocks} from '../utils'\nimport {defineConverter} from './converter.types'\n\nexport function createConverterTextHtml(\n  legacySchema: PortableTextMemberSchemaTypes,\n) {\n  return defineConverter({\n    mimeType: 'text/html',\n    serialize: ({snapshot, event}) => {\n      const selection =\n        snapshot.beta.internalDrag?.origin.selection ??\n        snapshot.context.selection\n\n      if (!selection) {\n        return {\n          type: 'serialization.failure',\n          mimeType: 'text/html',\n          originEvent: event.originEvent,\n          reason: 'No selection',\n        }\n      }\n\n      const blocks = sliceBlocks({\n        context: {\n          selection,\n          schema: snapshot.context.schema,\n        },\n        blocks: snapshot.context.value,\n      })\n\n      const html = toHTML(blocks, {\n        onMissingComponent: false,\n        components: {\n          unknownType: ({children}) =>\n            children !== undefined ? `${children}` : '',\n        },\n      })\n\n      if (html === '') {\n        return {\n          type: 'serialization.failure',\n          mimeType: 'text/html',\n          originEvent: event.originEvent,\n          reason: 'Serialized HTML is empty',\n        }\n      }\n\n      return {\n        type: 'serialization.success',\n        data: html,\n        mimeType: 'text/html',\n        originEvent: event.originEvent,\n      }\n    },\n    deserialize: ({snapshot, event}) => {\n      const blocks = htmlToBlocks(event.data, legacySchema.portableText, {\n        keyGenerator: snapshot.context.keyGenerator,\n        unstable_whitespaceOnPasteMode:\n          legacySchema.block.options.unstable_whitespaceOnPasteMode,\n      }) as Array<PortableTextBlock>\n\n      const parsedBlocks = blocks.flatMap((block) => {\n        const parsedBlock = parseBlock({\n          context: snapshot.context,\n          block,\n          options: {\n            refreshKeys: false,\n            validateFields: true,\n          },\n        })\n        return parsedBlock ? [parsedBlock] : []\n      })\n\n      if (parsedBlocks.length === 0) {\n        return {\n          type: 'deserialization.failure',\n          mimeType: 'text/html',\n          reason: 'No blocks deserialized',\n        }\n      }\n\n      return {\n        type: 'deserialization.success',\n        data: parsedBlocks,\n        mimeType: 'text/html',\n      }\n    },\n  })\n}\n","import {htmlToBlocks} from '@portabletext/block-tools'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {isTextBlock, parseBlock} from '../internal-utils/parse-blocks'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {sliceBlocks} from '../utils'\nimport {defineConverter} from './converter.types'\n\nexport function createConverterTextPlain(\n  legacySchema: PortableTextMemberSchemaTypes,\n) {\n  return defineConverter({\n    mimeType: 'text/plain',\n    serialize: ({snapshot, event}) => {\n      const selection =\n        snapshot.beta.internalDrag?.origin.selection ??\n        snapshot.context.selection\n\n      if (!selection) {\n        return {\n          type: 'serialization.failure',\n          mimeType: 'text/plain',\n          originEvent: event.originEvent,\n          reason: 'No selection',\n        }\n      }\n\n      const blocks = sliceBlocks({\n        context: {\n          selection,\n          schema: snapshot.context.schema,\n        },\n        blocks: snapshot.context.value,\n      })\n\n      const data = blocks\n        .map((block) => {\n          if (isTextBlock(snapshot.context, block)) {\n            return block.children\n              .map((child) => {\n                if (child._type === snapshot.context.schema.span.name) {\n                  return child.text\n                }\n\n                return snapshot.beta.hasTag('dragging internally')\n                  ? `[${\n                      snapshot.context.schema.inlineObjects.find(\n                        (inlineObjectType) =>\n                          inlineObjectType.name === child._type,\n                      )?.title ?? 'Object'\n                    }]`\n                  : ''\n              })\n              .join('')\n          }\n\n          return snapshot.beta.hasTag('dragging internally')\n            ? `[${\n                snapshot.context.schema.blockObjects.find(\n                  (blockObjectType) => blockObjectType.name === block._type,\n                )?.title ?? 'Object'\n              }]`\n            : ''\n        })\n        .filter((block) => block !== '')\n        .join('\\n\\n')\n\n      return {\n        type: 'serialization.success',\n        data,\n        mimeType: 'text/plain',\n        originEvent: event.originEvent,\n      }\n    },\n    deserialize: ({snapshot, event}) => {\n      const html = escapeHtml(event.data)\n        .split(/\\n{2,}/)\n        .map((line) =>\n          line\n            ? `<p>${line.replace(/(?:\\r\\n|\\r|\\n)/g, '<br/>')}</p>`\n            : '<p></p>',\n        )\n        .join('')\n\n      const textToHtml = `<html><body>${html}</body></html>`\n\n      const blocks = htmlToBlocks(textToHtml, legacySchema.portableText, {\n        keyGenerator: snapshot.context.keyGenerator,\n      }) as Array<PortableTextBlock>\n\n      const parsedBlocks = blocks.flatMap((block) => {\n        const parsedBlock = parseBlock({\n          context: snapshot.context,\n          block,\n          options: {\n            refreshKeys: false,\n            validateFields: true,\n          },\n        })\n        return parsedBlock ? [parsedBlock] : []\n      })\n\n      if (parsedBlocks.length === 0) {\n        return {\n          type: 'deserialization.failure',\n          mimeType: 'text/plain',\n          reason: 'No blocks deserialized',\n        }\n      }\n\n      return {\n        type: 'deserialization.success',\n        data: parsedBlocks,\n        mimeType: 'text/plain',\n      }\n    },\n  })\n}\n\nconst entityMap: Record<string, string> = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n  '/': '&#x2F;',\n  '`': '&#x60;',\n  '=': '&#x3D;',\n}\n\nfunction escapeHtml(str: string) {\n  return String(str).replace(/[&<>\"'`=/]/g, (s: string) => entityMap[s])\n}\n","import type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {converterJson} from './converter.json'\nimport {converterPortableText} from './converter.portable-text'\nimport {createConverterTextHtml} from './converter.text-html'\nimport {createConverterTextPlain} from './converter.text-plain'\n\nexport function createCoreConverters(\n  legacySchema: PortableTextMemberSchemaTypes,\n) {\n  return [\n    converterJson,\n    converterPortableText,\n    createConverterTextHtml(legacySchema),\n    createConverterTextPlain(legacySchema),\n  ]\n}\n","import {Schema} from '@sanity/schema'\n\nexport function compileType(rawType: any) {\n  return Schema.compile({\n    name: 'blockTypeSchema',\n    types: [rawType],\n  }).get(rawType.name)\n}\n","import type {EditorContext} from '../editor/editor-snapshot'\n\nexport function createPlaceholderBlock(\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>,\n) {\n  return {\n    _type: context.schema.block.name,\n    _key: context.keyGenerator(),\n    style: context.schema.styles[0].name ?? 'normal',\n    markDefs: [],\n    children: [\n      {\n        _type: context.schema.span.name,\n        _key: context.keyGenerator(),\n        text: '',\n        marks: [],\n      },\n    ],\n  }\n}\n","import type {MarkState} from '../internal-utils/mark-state'\nimport type {EditorSchema} from './editor-schema'\n\nexport function getActiveAnnotations({\n  markState,\n  schema,\n}: {\n  markState: MarkState | undefined\n  schema: EditorSchema\n}) {\n  return (markState?.marks ?? []).filter(\n    (mark) =>\n      !schema.decorators.map((decorator) => decorator.name).includes(mark),\n  )\n}\n","import type {MarkState} from '../internal-utils/mark-state'\nimport type {EditorSchema} from './editor-schema'\n\nexport function getActiveDecorators({\n  decoratorState,\n  markState,\n  schema,\n}: {\n  decoratorState: Record<string, boolean | undefined>\n  markState: MarkState | undefined\n  schema: EditorSchema\n}) {\n  const decorators = schema.decorators.map((decorator) => decorator.name)\n\n  const markStateDecorators = (markState?.marks ?? []).filter((mark) =>\n    decorators.includes(mark),\n  )\n\n  let activeDecorators: Array<string> = markStateDecorators\n\n  for (const decorator in decoratorState) {\n    if (decoratorState[decorator] === false) {\n      activeDecorators = activeDecorators.filter(\n        (activeDecorator) => activeDecorator !== decorator,\n      )\n    } else if (decoratorState[decorator] === true) {\n      if (!activeDecorators.includes(decorator)) {\n        activeDecorators.push(decorator)\n      }\n    }\n  }\n\n  return activeDecorators\n}\n","import {Transforms} from 'slate'\nimport {getActiveAnnotations} from '../editor/get-active-annotations'\nimport {getActiveDecorators} from '../editor/get-active-decorators'\nimport {getFocusSpan} from '../internal-utils/slate-utils'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const insertTextOperationImplementation: BehaviorOperationImplementation<\n  'insert.text'\n> = ({context, operation}) => {\n  const activeDecorators = getActiveDecorators({\n    decoratorState: operation.editor.decoratorState,\n    markState: operation.editor.markState,\n    schema: context.schema,\n  })\n  const activeAnnotations = getActiveAnnotations({\n    markState: operation.editor.markState,\n    schema: context.schema,\n  })\n\n  const [focusSpan] = getFocusSpan({\n    editor: operation.editor,\n  })\n\n  if (!focusSpan) {\n    Transforms.insertText(operation.editor, operation.text)\n    return\n  }\n\n  if (\n    operation.editor.markState &&\n    operation.editor.markState.state === 'unchanged'\n  ) {\n    const markStateDecorators = (operation.editor.markState.marks ?? []).filter(\n      (mark) =>\n        context.schema.decorators\n          .map((decorator) => decorator.name)\n          .includes(mark),\n    )\n\n    if (\n      markStateDecorators.length === activeDecorators.length &&\n      markStateDecorators.every((mark) => activeDecorators.includes(mark))\n    ) {\n      Transforms.insertText(operation.editor, operation.text)\n      return\n    }\n  }\n\n  Transforms.insertNodes(operation.editor, {\n    _type: focusSpan._type,\n    _key: context.keyGenerator(),\n    text: operation.text,\n    marks: [...activeDecorators, ...activeAnnotations],\n  })\n\n  operation.editor.decoratorState = {}\n}\n","function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction isPortableTextSpan(node) {\n  return node._type === \"span\" && \"text\" in node && typeof node.text == \"string\" && (typeof node.marks > \"u\" || Array.isArray(node.marks) && node.marks.every(mark => typeof mark == \"string\"));\n}\nfunction isPortableTextBlock(node) {\n  return (\n    // A block doesn't _have_ to be named 'block' - to differentiate between\n    // allowed child types and marks, one might name them differently\n    typeof node._type == \"string\" &&\n    // Toolkit-types like nested spans are @-prefixed\n    node._type[0] !== \"@\" && (\n    // `markDefs` isn't _required_ per say, but if it's there, it needs to be an array\n    !(\"markDefs\" in node) || !node.markDefs || Array.isArray(node.markDefs) &&\n    // Every mark definition needs to have an `_key` to be mappable in child spans\n    node.markDefs.every(def => typeof def._key == \"string\")) &&\n    // `children` is required and needs to be an array\n    \"children\" in node && Array.isArray(node.children) &&\n    // All children are objects with `_type` (usually spans, but can contain other stuff)\n    node.children.every(child => typeof child == \"object\" && \"_type\" in child)\n  );\n}\nfunction isPortableTextListItemBlock(block) {\n  return isPortableTextBlock(block) && \"listItem\" in block && typeof block.listItem == \"string\" && (typeof block.level > \"u\" || typeof block.level == \"number\");\n}\nfunction isPortableTextToolkitList(block) {\n  return block._type === \"@list\";\n}\nfunction isPortableTextToolkitSpan(span) {\n  return span._type === \"@span\";\n}\nfunction isPortableTextToolkitTextNode(node) {\n  return node._type === \"@text\";\n}\nconst knownDecorators = [\"strong\", \"em\", \"code\", \"underline\", \"strike-through\"];\nfunction sortMarksByOccurences(span, index, blockChildren) {\n  if (!isPortableTextSpan(span) || !span.marks) return [];\n  if (!span.marks.length) return [];\n  const marks = span.marks.slice(),\n    occurences = {};\n  return marks.forEach(mark => {\n    occurences[mark] = 1;\n    for (let siblingIndex = index + 1; siblingIndex < blockChildren.length; siblingIndex++) {\n      const sibling = blockChildren[siblingIndex];\n      if (sibling && isPortableTextSpan(sibling) && Array.isArray(sibling.marks) && sibling.marks.indexOf(mark) !== -1) occurences[mark]++;else break;\n    }\n  }), marks.sort((markA, markB) => sortMarks(occurences, markA, markB));\n}\nfunction sortMarks(occurences, markA, markB) {\n  const aOccurences = occurences[markA],\n    bOccurences = occurences[markB];\n  if (aOccurences !== bOccurences) return bOccurences - aOccurences;\n  const aKnownPos = knownDecorators.indexOf(markA),\n    bKnownPos = knownDecorators.indexOf(markB);\n  return aKnownPos !== bKnownPos ? aKnownPos - bKnownPos : markA.localeCompare(markB);\n}\nfunction buildMarksTree(block) {\n  var _a, _b;\n  const {\n      children\n    } = block,\n    markDefs = (_a = block.markDefs) != null ? _a : [];\n  if (!children || !children.length) return [];\n  const sortedMarks = children.map(sortMarksByOccurences),\n    rootNode = {\n      _type: \"@span\",\n      children: [],\n      markType: \"<unknown>\"\n    };\n  let nodeStack = [rootNode];\n  for (let i = 0; i < children.length; i++) {\n    const span = children[i];\n    if (!span) continue;\n    const marksNeeded = sortedMarks[i] || [];\n    let pos = 1;\n    if (nodeStack.length > 1) for (pos; pos < nodeStack.length; pos++) {\n      const mark = ((_b = nodeStack[pos]) == null ? void 0 : _b.markKey) || \"\",\n        index = marksNeeded.indexOf(mark);\n      if (index === -1) break;\n      marksNeeded.splice(index, 1);\n    }\n    nodeStack = nodeStack.slice(0, pos);\n    let currentNode = nodeStack[nodeStack.length - 1];\n    if (currentNode) {\n      for (const markKey of marksNeeded) {\n        const markDef = markDefs == null ? void 0 : markDefs.find(def => def._key === markKey),\n          markType = markDef ? markDef._type : markKey,\n          node = {\n            _type: \"@span\",\n            _key: span._key,\n            children: [],\n            markDef,\n            markType,\n            markKey\n          };\n        currentNode.children.push(node), nodeStack.push(node), currentNode = node;\n      }\n      if (isPortableTextSpan(span)) {\n        const lines = span.text.split(`\n`);\n        for (let line = lines.length; line-- > 1;) lines.splice(line, 0, `\n`);\n        currentNode.children = currentNode.children.concat(lines.map(text => ({\n          _type: \"@text\",\n          text\n        })));\n      } else currentNode.children = currentNode.children.concat(span);\n    }\n  }\n  return rootNode.children;\n}\nfunction nestLists(blocks, mode) {\n  const tree = [];\n  let currentList;\n  for (let i = 0; i < blocks.length; i++) {\n    const block = blocks[i];\n    if (block) {\n      if (!isPortableTextListItemBlock(block)) {\n        tree.push(block), currentList = void 0;\n        continue;\n      }\n      if (!currentList) {\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (blockMatchesList(block, currentList)) {\n        currentList.children.push(block);\n        continue;\n      }\n      if ((block.level || 1) > currentList.level) {\n        const newList = listFromBlock(block, i, mode);\n        if (mode === \"html\") {\n          const lastListItem = currentList.children[currentList.children.length - 1],\n            newLastChild = _objectSpread(_objectSpread({}, lastListItem), {}, {\n              children: [...lastListItem.children, newList]\n            });\n          currentList.children[currentList.children.length - 1] = newLastChild;\n        } else currentList.children.push(newList);\n        currentList = newList;\n        continue;\n      }\n      if ((block.level || 1) < currentList.level) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, block);\n        if (match) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        }\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (block.listItem !== currentList.listItem) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, {\n            level: block.level || 1\n          });\n        if (match && match.listItem === block.listItem) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        } else {\n          currentList = listFromBlock(block, i, mode), tree.push(currentList);\n          continue;\n        }\n      }\n      console.warn(\"Unknown state encountered for block\", block), tree.push(block);\n    }\n  }\n  return tree;\n}\nfunction blockMatchesList(block, list) {\n  return (block.level || 1) === list.level && block.listItem === list.listItem;\n}\nfunction listFromBlock(block, index, mode) {\n  return {\n    _type: \"@list\",\n    _key: `${block._key || `${index}`}-parent`,\n    mode,\n    level: block.level || 1,\n    listItem: block.listItem,\n    children: [block]\n  };\n}\nfunction findListMatching(rootNode, matching) {\n  const level = matching.level || 1,\n    style = matching.listItem || \"normal\",\n    filterOnType = typeof matching.listItem == \"string\";\n  if (isPortableTextToolkitList(rootNode) && (rootNode.level || 1) === level && filterOnType && (rootNode.listItem || \"normal\") === style) return rootNode;\n  if (!(\"children\" in rootNode)) return;\n  const node = rootNode.children[rootNode.children.length - 1];\n  return node && !isPortableTextSpan(node) ? findListMatching(node, matching) : void 0;\n}\nfunction spanToPlainText(span) {\n  let text = \"\";\n  return span.children.forEach(current => {\n    isPortableTextToolkitTextNode(current) ? text += current.text : isPortableTextToolkitSpan(current) && (text += spanToPlainText(current));\n  }), text;\n}\nconst leadingSpace = /^\\s/,\n  trailingSpace = /\\s$/;\nfunction toPlainText(block) {\n  const blocks = Array.isArray(block) ? block : [block];\n  let text = \"\";\n  return blocks.forEach((current, index) => {\n    if (!isPortableTextBlock(current)) return;\n    let pad = !1;\n    current.children.forEach(span => {\n      isPortableTextSpan(span) ? (text += pad && text && !trailingSpace.test(text) && !leadingSpace.test(span.text) ? \" \" : \"\", text += span.text, pad = !1) : pad = !0;\n    }), index !== blocks.length - 1 && (text += `\n\n`);\n  }), text;\n}\nconst LIST_NEST_MODE_HTML = \"html\",\n  LIST_NEST_MODE_DIRECT = \"direct\";\nexport { LIST_NEST_MODE_DIRECT, LIST_NEST_MODE_HTML, buildMarksTree, isPortableTextBlock, isPortableTextListItemBlock, isPortableTextSpan, isPortableTextToolkitList, isPortableTextToolkitSpan, isPortableTextToolkitTextNode, nestLists, sortMarksByOccurences, spanToPlainText, toPlainText };\n//# sourceMappingURL=index.js.map\n","import type {PortableTextSpan} from '@sanity/types'\nimport {Node, Path} from 'slate'\nimport type {PortableTextSlateEditor} from '../types/editor'\n\nexport function getPreviousSpan({\n  editor,\n  blockPath,\n  spanPath,\n}: {\n  editor: PortableTextSlateEditor\n  blockPath: Path\n  spanPath: Path\n}): PortableTextSpan | undefined {\n  let previousSpan: PortableTextSpan | undefined\n\n  for (const [child, childPath] of Node.children(editor, blockPath, {\n    reverse: true,\n  })) {\n    if (!editor.isTextSpan(child)) {\n      continue\n    }\n\n    if (Path.isBefore(childPath, spanPath)) {\n      previousSpan = child\n      break\n    }\n  }\n\n  return previousSpan\n}\n\nexport function getNextSpan({\n  editor,\n  blockPath,\n  spanPath,\n}: {\n  editor: PortableTextSlateEditor\n  blockPath: Path\n  spanPath: Path\n}): PortableTextSpan | undefined {\n  let nextSpan: PortableTextSpan | undefined\n\n  for (const [child, childPath] of Node.children(editor, blockPath)) {\n    if (!editor.isTextSpan(child)) {\n      continue\n    }\n\n    if (Path.isAfter(childPath, spanPath)) {\n      nextSpan = child\n      break\n    }\n  }\n\n  return nextSpan\n}\n","import type {Editor} from 'slate'\nimport {IS_PROCESSING_REMOTE_CHANGES} from './weakMaps'\n\nexport function withRemoteChanges(editor: Editor, fn: () => void): void {\n  const prev = isChangingRemotely(editor) || false\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, true)\n  fn()\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, prev)\n}\n\nexport function isChangingRemotely(editor: Editor): boolean | undefined {\n  return IS_PROCESSING_REMOTE_CHANGES.get(editor)\n}\n","import type {Editor} from 'slate'\n\nconst IS_UDOING: WeakMap<Editor, boolean | undefined> = new WeakMap()\nconst IS_REDOING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withUndoing(editor: Editor, fn: () => void) {\n  const prev = isUndoing(editor)\n  IS_UDOING.set(editor, true)\n  fn()\n  IS_UDOING.set(editor, prev)\n}\n\nexport function isUndoing(editor: Editor) {\n  return IS_UDOING.get(editor) ?? false\n}\n\nexport function setIsUndoing(editor: Editor, isUndoing: boolean) {\n  IS_UDOING.set(editor, isUndoing)\n}\n\nexport function withRedoing(editor: Editor, fn: () => void) {\n  const prev = isRedoing(editor)\n  IS_REDOING.set(editor, true)\n  fn()\n  IS_REDOING.set(editor, prev)\n}\n\nexport function isRedoing(editor: Editor) {\n  return IS_REDOING.get(editor) ?? false\n}\n\nexport function setIsRedoing(editor: Editor, isRedoing: boolean) {\n  IS_REDOING.set(editor, isRedoing)\n}\n","import {useSelector} from '@xstate/react'\nimport type {Editor} from '../editor'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {InternalEditor} from './create-editor'\nimport type {EditorActor} from './editor-machine'\nimport type {EditorSnapshot} from './editor-snapshot'\nimport {getActiveAnnotations} from './get-active-annotations'\nimport {getActiveDecorators} from './get-active-decorators'\n\nfunction defaultCompare<T>(a: T, b: T) {\n  return a === b\n}\n\n/**\n * @public\n */\nexport type EditorSelector<TSelected> = (snapshot: EditorSnapshot) => TSelected\n\n/**\n * @public\n * Hook to select a value from the editor state.\n * @example\n * Pass a selector as the second argument\n * ```tsx\n * import { useEditorSelector } from '@portabletext/editor'\n *\n * function MyComponent(editor) {\n *  const value = useEditorSelector(editor, selector)\n * }\n * ```\n * @example\n * Pass an inline selector as the second argument.\n * In this case, use the editor context to obtain the schema.\n * ```tsx\n * import { useEditorSelector } from '@portabletext/editor'\n *\n * function MyComponent(editor) {\n *  const schema = useEditorSelector(editor, (snapshot) => snapshot.context.schema)\n * }\n * ```\n * @group Hooks\n */\nexport function useEditorSelector<TSelected>(\n  editor: Editor,\n  selector: EditorSelector<TSelected>,\n  compare: (a: TSelected, b: TSelected) => boolean = defaultCompare,\n) {\n  return useSelector(\n    (editor as InternalEditor)._internal.editorActor,\n    (editorActorSnapshot) => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot,\n        slateEditorInstance: (editor as InternalEditor)._internal.slateEditor\n          .instance,\n      })\n\n      return selector(snapshot)\n    },\n    compare,\n  )\n}\n\nexport function getEditorSnapshot({\n  editorActorSnapshot,\n  slateEditorInstance,\n}: {\n  editorActorSnapshot: ReturnType<EditorActor['getSnapshot']>\n  slateEditorInstance: PortableTextSlateEditor\n}): EditorSnapshot {\n  return {\n    context: {\n      converters: [...editorActorSnapshot.context.converters],\n      keyGenerator: editorActorSnapshot.context.keyGenerator,\n      readOnly: editorActorSnapshot.matches({'edit mode': 'read only'}),\n      schema: editorActorSnapshot.context.schema,\n      selection: editorActorSnapshot.context.selection,\n      value: slateEditorInstance.value,\n    },\n    beta: {\n      activeAnnotations: getActiveAnnotations({\n        markState: slateEditorInstance.markState,\n        schema: editorActorSnapshot.context.schema,\n      }),\n      activeDecorators: getActiveDecorators({\n        decoratorState: slateEditorInstance.decoratorState,\n        markState: slateEditorInstance.markState,\n        schema: editorActorSnapshot.context.schema,\n      }),\n      hasTag: (tag) => editorActorSnapshot.hasTag(tag),\n      internalDrag: editorActorSnapshot.context.internalDrag,\n    },\n  }\n}\n","/**\n *\n * This plugin will change Slate's default marks model (every prop is a mark) with the Portable Text model (marks is an array of strings on prop .marks).\n *\n */\n\nimport {isPortableTextBlock, isPortableTextSpan} from '@portabletext/toolkit'\nimport type {PortableTextObject, PortableTextSpan} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {Editor, Element, Node, Path, Range, Text, Transforms} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {getNextSpan, getPreviousSpan} from '../../internal-utils/sibling-utils'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {BehaviorOperationImplementation} from '../../operations/behavior.operations'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {getEditorSnapshot} from '../editor-selector'\n\nconst debug = debugWithName('plugin:withPortableTextMarkModel')\n\nexport function createWithPortableTextMarkModel(\n  editorActor: EditorActor,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPortableTextMarkModel(editor: PortableTextSlateEditor) {\n    const {apply, normalizeNode} = editor\n    const decorators = editorActor\n      .getSnapshot()\n      .context.schema.decorators.map((t) => t.name)\n\n    // Extend Slate's default normalization. Merge spans with same set of .marks when doing merge_node operations, and clean up markDefs / marks\n    editor.normalizeNode = (nodeEntry) => {\n      const [node, path] = nodeEntry\n\n      if (editor.isTextBlock(node)) {\n        const children = Node.children(editor, path)\n\n        for (const [child, childPath] of children) {\n          const nextNode = node.children[childPath[1] + 1]\n\n          if (\n            editor.isTextSpan(child) &&\n            editor.isTextSpan(nextNode) &&\n            child.marks?.every((mark) => nextNode.marks?.includes(mark)) &&\n            nextNode.marks?.every((mark) => child.marks?.includes(mark))\n          ) {\n            debug(\n              'Merging spans',\n              JSON.stringify(child, null, 2),\n              JSON.stringify(nextNode, null, 2),\n            )\n            editorActor.send({type: 'normalizing'})\n            Transforms.mergeNodes(editor, {\n              at: [childPath[0], childPath[1] + 1],\n              voids: true,\n            })\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      /**\n       * Add missing .markDefs to block nodes\n       */\n      if (editor.isTextBlock(node) && !Array.isArray(node.markDefs)) {\n        debug('Adding .markDefs to block node')\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {markDefs: []}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      /**\n       * Add missing .marks to span nodes\n       */\n      if (editor.isTextSpan(node) && !Array.isArray(node.marks)) {\n        debug('Adding .marks to span node')\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {marks: []}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      /**\n       * Remove annotations from empty spans\n       */\n      if (editor.isTextSpan(node)) {\n        const blockPath = Path.parent(path)\n        const [block] = Editor.node(editor, blockPath)\n        const decorators = editorActor\n          .getSnapshot()\n          .context.schema.decorators.map((decorator) => decorator.name)\n        const annotations = node.marks?.filter(\n          (mark) => !decorators.includes(mark),\n        )\n\n        if (editor.isTextBlock(block)) {\n          if (node.text === '' && annotations && annotations.length > 0) {\n            debug('Removing annotations from empty span node')\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {marks: node.marks?.filter((mark) => decorators.includes(mark))},\n              {at: path},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      /**\n       * Remove orphaned annotations from child spans of block nodes\n       */\n      if (editor.isTextBlock(node)) {\n        const decorators = editorActor\n          .getSnapshot()\n          .context.schema.decorators.map((decorator) => decorator.name)\n\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (editor.isTextSpan(child)) {\n            const marks = child.marks ?? []\n            const orphanedAnnotations = marks.filter((mark) => {\n              return (\n                !decorators.includes(mark) &&\n                !node.markDefs?.find((def) => def._key === mark)\n              )\n            })\n\n            if (orphanedAnnotations.length > 0) {\n              debug('Removing orphaned annotations from span node')\n              editorActor.send({type: 'normalizing'})\n              Transforms.setNodes(\n                editor,\n                {\n                  marks: marks.filter(\n                    (mark) => !orphanedAnnotations.includes(mark),\n                  ),\n                },\n                {at: childPath},\n              )\n              editorActor.send({type: 'done normalizing'})\n              return\n            }\n          }\n        }\n      }\n\n      /**\n       * Remove orphaned annotations from span nodes\n       */\n      if (editor.isTextSpan(node)) {\n        const blockPath = Path.parent(path)\n        const [block] = Editor.node(editor, blockPath)\n\n        if (editor.isTextBlock(block)) {\n          const decorators = editorActor\n            .getSnapshot()\n            .context.schema.decorators.map((decorator) => decorator.name)\n          const marks = node.marks ?? []\n          const orphanedAnnotations = marks.filter((mark) => {\n            return (\n              !decorators.includes(mark) &&\n              !block.markDefs?.find((def) => def._key === mark)\n            )\n          })\n\n          if (orphanedAnnotations.length > 0) {\n            debug('Removing orphaned annotations from span node')\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {\n                marks: marks.filter(\n                  (mark) => !orphanedAnnotations.includes(mark),\n                ),\n              },\n              {at: path},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      // Remove duplicate markDefs\n      if (editor.isTextBlock(node)) {\n        const markDefs = node.markDefs ?? []\n        const markDefKeys = new Set<string>()\n        const newMarkDefs: Array<PortableTextObject> = []\n\n        for (const markDef of markDefs) {\n          if (!markDefKeys.has(markDef._key)) {\n            markDefKeys.add(markDef._key)\n            newMarkDefs.push(markDef)\n          }\n        }\n\n        if (markDefs.length !== newMarkDefs.length) {\n          debug('Removing duplicate markDefs')\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(editor, {markDefs: newMarkDefs}, {at: path})\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n      }\n\n      // Check consistency of markDefs (unless we are merging two nodes)\n      if (\n        editor.isTextBlock(node) &&\n        !editor.operations.some(\n          (op) =>\n            op.type === 'merge_node' &&\n            'markDefs' in op.properties &&\n            op.path.length === 1,\n        )\n      ) {\n        const newMarkDefs = (node.markDefs || []).filter((def) => {\n          return node.children.find((child) => {\n            return (\n              Text.isText(child) &&\n              Array.isArray(child.marks) &&\n              child.marks.includes(def._key)\n            )\n          })\n        })\n        if (node.markDefs && !isEqual(newMarkDefs, node.markDefs)) {\n          debug('Removing markDef not in use')\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(\n            editor,\n            {\n              markDefs: newMarkDefs,\n            },\n            {at: path},\n          )\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n      }\n\n      normalizeNode(nodeEntry)\n    }\n\n    editor.apply = (op) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      if (op.type === 'set_selection') {\n        if (\n          op.properties &&\n          op.newProperties &&\n          op.properties.anchor &&\n          op.properties.focus &&\n          op.newProperties.anchor &&\n          op.newProperties.focus\n        ) {\n          const previousSelectionIsCollapsed = Range.isCollapsed({\n            anchor: op.properties.anchor,\n            focus: op.properties.focus,\n          })\n          const newSelectionIsCollapsed = Range.isCollapsed({\n            anchor: op.newProperties.anchor,\n            focus: op.newProperties.focus,\n          })\n\n          if (previousSelectionIsCollapsed && newSelectionIsCollapsed) {\n            const focusSpan: PortableTextSpan | undefined = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: op.properties.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0]?.[0]\n            const newFocusSpan: PortableTextSpan | undefined = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: op.newProperties.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0]?.[0]\n            const movedToNextSpan =\n              focusSpan &&\n              newFocusSpan &&\n              op.newProperties.focus.path[0] === op.properties.focus.path[0] &&\n              op.newProperties.focus.path[1] ===\n                op.properties.focus.path[1] + 1 &&\n              focusSpan.text.length === op.properties.focus.offset &&\n              op.newProperties.focus.offset === 0\n            const movedToPreviousSpan =\n              focusSpan &&\n              newFocusSpan &&\n              op.newProperties.focus.path[0] === op.properties.focus.path[0] &&\n              op.newProperties.focus.path[1] ===\n                op.properties.focus.path[1] - 1 &&\n              op.properties.focus.offset === 0 &&\n              newFocusSpan.text.length === op.newProperties.focus.offset\n\n            // We only want to clear the decorator state if the caret is visually\n            // moving\n            if (!movedToNextSpan && !movedToPreviousSpan) {\n              editor.decoratorState = {}\n            }\n          }\n        }\n      }\n\n      if (op.type === 'insert_node') {\n        const {selection} = editor\n\n        if (selection) {\n          const [_block, blockPath] = Editor.node(editor, selection, {depth: 1})\n          const previousSpan = getPreviousSpan({\n            editor,\n            blockPath,\n            spanPath: op.path,\n          })\n          const previousSpanAnnotations = previousSpan\n            ? previousSpan.marks?.filter((mark) => !decorators.includes(mark))\n            : []\n\n          const nextSpan = getNextSpan({\n            editor,\n            blockPath,\n            spanPath: [op.path[0], op.path[1] - 1],\n          })\n          const nextSpanAnnotations = nextSpan\n            ? nextSpan.marks?.filter((mark) => !decorators.includes(mark))\n            : []\n\n          const annotationsEnding =\n            previousSpanAnnotations?.filter(\n              (annotation) => !nextSpanAnnotations?.includes(annotation),\n            ) ?? []\n          const atTheEndOfAnnotation = annotationsEnding.length > 0\n\n          if (\n            atTheEndOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.some((mark) => annotationsEnding.includes(mark))\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks:\n                op.node.marks?.filter(\n                  (mark) => !annotationsEnding.includes(mark),\n                ) ?? [],\n            })\n            return\n          }\n\n          const annotationsStarting =\n            nextSpanAnnotations?.filter(\n              (annotation) => !previousSpanAnnotations?.includes(annotation),\n            ) ?? []\n          const atTheStartOfAnnotation = annotationsStarting.length > 0\n\n          if (\n            atTheStartOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.some((mark) => annotationsStarting.includes(mark))\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks:\n                op.node.marks?.filter(\n                  (mark) => !annotationsStarting.includes(mark),\n                ) ?? [],\n            })\n            return\n          }\n\n          const nextSpanDecorators =\n            nextSpan?.marks?.filter((mark) => decorators.includes(mark)) ?? []\n          const decoratorStarting = nextSpanDecorators.length > 0\n\n          if (\n            decoratorStarting &&\n            atTheEndOfAnnotation &&\n            !atTheStartOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.length === 0\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks: nextSpanDecorators,\n            })\n            return\n          }\n        }\n      }\n\n      if (op.type === 'insert_text') {\n        if (!editor.markState) {\n          apply(op)\n          return\n        }\n\n        if (editor.markState.state === 'unchanged') {\n          apply(op)\n          return\n        }\n\n        Transforms.insertNodes(editor, {\n          _type: 'span',\n          _key: editorActor.getSnapshot().context.keyGenerator(),\n          text: op.text,\n          marks: editor.markState.marks,\n        })\n\n        return\n      }\n\n      if (op.type === 'remove_text') {\n        const {selection} = editor\n\n        if (selection && Range.isExpanded(selection)) {\n          const [block, blockPath] = Editor.node(editor, selection, {\n            depth: 1,\n          })\n          const [span, spanPath] =\n            Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: {path: op.path, offset: op.offset},\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0] ?? ([undefined, undefined] as const)\n\n          if (span && block && isPortableTextBlock(block)) {\n            const markDefs = block.markDefs ?? []\n            const marks = span.marks ?? []\n            const spanHasAnnotations = marks.some((mark) =>\n              markDefs.find((markDef) => markDef._key === mark),\n            )\n            const deletingFromTheEnd =\n              op.offset + op.text.length === span.text.length\n            const deletingAllText = op.offset === 0 && deletingFromTheEnd\n\n            const previousSpan = getPreviousSpan({editor, blockPath, spanPath})\n            const nextSpan = getNextSpan({editor, blockPath, spanPath})\n\n            const previousSpanHasSameAnnotation = previousSpan\n              ? previousSpan.marks?.some(\n                  (mark) => !decorators.includes(mark) && marks.includes(mark),\n                )\n              : false\n            const nextSpanHasSameAnnotation = nextSpan\n              ? nextSpan.marks?.some(\n                  (mark) => !decorators.includes(mark) && marks.includes(mark),\n                )\n              : false\n\n            if (\n              spanHasAnnotations &&\n              deletingAllText &&\n              !previousSpanHasSameAnnotation &&\n              !nextSpanHasSameAnnotation\n            ) {\n              const snapshot = getEditorSnapshot({\n                editorActorSnapshot: editorActor.getSnapshot(),\n                slateEditorInstance: editor,\n              })\n\n              Editor.withoutNormalizing(editor, () => {\n                apply(op)\n                Transforms.setNodes(\n                  editor,\n                  {marks: snapshot.beta.activeDecorators},\n                  {at: op.path},\n                )\n              })\n\n              editor.onChange()\n              return\n            }\n          }\n        }\n      }\n\n      /**\n       * Copy over markDefs when merging blocks\n       */\n      if (\n        op.type === 'merge_node' &&\n        op.path.length === 1 &&\n        'markDefs' in op.properties &&\n        op.properties._type ===\n          editorActor.getSnapshot().context.schema.block.name &&\n        Array.isArray(op.properties.markDefs) &&\n        op.properties.markDefs.length > 0 &&\n        op.path[0] - 1 >= 0\n      ) {\n        const [targetBlock, targetPath] = Editor.node(editor, [op.path[0] - 1])\n\n        if (editor.isTextBlock(targetBlock)) {\n          const oldDefs =\n            (Array.isArray(targetBlock.markDefs) && targetBlock.markDefs) || []\n          const newMarkDefs = uniq([...oldDefs, ...op.properties.markDefs])\n\n          debug(`Copying markDefs over to merged block`, op)\n          Transforms.setNodes(\n            editor,\n            {markDefs: newMarkDefs},\n            {at: targetPath, voids: false},\n          )\n          apply(op)\n          return\n        }\n      }\n\n      apply(op)\n    }\n\n    return editor\n  }\n}\n\nexport const removeDecoratorOperationImplementation: BehaviorOperationImplementation<\n  'decorator.remove'\n> = ({operation}) => {\n  const editor = operation.editor\n  const mark = operation.decorator\n  const {selection} = editor\n\n  if (selection) {\n    if (Range.isExpanded(selection)) {\n      // Split if needed\n      Transforms.setNodes(\n        editor,\n        {},\n        {match: Text.isText, split: true, hanging: true},\n      )\n      if (editor.selection) {\n        const splitTextNodes = [\n          ...Editor.nodes(editor, {\n            at: editor.selection,\n            match: Text.isText,\n          }),\n        ]\n        splitTextNodes.forEach(([node, path]) => {\n          const block = editor.children[path[0]]\n          if (Element.isElement(block) && block.children.includes(node)) {\n            Transforms.setNodes(\n              editor,\n              {\n                marks: (Array.isArray(node.marks) ? node.marks : []).filter(\n                  (eMark: string) => eMark !== mark,\n                ),\n                _type: 'span',\n              },\n              {at: path},\n            )\n          }\n        })\n      }\n    } else {\n      const [block, blockPath] = Editor.node(editor, selection, {\n        depth: 1,\n      })\n      const lonelyEmptySpan =\n        editor.isTextBlock(block) &&\n        block.children.length === 1 &&\n        editor.isTextSpan(block.children[0]) &&\n        block.children[0].text === ''\n          ? block.children[0]\n          : undefined\n\n      if (lonelyEmptySpan) {\n        const existingMarks = lonelyEmptySpan.marks ?? []\n        const existingMarksWithoutDecorator = existingMarks.filter(\n          (existingMark) => existingMark !== mark,\n        )\n\n        Transforms.setNodes(\n          editor,\n          {\n            marks: existingMarksWithoutDecorator,\n          },\n          {\n            at: blockPath,\n            match: (node) => editor.isTextSpan(node),\n          },\n        )\n      } else {\n        editor.decoratorState[mark] = false\n      }\n    }\n\n    if (editor.selection) {\n      // Reselect\n      const selection = editor.selection\n      editor.selection = {...selection}\n    }\n  }\n}\n","function cloneDiff(diff2) {\n  const [type, patch] = diff2;\n  return [type, patch];\n}\nfunction getCommonOverlap(textA, textB) {\n  let text1 = textA, text2 = textB;\n  const text1Length = text1.length, text2Length = text2.length;\n  if (text1Length === 0 || text2Length === 0)\n    return 0;\n  text1Length > text2Length ? text1 = text1.substring(text1Length - text2Length) : text1Length < text2Length && (text2 = text2.substring(0, text1Length));\n  const textLength = Math.min(text1Length, text2Length);\n  if (text1 === text2)\n    return textLength;\n  let best = 0, length = 1;\n  for (let found = 0; found !== -1; ) {\n    const pattern = text1.substring(textLength - length);\n    if (found = text2.indexOf(pattern), found === -1)\n      return best;\n    length += found, (found === 0 || text1.substring(textLength - length) === text2.substring(0, length)) && (best = length, length++);\n  }\n  return best;\n}\nfunction getCommonPrefix(text1, text2) {\n  if (!text1 || !text2 || text1[0] !== text2[0])\n    return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerStart = 0;\n  for (; pointerMin < pointerMid; )\n    text1.substring(pointerStart, pointerMid) === text2.substring(pointerStart, pointerMid) ? (pointerMin = pointerMid, pointerStart = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction getCommonSuffix(text1, text2) {\n  if (!text1 || !text2 || text1[text1.length - 1] !== text2[text2.length - 1])\n    return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerEnd = 0;\n  for (; pointerMin < pointerMid; )\n    text1.substring(text1.length - pointerMid, text1.length - pointerEnd) === text2.substring(text2.length - pointerMid, text2.length - pointerEnd) ? (pointerMin = pointerMid, pointerEnd = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction isHighSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 55296 && charCode <= 56319;\n}\nfunction isLowSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 56320 && charCode <= 57343;\n}\nfunction bisect(text1, text2, deadline) {\n  const text1Length = text1.length, text2Length = text2.length, maxD = Math.ceil((text1Length + text2Length) / 2), vOffset = maxD, vLength = 2 * maxD, v1 = new Array(vLength), v2 = new Array(vLength);\n  for (let x = 0; x < vLength; x++)\n    v1[x] = -1, v2[x] = -1;\n  v1[vOffset + 1] = 0, v2[vOffset + 1] = 0;\n  const delta = text1Length - text2Length, front = delta % 2 !== 0;\n  let k1start = 0, k1end = 0, k2start = 0, k2end = 0;\n  for (let d = 0; d < maxD && !(Date.now() > deadline); d++) {\n    for (let k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      const k1Offset = vOffset + k1;\n      let x1;\n      k1 === -d || k1 !== d && v1[k1Offset - 1] < v1[k1Offset + 1] ? x1 = v1[k1Offset + 1] : x1 = v1[k1Offset - 1] + 1;\n      let y1 = x1 - k1;\n      for (; x1 < text1Length && y1 < text2Length && text1.charAt(x1) === text2.charAt(y1); )\n        x1++, y1++;\n      if (v1[k1Offset] = x1, x1 > text1Length)\n        k1end += 2;\n      else if (y1 > text2Length)\n        k1start += 2;\n      else if (front) {\n        const k2Offset = vOffset + delta - k1;\n        if (k2Offset >= 0 && k2Offset < vLength && v2[k2Offset] !== -1) {\n          const x2 = text1Length - v2[k2Offset];\n          if (x1 >= x2)\n            return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n    for (let k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      const k2Offset = vOffset + k2;\n      let x2;\n      k2 === -d || k2 !== d && v2[k2Offset - 1] < v2[k2Offset + 1] ? x2 = v2[k2Offset + 1] : x2 = v2[k2Offset - 1] + 1;\n      let y2 = x2 - k2;\n      for (; x2 < text1Length && y2 < text2Length && text1.charAt(text1Length - x2 - 1) === text2.charAt(text2Length - y2 - 1); )\n        x2++, y2++;\n      if (v2[k2Offset] = x2, x2 > text1Length)\n        k2end += 2;\n      else if (y2 > text2Length)\n        k2start += 2;\n      else if (!front) {\n        const k1Offset = vOffset + delta - k2;\n        if (k1Offset >= 0 && k1Offset < vLength && v1[k1Offset] !== -1) {\n          const x1 = v1[k1Offset], y1 = vOffset + x1 - k1Offset;\n          if (x2 = text1Length - x2, x1 >= x2)\n            return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n  }\n  return [\n    [DIFF_DELETE, text1],\n    [DIFF_INSERT, text2]\n  ];\n}\nfunction bisectSplit(text1, text2, x, y, deadline) {\n  const text1a = text1.substring(0, x), text2a = text2.substring(0, y), text1b = text1.substring(x), text2b = text2.substring(y), diffs = doDiff(text1a, text2a, { checkLines: !1, deadline }), diffsb = doDiff(text1b, text2b, { checkLines: !1, deadline });\n  return diffs.concat(diffsb);\n}\nfunction findHalfMatch(text1, text2, timeout = 1) {\n  if (timeout <= 0)\n    return null;\n  const longText = text1.length > text2.length ? text1 : text2, shortText = text1.length > text2.length ? text2 : text1;\n  if (longText.length < 4 || shortText.length * 2 < longText.length)\n    return null;\n  const halfMatch1 = halfMatchI(longText, shortText, Math.ceil(longText.length / 4)), halfMatch2 = halfMatchI(longText, shortText, Math.ceil(longText.length / 2));\n  let halfMatch;\n  if (halfMatch1 && halfMatch2)\n    halfMatch = halfMatch1[4].length > halfMatch2[4].length ? halfMatch1 : halfMatch2;\n  else {\n    if (!halfMatch1 && !halfMatch2)\n      return null;\n    halfMatch2 ? halfMatch1 || (halfMatch = halfMatch2) : halfMatch = halfMatch1;\n  }\n  if (!halfMatch)\n    throw new Error(\"Unable to find a half match.\");\n  let text1A, text1B, text2A, text2B;\n  text1.length > text2.length ? (text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3]) : (text2A = halfMatch[0], text2B = halfMatch[1], text1A = halfMatch[2], text1B = halfMatch[3]);\n  const midCommon = halfMatch[4];\n  return [text1A, text1B, text2A, text2B, midCommon];\n}\nfunction halfMatchI(longText, shortText, i) {\n  const seed = longText.slice(i, i + Math.floor(longText.length / 4));\n  let j = -1, bestCommon = \"\", bestLongTextA, bestLongTextB, bestShortTextA, bestShortTextB;\n  for (; (j = shortText.indexOf(seed, j + 1)) !== -1; ) {\n    const prefixLength = getCommonPrefix(longText.slice(i), shortText.slice(j)), suffixLength = getCommonSuffix(longText.slice(0, i), shortText.slice(0, j));\n    bestCommon.length < suffixLength + prefixLength && (bestCommon = shortText.slice(j - suffixLength, j) + shortText.slice(j, j + prefixLength), bestLongTextA = longText.slice(0, i - suffixLength), bestLongTextB = longText.slice(i + prefixLength), bestShortTextA = shortText.slice(0, j - suffixLength), bestShortTextB = shortText.slice(j + prefixLength));\n  }\n  return bestCommon.length * 2 >= longText.length ? [\n    bestLongTextA || \"\",\n    bestLongTextB || \"\",\n    bestShortTextA || \"\",\n    bestShortTextB || \"\",\n    bestCommon || \"\"\n  ] : null;\n}\nfunction charsToLines(diffs, lineArray) {\n  for (let x = 0; x < diffs.length; x++) {\n    const chars = diffs[x][1], text = [];\n    for (let y = 0; y < chars.length; y++)\n      text[y] = lineArray[chars.charCodeAt(y)];\n    diffs[x][1] = text.join(\"\");\n  }\n}\nfunction linesToChars(textA, textB) {\n  const lineArray = [], lineHash = {};\n  lineArray[0] = \"\";\n  function diffLinesToMunge(text) {\n    let chars = \"\", lineStart = 0, lineEnd = -1, lineArrayLength = lineArray.length;\n    for (; lineEnd < text.length - 1; ) {\n      lineEnd = text.indexOf(`\n`, lineStart), lineEnd === -1 && (lineEnd = text.length - 1);\n      let line = text.slice(lineStart, lineEnd + 1);\n      (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) : lineHash[line] !== void 0) ? chars += String.fromCharCode(lineHash[line]) : (lineArrayLength === maxLines && (line = text.slice(lineStart), lineEnd = text.length), chars += String.fromCharCode(lineArrayLength), lineHash[line] = lineArrayLength, lineArray[lineArrayLength++] = line), lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  let maxLines = 4e4;\n  const chars1 = diffLinesToMunge(textA);\n  maxLines = 65535;\n  const chars2 = diffLinesToMunge(textB);\n  return { chars1, chars2, lineArray };\n}\nfunction doLineModeDiff(textA, textB, opts) {\n  let text1 = textA, text2 = textB;\n  const a = linesToChars(text1, text2);\n  text1 = a.chars1, text2 = a.chars2;\n  const linearray = a.lineArray;\n  let diffs = doDiff(text1, text2, {\n    checkLines: !1,\n    deadline: opts.deadline\n  });\n  charsToLines(diffs, linearray), diffs = cleanupSemantic(diffs), diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\";\n  for (; pointer < diffs.length; ) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++, textInsert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        countDelete++, textDelete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        if (countDelete >= 1 && countInsert >= 1) {\n          diffs.splice(pointer - countDelete - countInsert, countDelete + countInsert), pointer = pointer - countDelete - countInsert;\n          const aa = doDiff(textDelete, textInsert, {\n            checkLines: !1,\n            deadline: opts.deadline\n          });\n          for (let j = aa.length - 1; j >= 0; j--)\n            diffs.splice(pointer, 0, aa[j]);\n          pointer += aa.length;\n        }\n        countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n    pointer++;\n  }\n  return diffs.pop(), diffs;\n}\nfunction computeDiff(text1, text2, opts) {\n  let diffs;\n  if (!text1)\n    return [[DIFF_INSERT, text2]];\n  if (!text2)\n    return [[DIFF_DELETE, text1]];\n  const longtext = text1.length > text2.length ? text1 : text2, shorttext = text1.length > text2.length ? text2 : text1, i = longtext.indexOf(shorttext);\n  if (i !== -1)\n    return diffs = [\n      [DIFF_INSERT, longtext.substring(0, i)],\n      [DIFF_EQUAL, shorttext],\n      [DIFF_INSERT, longtext.substring(i + shorttext.length)]\n    ], text1.length > text2.length && (diffs[0][0] = DIFF_DELETE, diffs[2][0] = DIFF_DELETE), diffs;\n  if (shorttext.length === 1)\n    return [\n      [DIFF_DELETE, text1],\n      [DIFF_INSERT, text2]\n    ];\n  const halfMatch = findHalfMatch(text1, text2);\n  if (halfMatch) {\n    const text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3], midCommon = halfMatch[4], diffsA = doDiff(text1A, text2A, opts), diffsB = doDiff(text1B, text2B, opts);\n    return diffsA.concat([[DIFF_EQUAL, midCommon]], diffsB);\n  }\n  return opts.checkLines && text1.length > 100 && text2.length > 100 ? doLineModeDiff(text1, text2, opts) : bisect(text1, text2, opts.deadline);\n}\nvar __defProp$2 = Object.defineProperty, __getOwnPropSymbols$2 = Object.getOwnPropertySymbols, __hasOwnProp$2 = Object.prototype.hasOwnProperty, __propIsEnum$2 = Object.prototype.propertyIsEnumerable, __defNormalProp$2 = (obj, key, value) => key in obj ? __defProp$2(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues$2 = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  if (__getOwnPropSymbols$2)\n    for (var prop of __getOwnPropSymbols$2(b))\n      __propIsEnum$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  return a;\n};\nconst DIFF_DELETE = -1, DIFF_INSERT = 1, DIFF_EQUAL = 0;\nfunction diff(textA, textB, opts) {\n  if (textA === null || textB === null)\n    throw new Error(\"Null input. (diff)\");\n  const diffs = doDiff(textA, textB, createInternalOpts(opts || {}));\n  return adjustDiffForSurrogatePairs(diffs), diffs;\n}\nfunction doDiff(textA, textB, options) {\n  let text1 = textA, text2 = textB;\n  if (text1 === text2)\n    return text1 ? [[DIFF_EQUAL, text1]] : [];\n  let commonlength = getCommonPrefix(text1, text2);\n  const commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength), text2 = text2.substring(commonlength), commonlength = getCommonSuffix(text1, text2);\n  const commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength), text2 = text2.substring(0, text2.length - commonlength);\n  let diffs = computeDiff(text1, text2, options);\n  return commonprefix && diffs.unshift([DIFF_EQUAL, commonprefix]), commonsuffix && diffs.push([DIFF_EQUAL, commonsuffix]), diffs = cleanupMerge(diffs), diffs;\n}\nfunction createDeadLine(timeout) {\n  let t = 1;\n  return typeof timeout < \"u\" && (t = timeout <= 0 ? Number.MAX_VALUE : timeout), Date.now() + t * 1e3;\n}\nfunction createInternalOpts(opts) {\n  return __spreadValues$2({\n    checkLines: !0,\n    deadline: createDeadLine(opts.timeout || 1)\n  }, opts);\n}\nfunction combineChar(data, char, dir) {\n  return dir === 1 ? data + char : char + data;\n}\nfunction splitChar(data, dir) {\n  return dir === 1 ? [data.substring(0, data.length - 1), data[data.length - 1]] : [data.substring(1), data[0]];\n}\nfunction hasSharedChar(diffs, i, j, dir) {\n  return dir === 1 ? diffs[i][1][diffs[i][1].length - 1] === diffs[j][1][diffs[j][1].length - 1] : diffs[i][1][0] === diffs[j][1][0];\n}\nfunction deisolateChar(diffs, i, dir) {\n  const inv = dir === 1 ? -1 : 1;\n  let insertIdx = null, deleteIdx = null, j = i + dir;\n  for (; j >= 0 && j < diffs.length && (insertIdx === null || deleteIdx === null); j += dir) {\n    const [op, text2] = diffs[j];\n    if (text2.length !== 0) {\n      if (op === DIFF_INSERT) {\n        insertIdx === null && (insertIdx = j);\n        continue;\n      } else if (op === DIFF_DELETE) {\n        deleteIdx === null && (deleteIdx = j);\n        continue;\n      } else if (op === DIFF_EQUAL) {\n        if (insertIdx === null && deleteIdx === null) {\n          const [rest, char2] = splitChar(diffs[i][1], dir);\n          diffs[i][1] = rest, diffs[j][1] = combineChar(diffs[j][1], char2, inv);\n          return;\n        }\n        break;\n      }\n    }\n  }\n  if (insertIdx !== null && deleteIdx !== null && hasSharedChar(diffs, insertIdx, deleteIdx, dir)) {\n    const [insertText, insertChar] = splitChar(diffs[insertIdx][1], inv), [deleteText] = splitChar(diffs[deleteIdx][1], inv);\n    diffs[insertIdx][1] = insertText, diffs[deleteIdx][1] = deleteText, diffs[i][1] = combineChar(diffs[i][1], insertChar, dir);\n    return;\n  }\n  const [text, char] = splitChar(diffs[i][1], dir);\n  diffs[i][1] = text, insertIdx === null ? (diffs.splice(j, 0, [DIFF_INSERT, char]), deleteIdx !== null && deleteIdx >= j && deleteIdx++) : diffs[insertIdx][1] = combineChar(diffs[insertIdx][1], char, inv), deleteIdx === null ? diffs.splice(j, 0, [DIFF_DELETE, char]) : diffs[deleteIdx][1] = combineChar(diffs[deleteIdx][1], char, inv);\n}\nfunction adjustDiffForSurrogatePairs(diffs) {\n  for (let i = 0; i < diffs.length; i++) {\n    const [diffType, diffText] = diffs[i];\n    if (diffText.length === 0) continue;\n    const firstChar = diffText[0], lastChar = diffText[diffText.length - 1];\n    isHighSurrogate(lastChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, 1), isLowSurrogate(firstChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, -1);\n  }\n  for (let i = 0; i < diffs.length; i++)\n    diffs[i][1].length === 0 && diffs.splice(i, 1);\n}\nfunction cleanupSemantic(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0;\n  for (; pointer < diffs.length; )\n    diffs[pointer][0] === DIFF_EQUAL ? (equalities[equalitiesLength++] = pointer, lengthInsertions1 = lengthInsertions2, lengthDeletions1 = lengthDeletions2, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = diffs[pointer][1]) : (diffs[pointer][0] === DIFF_INSERT ? lengthInsertions2 += diffs[pointer][1].length : lengthDeletions2 += diffs[pointer][1].length, lastEquality && lastEquality.length <= Math.max(lengthInsertions1, lengthDeletions1) && lastEquality.length <= Math.max(lengthInsertions2, lengthDeletions2) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = null, hasChanges = !0)), pointer++;\n  for (hasChanges && (diffs = cleanupMerge(diffs)), diffs = cleanupSemanticLossless(diffs), pointer = 1; pointer < diffs.length; ) {\n    if (diffs[pointer - 1][0] === DIFF_DELETE && diffs[pointer][0] === DIFF_INSERT) {\n      const deletion = diffs[pointer - 1][1], insertion = diffs[pointer][1], overlapLength1 = getCommonOverlap(deletion, insertion), overlapLength2 = getCommonOverlap(insertion, deletion);\n      overlapLength1 >= overlapLength2 ? (overlapLength1 >= deletion.length / 2 || overlapLength1 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, insertion.substring(0, overlapLength1)]), diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlapLength1), diffs[pointer + 1][1] = insertion.substring(overlapLength1), pointer++) : (overlapLength2 >= deletion.length / 2 || overlapLength2 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, deletion.substring(0, overlapLength2)]), diffs[pointer - 1][0] = DIFF_INSERT, diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlapLength2), diffs[pointer + 1][0] = DIFF_DELETE, diffs[pointer + 1][1] = deletion.substring(overlapLength2), pointer++), pointer++;\n    }\n    pointer++;\n  }\n  return diffs;\n}\nconst nonAlphaNumericRegex = /[^a-zA-Z0-9]/, whitespaceRegex = /\\s/, linebreakRegex = /[\\r\\n]/, blanklineEndRegex = /\\n\\r?\\n$/, blanklineStartRegex = /^\\r?\\n\\r?\\n/;\nfunction cleanupSemanticLossless(rawDiffs) {\n  const diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  function diffCleanupSemanticScore(one, two) {\n    if (!one || !two)\n      return 6;\n    const char1 = one.charAt(one.length - 1), char2 = two.charAt(0), nonAlphaNumeric1 = char1.match(nonAlphaNumericRegex), nonAlphaNumeric2 = char2.match(nonAlphaNumericRegex), whitespace1 = nonAlphaNumeric1 && char1.match(whitespaceRegex), whitespace2 = nonAlphaNumeric2 && char2.match(whitespaceRegex), lineBreak1 = whitespace1 && char1.match(linebreakRegex), lineBreak2 = whitespace2 && char2.match(linebreakRegex), blankLine1 = lineBreak1 && one.match(blanklineEndRegex), blankLine2 = lineBreak2 && two.match(blanklineStartRegex);\n    return blankLine1 || blankLine2 ? 5 : lineBreak1 || lineBreak2 ? 4 : nonAlphaNumeric1 && !whitespace1 && whitespace2 ? 3 : whitespace1 || whitespace2 ? 2 : nonAlphaNumeric1 || nonAlphaNumeric2 ? 1 : 0;\n  }\n  let pointer = 1;\n  for (; pointer < diffs.length - 1; ) {\n    if (diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL) {\n      let equality1 = diffs[pointer - 1][1], edit = diffs[pointer][1], equality2 = diffs[pointer + 1][1];\n      const commonOffset = getCommonSuffix(equality1, edit);\n      if (commonOffset) {\n        const commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset), edit = commonString + edit.substring(0, edit.length - commonOffset), equality2 = commonString + equality2;\n      }\n      let bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2, bestScore = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n      for (; edit.charAt(0) === equality2.charAt(0); ) {\n        equality1 += edit.charAt(0), edit = edit.substring(1) + equality2.charAt(0), equality2 = equality2.substring(1);\n        const score = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n        score >= bestScore && (bestScore = score, bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2);\n      }\n      diffs[pointer - 1][1] !== bestEquality1 && (bestEquality1 ? diffs[pointer - 1][1] = bestEquality1 : (diffs.splice(pointer - 1, 1), pointer--), diffs[pointer][1] = bestEdit, bestEquality2 ? diffs[pointer + 1][1] = bestEquality2 : (diffs.splice(pointer + 1, 1), pointer--));\n    }\n    pointer++;\n  }\n  return diffs;\n}\nfunction cleanupMerge(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\", commonlength;\n  for (; pointer < diffs.length; )\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++, textInsert += diffs[pointer][1], pointer++;\n        break;\n      case DIFF_DELETE:\n        countDelete++, textDelete += diffs[pointer][1], pointer++;\n        break;\n      case DIFF_EQUAL:\n        countDelete + countInsert > 1 ? (countDelete !== 0 && countInsert !== 0 && (commonlength = getCommonPrefix(textInsert, textDelete), commonlength !== 0 && (pointer - countDelete - countInsert > 0 && diffs[pointer - countDelete - countInsert - 1][0] === DIFF_EQUAL ? diffs[pointer - countDelete - countInsert - 1][1] += textInsert.substring(\n          0,\n          commonlength\n        ) : (diffs.splice(0, 0, [DIFF_EQUAL, textInsert.substring(0, commonlength)]), pointer++), textInsert = textInsert.substring(commonlength), textDelete = textDelete.substring(commonlength)), commonlength = getCommonSuffix(textInsert, textDelete), commonlength !== 0 && (diffs[pointer][1] = textInsert.substring(textInsert.length - commonlength) + diffs[pointer][1], textInsert = textInsert.substring(0, textInsert.length - commonlength), textDelete = textDelete.substring(0, textDelete.length - commonlength))), pointer -= countDelete + countInsert, diffs.splice(pointer, countDelete + countInsert), textDelete.length && (diffs.splice(pointer, 0, [DIFF_DELETE, textDelete]), pointer++), textInsert.length && (diffs.splice(pointer, 0, [DIFF_INSERT, textInsert]), pointer++), pointer++) : pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL ? (diffs[pointer - 1][1] += diffs[pointer][1], diffs.splice(pointer, 1)) : pointer++, countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation\");\n    }\n  diffs[diffs.length - 1][1] === \"\" && diffs.pop();\n  let hasChanges = !1;\n  for (pointer = 1; pointer < diffs.length - 1; )\n    diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL && (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) === diffs[pointer - 1][1] ? (diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length), diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1], diffs.splice(pointer - 1, 1), hasChanges = !0) : diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) === diffs[pointer + 1][1] && (diffs[pointer - 1][1] += diffs[pointer + 1][1], diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1], diffs.splice(pointer + 1, 1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nfunction trueCount(...args) {\n  return args.reduce((n, bool) => n + (bool ? 1 : 0), 0);\n}\nfunction cleanupEfficiency(rawDiffs, editCost = 4) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, preIns = !1, preDel = !1, postIns = !1, postDel = !1;\n  for (; pointer < diffs.length; )\n    diffs[pointer][0] === DIFF_EQUAL ? (diffs[pointer][1].length < editCost && (postIns || postDel) ? (equalities[equalitiesLength++] = pointer, preIns = postIns, preDel = postDel, lastEquality = diffs[pointer][1]) : (equalitiesLength = 0, lastEquality = null), postIns = !1, postDel = !1) : (diffs[pointer][0] === DIFF_DELETE ? postDel = !0 : postIns = !0, lastEquality && (preIns && preDel && postIns && postDel || lastEquality.length < editCost / 2 && trueCount(preIns, preDel, postIns, postDel) === 3) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, lastEquality = null, preIns && preDel ? (postIns = !0, postDel = !0, equalitiesLength = 0) : (equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, postIns = !1, postDel = !1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nvar __defProp$1 = Object.defineProperty, __getOwnPropSymbols$1 = Object.getOwnPropertySymbols, __hasOwnProp$1 = Object.prototype.hasOwnProperty, __propIsEnum$1 = Object.prototype.propertyIsEnumerable, __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues$1 = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  if (__getOwnPropSymbols$1)\n    for (var prop of __getOwnPropSymbols$1(b))\n      __propIsEnum$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  return a;\n};\nconst DEFAULT_OPTIONS = {\n  /**\n   * At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n   */\n  threshold: 0.5,\n  /**\n   * How far to search for a match (0 = exact location, 1000+ = broad match).\n   * A match this many characters away from the expected location will add\n   * 1.0 to the score (0.0 is a perfect match).\n   */\n  distance: 1e3\n};\nfunction applyDefaults(options) {\n  return __spreadValues$1(__spreadValues$1({}, DEFAULT_OPTIONS), options);\n}\nconst MAX_BITS$1 = 32;\nfunction bitap(text, pattern, loc, opts = {}) {\n  if (pattern.length > MAX_BITS$1)\n    throw new Error(\"Pattern too long for this browser.\");\n  const options = applyDefaults(opts), s = getAlphabetFromPattern(pattern);\n  function getBitapScore(e, x) {\n    const accuracy = e / pattern.length, proximity = Math.abs(loc - x);\n    return options.distance ? accuracy + proximity / options.distance : proximity ? 1 : accuracy;\n  }\n  let scoreThreshold = options.threshold, bestLoc = text.indexOf(pattern, loc);\n  bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold), bestLoc = text.lastIndexOf(pattern, loc + pattern.length), bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold)));\n  const matchmask = 1 << pattern.length - 1;\n  bestLoc = -1;\n  let binMin, binMid, binMax = pattern.length + text.length, lastRd = [];\n  for (let d = 0; d < pattern.length; d++) {\n    for (binMin = 0, binMid = binMax; binMin < binMid; )\n      getBitapScore(d, loc + binMid) <= scoreThreshold ? binMin = binMid : binMax = binMid, binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    binMax = binMid;\n    let start = Math.max(1, loc - binMid + 1);\n    const finish = Math.min(loc + binMid, text.length) + pattern.length, rd = new Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (let j = finish; j >= start; j--) {\n      const charMatch = s[text.charAt(j - 1)];\n      if (d === 0 ? rd[j] = (rd[j + 1] << 1 | 1) & charMatch : rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((lastRd[j + 1] | lastRd[j]) << 1 | 1) | lastRd[j + 1], rd[j] & matchmask) {\n        const score = getBitapScore(d, j - 1);\n        if (score <= scoreThreshold)\n          if (scoreThreshold = score, bestLoc = j - 1, bestLoc > loc)\n            start = Math.max(1, 2 * loc - bestLoc);\n          else\n            break;\n      }\n    }\n    if (getBitapScore(d + 1, loc) > scoreThreshold)\n      break;\n    lastRd = rd;\n  }\n  return bestLoc;\n}\nfunction getAlphabetFromPattern(pattern) {\n  const s = {};\n  for (let i = 0; i < pattern.length; i++)\n    s[pattern.charAt(i)] = 0;\n  for (let i = 0; i < pattern.length; i++)\n    s[pattern.charAt(i)] |= 1 << pattern.length - i - 1;\n  return s;\n}\nfunction match(text, pattern, searchLocation, options = {}) {\n  if (text === null || pattern === null || searchLocation === null)\n    throw new Error(\"Null input. (match())\");\n  const loc = Math.max(0, Math.min(searchLocation, text.length));\n  if (text === pattern)\n    return 0;\n  if (text.length) {\n    if (text.substring(loc, loc + pattern.length) === pattern)\n      return loc;\n  } else return -1;\n  return bitap(text, pattern, loc, options);\n}\nfunction diffText1(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++)\n    diffs[x][0] !== DIFF_INSERT && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction diffText2(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++)\n    diffs[x][0] !== DIFF_DELETE && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction levenshtein(diffs) {\n  let leven = 0, insertions = 0, deletions = 0;\n  for (let x = 0; x < diffs.length; x++) {\n    const op = diffs[x][0], data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        leven += Math.max(insertions, deletions), insertions = 0, deletions = 0;\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n  }\n  return leven += Math.max(insertions, deletions), leven;\n}\nfunction xIndex(diffs, location) {\n  let chars1 = 0, chars2 = 0, lastChars1 = 0, lastChars2 = 0, x;\n  for (x = 0; x < diffs.length && (diffs[x][0] !== DIFF_INSERT && (chars1 += diffs[x][1].length), diffs[x][0] !== DIFF_DELETE && (chars2 += diffs[x][1].length), !(chars1 > location)); x++)\n    lastChars1 = chars1, lastChars2 = chars2;\n  return diffs.length !== x && diffs[x][0] === DIFF_DELETE ? lastChars2 : lastChars2 + (location - lastChars1);\n}\nfunction countUtf8Bytes(str) {\n  let bytes = 0;\n  for (let i = 0; i < str.length; i++) {\n    const codePoint = str.codePointAt(i);\n    if (typeof codePoint > \"u\")\n      throw new Error(\"Failed to get codepoint\");\n    bytes += utf8len(codePoint);\n  }\n  return bytes;\n}\nfunction adjustIndiciesToUcs2(patches, base, options = {}) {\n  let byteOffset = 0, idx = 0;\n  function advanceTo(target) {\n    for (; byteOffset < target; ) {\n      const codePoint = base.codePointAt(idx);\n      if (typeof codePoint > \"u\")\n        return idx;\n      byteOffset += utf8len(codePoint), codePoint > 65535 ? idx += 2 : idx += 1;\n    }\n    if (!options.allowExceedingIndices && byteOffset !== target)\n      throw new Error(\"Failed to determine byte offset\");\n    return idx;\n  }\n  const adjusted = [];\n  for (const patch of patches)\n    adjusted.push({\n      diffs: patch.diffs.map((diff2) => cloneDiff(diff2)),\n      start1: advanceTo(patch.start1),\n      start2: advanceTo(patch.start2),\n      utf8Start1: patch.utf8Start1,\n      utf8Start2: patch.utf8Start2,\n      length1: patch.length1,\n      length2: patch.length2,\n      utf8Length1: patch.utf8Length1,\n      utf8Length2: patch.utf8Length2\n    });\n  return adjusted;\n}\nfunction utf8len(codePoint) {\n  return codePoint <= 127 ? 1 : codePoint <= 2047 ? 2 : codePoint <= 65535 ? 3 : 4;\n}\nconst MAX_BITS = 32, DEFAULT_MARGIN = 4;\nfunction addPadding(patches, margin = DEFAULT_MARGIN) {\n  const paddingLength = margin;\n  let nullPadding = \"\";\n  for (let x = 1; x <= paddingLength; x++)\n    nullPadding += String.fromCharCode(x);\n  for (const p of patches)\n    p.start1 += paddingLength, p.start2 += paddingLength, p.utf8Start1 += paddingLength, p.utf8Start2 += paddingLength;\n  let patch = patches[0], diffs = patch.diffs;\n  if (diffs.length === 0 || diffs[0][0] !== DIFF_EQUAL)\n    diffs.unshift([DIFF_EQUAL, nullPadding]), patch.start1 -= paddingLength, patch.start2 -= paddingLength, patch.utf8Start1 -= paddingLength, patch.utf8Start2 -= paddingLength, patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[0][1].length) {\n    const firstDiffLength = diffs[0][1].length, extraLength = paddingLength - firstDiffLength;\n    diffs[0][1] = nullPadding.substring(firstDiffLength) + diffs[0][1], patch.start1 -= extraLength, patch.start2 -= extraLength, patch.utf8Start1 -= extraLength, patch.utf8Start2 -= extraLength, patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  if (patch = patches[patches.length - 1], diffs = patch.diffs, diffs.length === 0 || diffs[diffs.length - 1][0] !== DIFF_EQUAL)\n    diffs.push([DIFF_EQUAL, nullPadding]), patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    const extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength), patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  return nullPadding;\n}\nfunction createPatchObject(start1, start2) {\n  return {\n    diffs: [],\n    start1,\n    start2,\n    utf8Start1: start1,\n    utf8Start2: start2,\n    length1: 0,\n    length2: 0,\n    utf8Length1: 0,\n    utf8Length2: 0\n  };\n}\nfunction splitMax(patches, margin = DEFAULT_MARGIN) {\n  const patchSize = MAX_BITS;\n  for (let x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patchSize)\n      continue;\n    const bigpatch = patches[x];\n    patches.splice(x--, 1);\n    let start1 = bigpatch.start1, start2 = bigpatch.start2, preContext = \"\";\n    for (; bigpatch.diffs.length !== 0; ) {\n      const patch = createPatchObject(start1 - preContext.length, start2 - preContext.length);\n      let empty = !0;\n      if (preContext !== \"\") {\n        const precontextByteCount = countUtf8Bytes(preContext);\n        patch.length1 = preContext.length, patch.utf8Length1 = precontextByteCount, patch.length2 = preContext.length, patch.utf8Length2 = precontextByteCount, patch.diffs.push([DIFF_EQUAL, preContext]);\n      }\n      for (; bigpatch.diffs.length !== 0 && patch.length1 < patchSize - margin; ) {\n        const diffType = bigpatch.diffs[0][0];\n        let diffText = bigpatch.diffs[0][1], diffTextByteCount = countUtf8Bytes(diffText);\n        if (diffType === DIFF_INSERT) {\n          patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length;\n          const diff2 = bigpatch.diffs.shift();\n          diff2 && patch.diffs.push(diff2), empty = !1;\n        } else diffType === DIFF_DELETE && patch.diffs.length === 1 && patch.diffs[0][0] === DIFF_EQUAL && diffText.length > 2 * patchSize ? (patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, empty = !1, patch.diffs.push([diffType, diffText]), bigpatch.diffs.shift()) : (diffText = diffText.substring(0, patchSize - patch.length1 - margin), diffTextByteCount = countUtf8Bytes(diffText), patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, diffType === DIFF_EQUAL ? (patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length) : empty = !1, patch.diffs.push([diffType, diffText]), diffText === bigpatch.diffs[0][1] ? bigpatch.diffs.shift() : bigpatch.diffs[0][1] = bigpatch.diffs[0][1].substring(diffText.length));\n      }\n      preContext = diffText2(patch.diffs), preContext = preContext.substring(preContext.length - margin);\n      const postContext = diffText1(bigpatch.diffs).substring(0, margin), postContextByteCount = countUtf8Bytes(postContext);\n      postContext !== \"\" && (patch.length1 += postContext.length, patch.length2 += postContext.length, patch.utf8Length1 += postContextByteCount, patch.utf8Length2 += postContextByteCount, patch.diffs.length !== 0 && patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL ? patch.diffs[patch.diffs.length - 1][1] += postContext : patch.diffs.push([DIFF_EQUAL, postContext])), empty || patches.splice(++x, 0, patch);\n    }\n  }\n}\nfunction apply(patches, originalText, opts = {}) {\n  if (typeof patches == \"string\")\n    throw new Error(\"Patches must be an array - pass the patch to `parsePatch()` first\");\n  let text = originalText;\n  if (patches.length === 0)\n    return [text, []];\n  const parsed = adjustIndiciesToUcs2(patches, text, {\n    allowExceedingIndices: opts.allowExceedingIndices\n  }), margin = opts.margin || DEFAULT_MARGIN, deleteThreshold = opts.deleteThreshold || 0.4, nullPadding = addPadding(parsed, margin);\n  text = nullPadding + text + nullPadding, splitMax(parsed, margin);\n  let delta = 0;\n  const results = [];\n  for (let x = 0; x < parsed.length; x++) {\n    const expectedLoc = parsed[x].start2 + delta, text1 = diffText1(parsed[x].diffs);\n    let startLoc, endLoc = -1;\n    if (text1.length > MAX_BITS ? (startLoc = match(text, text1.substring(0, MAX_BITS), expectedLoc), startLoc !== -1 && (endLoc = match(\n      text,\n      text1.substring(text1.length - MAX_BITS),\n      expectedLoc + text1.length - MAX_BITS\n    ), (endLoc === -1 || startLoc >= endLoc) && (startLoc = -1))) : startLoc = match(text, text1, expectedLoc), startLoc === -1)\n      results[x] = !1, delta -= parsed[x].length2 - parsed[x].length1;\n    else {\n      results[x] = !0, delta = startLoc - expectedLoc;\n      let text2;\n      if (endLoc === -1 ? text2 = text.substring(startLoc, startLoc + text1.length) : text2 = text.substring(startLoc, endLoc + MAX_BITS), text1 === text2)\n        text = text.substring(0, startLoc) + diffText2(parsed[x].diffs) + text.substring(startLoc + text1.length);\n      else {\n        let diffs = diff(text1, text2, { checkLines: !1 });\n        if (text1.length > MAX_BITS && levenshtein(diffs) / text1.length > deleteThreshold)\n          results[x] = !1;\n        else {\n          diffs = cleanupSemanticLossless(diffs);\n          let index1 = 0, index2 = 0;\n          for (let y = 0; y < parsed[x].diffs.length; y++) {\n            const mod = parsed[x].diffs[y];\n            mod[0] !== DIFF_EQUAL && (index2 = xIndex(diffs, index1)), mod[0] === DIFF_INSERT ? text = text.substring(0, startLoc + index2) + mod[1] + text.substring(startLoc + index2) : mod[0] === DIFF_DELETE && (text = text.substring(0, startLoc + index2) + text.substring(startLoc + xIndex(diffs, index1 + mod[1].length))), mod[0] !== DIFF_DELETE && (index1 += mod[1].length);\n          }\n        }\n      }\n    }\n  }\n  return text = text.substring(nullPadding.length, text.length - nullPadding.length), [text, results];\n}\nvar __defProp = Object.defineProperty, __getOwnPropSymbols = Object.getOwnPropertySymbols, __hasOwnProp = Object.prototype.hasOwnProperty, __propIsEnum = Object.prototype.propertyIsEnumerable, __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp.call(b, prop) && __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b))\n      __propIsEnum.call(b, prop) && __defNormalProp(a, prop, b[prop]);\n  return a;\n};\nconst DEFAULT_OPTS = {\n  margin: 4\n};\nfunction getDefaultOpts(opts = {}) {\n  return __spreadValues(__spreadValues({}, DEFAULT_OPTS), opts);\n}\nfunction make(a, b, options) {\n  if (typeof a == \"string\" && typeof b == \"string\") {\n    let diffs = diff(a, b, { checkLines: !0 });\n    return diffs.length > 2 && (diffs = cleanupSemantic(diffs), diffs = cleanupEfficiency(diffs)), _make(a, diffs, getDefaultOpts(options));\n  }\n  if (a && Array.isArray(a) && typeof b > \"u\")\n    return _make(diffText1(a), a, getDefaultOpts(options));\n  if (typeof a == \"string\" && b && Array.isArray(b))\n    return _make(a, b, getDefaultOpts(options));\n  throw new Error(\"Unknown call format to make()\");\n}\nfunction _make(textA, diffs, options) {\n  if (diffs.length === 0)\n    return [];\n  const patches = [];\n  let patch = createPatchObject(0, 0), patchDiffLength = 0, charCount1 = 0, charCount2 = 0, utf8Count1 = 0, utf8Count2 = 0, prepatchText = textA, postpatchText = textA;\n  for (let x = 0; x < diffs.length; x++) {\n    const currentDiff = diffs[x], [diffType, diffText] = currentDiff, diffTextLength = diffText.length, diffByteLength = countUtf8Bytes(diffText);\n    switch (!patchDiffLength && diffType !== DIFF_EQUAL && (patch.start1 = charCount1, patch.start2 = charCount2, patch.utf8Start1 = utf8Count1, patch.utf8Start2 = utf8Count2), diffType) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = currentDiff, patch.length2 += diffTextLength, patch.utf8Length2 += diffByteLength, postpatchText = postpatchText.substring(0, charCount2) + diffText + postpatchText.substring(charCount2);\n        break;\n      case DIFF_DELETE:\n        patch.length1 += diffTextLength, patch.utf8Length1 += diffByteLength, patch.diffs[patchDiffLength++] = currentDiff, postpatchText = postpatchText.substring(0, charCount2) + postpatchText.substring(charCount2 + diffTextLength);\n        break;\n      case DIFF_EQUAL:\n        diffTextLength <= 2 * options.margin && patchDiffLength && diffs.length !== x + 1 ? (patch.diffs[patchDiffLength++] = currentDiff, patch.length1 += diffTextLength, patch.length2 += diffTextLength, patch.utf8Length1 += diffByteLength, patch.utf8Length2 += diffByteLength) : diffTextLength >= 2 * options.margin && patchDiffLength && (addContext(patch, prepatchText, options), patches.push(patch), patch = createPatchObject(-1, -1), patchDiffLength = 0, prepatchText = postpatchText, charCount1 = charCount2, utf8Count1 = utf8Count2);\n        break;\n      default:\n        throw new Error(\"Unknown diff type\");\n    }\n    diffType !== DIFF_INSERT && (charCount1 += diffTextLength, utf8Count1 += diffByteLength), diffType !== DIFF_DELETE && (charCount2 += diffTextLength, utf8Count2 += diffByteLength);\n  }\n  return patchDiffLength && (addContext(patch, prepatchText, options), patches.push(patch)), patches;\n}\nfunction addContext(patch, text, opts) {\n  if (text.length === 0)\n    return;\n  let pattern = text.substring(patch.start2, patch.start2 + patch.length1), padding = 0;\n  for (; text.indexOf(pattern) !== text.lastIndexOf(pattern) && pattern.length < MAX_BITS - opts.margin - opts.margin; )\n    padding += opts.margin, pattern = text.substring(patch.start2 - padding, patch.start2 + patch.length1 + padding);\n  padding += opts.margin;\n  let prefixStart = patch.start2 - padding;\n  prefixStart >= 1 && isLowSurrogate(text[prefixStart]) && prefixStart--;\n  const prefix = text.substring(prefixStart, patch.start2);\n  prefix && patch.diffs.unshift([DIFF_EQUAL, prefix]);\n  const prefixLength = prefix.length, prefixUtf8Length = countUtf8Bytes(prefix);\n  let suffixEnd = patch.start2 + patch.length1 + padding;\n  suffixEnd < text.length && isLowSurrogate(text[suffixEnd]) && suffixEnd++;\n  const suffix = text.substring(patch.start2 + patch.length1, suffixEnd);\n  suffix && patch.diffs.push([DIFF_EQUAL, suffix]);\n  const suffixLength = suffix.length, suffixUtf8Length = countUtf8Bytes(suffix);\n  patch.start1 -= prefixLength, patch.start2 -= prefixLength, patch.utf8Start1 -= prefixUtf8Length, patch.utf8Start2 -= prefixUtf8Length, patch.length1 += prefixLength + suffixLength, patch.length2 += prefixLength + suffixLength, patch.utf8Length1 += prefixUtf8Length + suffixUtf8Length, patch.utf8Length2 += prefixUtf8Length + suffixUtf8Length;\n}\nconst patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\nfunction parse(textline) {\n  if (!textline)\n    return [];\n  const patches = [], lines = textline.split(`\n`);\n  let textPointer = 0;\n  for (; textPointer < lines.length; ) {\n    const m = lines[textPointer].match(patchHeader);\n    if (!m)\n      throw new Error(`Invalid patch string: ${lines[textPointer]}`);\n    const patch = createPatchObject(toInt(m[1]), toInt(m[3]));\n    for (patches.push(patch), m[2] === \"\" ? (patch.start1--, patch.utf8Start1--, patch.length1 = 1, patch.utf8Length1 = 1) : m[2] === \"0\" ? (patch.length1 = 0, patch.utf8Length1 = 0) : (patch.start1--, patch.utf8Start1--, patch.utf8Length1 = toInt(m[2]), patch.length1 = patch.utf8Length1), m[4] === \"\" ? (patch.start2--, patch.utf8Start2--, patch.length2 = 1, patch.utf8Length2 = 1) : m[4] === \"0\" ? (patch.length2 = 0, patch.utf8Length2 = 0) : (patch.start2--, patch.utf8Start2--, patch.utf8Length2 = toInt(m[4]), patch.length2 = patch.utf8Length2), textPointer++; textPointer < lines.length; ) {\n      const currentLine = lines[textPointer], sign = currentLine.charAt(0);\n      if (sign === \"@\")\n        break;\n      if (sign === \"\") {\n        textPointer++;\n        continue;\n      }\n      let line;\n      try {\n        line = decodeURI(currentLine.slice(1));\n      } catch (ex) {\n        throw new Error(`Illegal escape in parse: ${currentLine}`);\n      }\n      const utf8Diff = countUtf8Bytes(line) - line.length;\n      if (sign === \"-\")\n        patch.diffs.push([DIFF_DELETE, line]), patch.length1 -= utf8Diff;\n      else if (sign === \"+\")\n        patch.diffs.push([DIFF_INSERT, line]), patch.length2 -= utf8Diff;\n      else if (sign === \" \")\n        patch.diffs.push([DIFF_EQUAL, line]), patch.length1 -= utf8Diff, patch.length2 -= utf8Diff;\n      else\n        throw new Error(`Invalid patch mode \"${sign}\" in: ${line}`);\n      textPointer++;\n    }\n  }\n  return patches;\n}\nfunction toInt(num) {\n  return parseInt(num, 10);\n}\nfunction stringify(patches) {\n  return patches.map(stringifyPatch).join(\"\");\n}\nfunction stringifyPatch(patch) {\n  const { utf8Length1, utf8Length2, utf8Start1, utf8Start2, diffs } = patch;\n  let coords1;\n  utf8Length1 === 0 ? coords1 = `${utf8Start1},0` : utf8Length1 === 1 ? coords1 = `${utf8Start1 + 1}` : coords1 = `${utf8Start1 + 1},${utf8Length1}`;\n  let coords2;\n  utf8Length2 === 0 ? coords2 = `${utf8Start2},0` : utf8Length2 === 1 ? coords2 = `${utf8Start2 + 1}` : coords2 = `${utf8Start2 + 1},${utf8Length2}`;\n  const text = [`@@ -${coords1} +${coords2} @@\n`];\n  let op;\n  for (let x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        op = \"+\";\n        break;\n      case DIFF_DELETE:\n        op = \"-\";\n        break;\n      case DIFF_EQUAL:\n        op = \" \";\n        break;\n      default:\n        throw new Error(\"Unknown patch operation.\");\n    }\n    text[x + 1] = `${op + encodeURI(diffs[x][1])}\n`;\n  }\n  return text.join(\"\").replace(/%20/g, \" \");\n}\nexport {\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  adjustIndiciesToUcs2,\n  apply as applyPatches,\n  cleanupEfficiency,\n  cleanupSemantic,\n  diff as makeDiff,\n  make as makePatches,\n  match,\n  parse as parsePatch,\n  stringifyPatch,\n  stringify as stringifyPatches,\n  xIndex\n};\n//# sourceMappingURL=index.js.map\n","import type {Editor} from 'slate'\nimport {defaultKeyGenerator} from './key-generator'\n\nconst CURRENT_UNDO_STEP: WeakMap<Editor, {undoStepId: string} | undefined> =\n  new WeakMap()\n\nexport function withUndoStep(editor: Editor, fn: () => void) {\n  const current = CURRENT_UNDO_STEP.get(editor)\n\n  if (current) {\n    fn()\n    return\n  }\n\n  CURRENT_UNDO_STEP.set(\n    editor,\n    current ?? {\n      undoStepId: defaultKeyGenerator(),\n    },\n  )\n  fn()\n  CURRENT_UNDO_STEP.set(editor, undefined)\n}\n\nexport function getCurrentUndoStepId(editor: Editor) {\n  return CURRENT_UNDO_STEP.get(editor)?.undoStepId\n}\n","/**\n * This plugin will make the editor support undo/redo on the local state only.\n * The undo/redo steps are rebased against incoming patches since the step occurred.\n */\n\nimport type {Patch} from '@portabletext/patches'\nimport {\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  parsePatch,\n} from '@sanity/diff-match-patch'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {flatten, isEqual} from 'lodash'\nimport {\n  Editor,\n  Operation,\n  Path,\n  Transforms,\n  type Descendant,\n  type SelectionOperation,\n} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {fromSlateValue} from '../../internal-utils/values'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {\n  isRedoing,\n  isUndoing,\n  setIsRedoing,\n  setIsUndoing,\n  withRedoing,\n  withUndoing,\n} from '../../internal-utils/withUndoRedo'\nimport type {BehaviorOperationImplementation} from '../../operations/behavior.operations'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {getCurrentUndoStepId} from '../with-undo-step'\n\nconst debug = debugWithName('plugin:withUndoRedo')\nconst debugVerbose = debug.enabled && false\n\nconst SAVING = new WeakMap<Editor, boolean | undefined>()\nconst REMOTE_PATCHES = new WeakMap<\n  Editor,\n  {\n    patch: Patch\n    time: Date\n    snapshot: PortableTextBlock[] | undefined\n    previousSnapshot: PortableTextBlock[] | undefined\n  }[]\n>()\nconst UNDO_STEP_LIMIT = 1000\n\nconst isSaving = (editor: Editor): boolean | undefined => {\n  const state = SAVING.get(editor)\n  return state === undefined ? true : state\n}\n\nexport interface Options {\n  editorActor: EditorActor\n  subscriptions: Array<() => () => void>\n}\n\nconst getRemotePatches = (editor: Editor) => {\n  if (!REMOTE_PATCHES.get(editor)) {\n    REMOTE_PATCHES.set(editor, [])\n  }\n  return REMOTE_PATCHES.get(editor) || []\n}\n\nexport function createWithUndoRedo(\n  options: Options,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const {editorActor} = options\n\n  return (editor: PortableTextSlateEditor) => {\n    let previousSnapshot: PortableTextBlock[] | undefined = fromSlateValue(\n      editor.children,\n      editorActor.getSnapshot().context.schema.block.name,\n    )\n    const remotePatches = getRemotePatches(editor)\n    let previousUndoStepId = getCurrentUndoStepId(editor)\n\n    options.subscriptions.push(() => {\n      debug('Subscribing to patches')\n      const sub = editorActor.on('patches', ({patches, snapshot}) => {\n        let reset = false\n        patches.forEach((patch) => {\n          if (!reset && patch.origin !== 'local' && remotePatches) {\n            if (patch.type === 'unset' && patch.path.length === 0) {\n              debug(\n                'Someone else cleared the content, resetting undo/redo history',\n              )\n              editor.history = {undos: [], redos: []}\n              remotePatches.splice(0, remotePatches.length)\n              SAVING.set(editor, true)\n              reset = true\n              return\n            }\n            remotePatches.push({\n              patch,\n              time: new Date(),\n              snapshot,\n              previousSnapshot,\n            })\n          }\n        })\n        previousSnapshot = snapshot\n      })\n      return () => {\n        debug('Unsubscribing to patches')\n        sub.unsubscribe()\n      }\n    })\n\n    editor.history = {undos: [], redos: []}\n\n    const {apply} = editor\n\n    editor.apply = (op: Operation) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      const {operations, history} = editor\n      const {undos} = history\n      const step = undos[undos.length - 1]\n      const lastOp =\n        step && step.operations && step.operations[step.operations.length - 1]\n      const overwrite = shouldOverwrite(op, lastOp)\n      const save = isSaving(editor)\n\n      const currentUndoStepId = getCurrentUndoStepId(editor)\n\n      let merge =\n        currentUndoStepId !== undefined && previousUndoStepId === undefined\n          ? false\n          : currentUndoStepId !== undefined && previousUndoStepId !== undefined\n            ? currentUndoStepId === previousUndoStepId\n            : true\n\n      if (save) {\n        if (!step) {\n          merge = false\n        } else if (operations.length === 0) {\n          merge =\n            currentUndoStepId === undefined && previousUndoStepId === undefined\n              ? shouldMerge(op, lastOp) || overwrite\n              : merge\n        }\n\n        if (step && merge) {\n          step.operations.push(op)\n        } else {\n          const newStep = {\n            operations: [\n              ...(editor.selection === null\n                ? []\n                : [createSelectOperation(editor)]),\n              op,\n            ],\n            timestamp: new Date(),\n          }\n          undos.push(newStep)\n          debug('Created new undo step', step)\n        }\n\n        while (undos.length > UNDO_STEP_LIMIT) {\n          undos.shift()\n        }\n\n        if (shouldClear(op)) {\n          history.redos = []\n        }\n      }\n\n      previousUndoStepId = currentUndoStepId\n\n      apply(op)\n    }\n\n    // Plugin return\n    return editor\n  }\n}\n\nexport const historyUndoOperationImplementation: BehaviorOperationImplementation<\n  'history.undo'\n> = ({operation}) => {\n  const editor = operation.editor\n  const {undos} = editor.history\n  const remotePatches = getRemotePatches(editor)\n\n  if (undos.length > 0) {\n    const step = undos[undos.length - 1]\n    debug('Undoing', step)\n    if (step.operations.length > 0) {\n      const otherPatches = remotePatches.filter(\n        (item) => item.time >= step.timestamp,\n      )\n      let transformedOperations = step.operations\n      otherPatches.forEach((item) => {\n        transformedOperations = flatten(\n          transformedOperations.map((op) =>\n            transformOperation(\n              editor,\n              item.patch,\n              op,\n              item.snapshot,\n              item.previousSnapshot,\n            ),\n          ),\n        )\n      })\n      const reversedOperations = transformedOperations\n        .map(Operation.inverse)\n        .reverse()\n\n      try {\n        Editor.withoutNormalizing(editor, () => {\n          withUndoing(editor, () => {\n            withoutSaving(editor, () => {\n              reversedOperations.forEach((op) => {\n                editor.apply(op)\n              })\n            })\n          })\n        })\n      } catch (err) {\n        debug('Could not perform undo step', err)\n        remotePatches.splice(0, remotePatches.length)\n        Transforms.deselect(editor)\n        editor.history = {undos: [], redos: []}\n        SAVING.set(editor, true)\n        setIsUndoing(editor, false)\n        editor.onChange()\n        return\n      }\n      editor.history.redos.push(step)\n      editor.history.undos.pop()\n    }\n  }\n}\n\nexport const historyRedoOperationImplementation: BehaviorOperationImplementation<\n  'history.redo'\n> = ({operation}) => {\n  const editor = operation.editor\n  const {redos} = editor.history\n  const remotePatches = getRemotePatches(editor)\n\n  if (redos.length > 0) {\n    const step = redos[redos.length - 1]\n    debug('Redoing', step)\n    if (step.operations.length > 0) {\n      const otherPatches = remotePatches.filter(\n        (item) => item.time >= step.timestamp,\n      )\n      let transformedOperations = step.operations\n      otherPatches.forEach((item) => {\n        transformedOperations = flatten(\n          transformedOperations.map((op) =>\n            transformOperation(\n              editor,\n              item.patch,\n              op,\n              item.snapshot,\n              item.previousSnapshot,\n            ),\n          ),\n        )\n      })\n      try {\n        Editor.withoutNormalizing(editor, () => {\n          withRedoing(editor, () => {\n            withoutSaving(editor, () => {\n              transformedOperations.forEach((op) => {\n                editor.apply(op)\n              })\n            })\n          })\n        })\n      } catch (err) {\n        debug('Could not perform redo step', err)\n        remotePatches.splice(0, remotePatches.length)\n        Transforms.deselect(editor)\n        editor.history = {undos: [], redos: []}\n        SAVING.set(editor, true)\n        setIsRedoing(editor, false)\n        editor.onChange()\n        return\n      }\n      editor.history.undos.push(step)\n      editor.history.redos.pop()\n    }\n  }\n}\n\n/**\n * This will adjust the operation paths and offsets according to the\n * remote patches by other editors since the step operations was performed.\n */\nfunction transformOperation(\n  editor: PortableTextSlateEditor,\n  patch: Patch,\n  operation: Operation,\n  snapshot: PortableTextBlock[] | undefined,\n  previousSnapshot: PortableTextBlock[] | undefined,\n): Operation[] {\n  if (debugVerbose) {\n    debug(\n      `Adjusting '${operation.type}' operation paths for '${patch.type}' patch`,\n    )\n    debug(`Operation ${JSON.stringify(operation)}`)\n    debug(`Patch ${JSON.stringify(patch)}`)\n  }\n\n  const transformedOperation = {...operation}\n\n  if (patch.type === 'insert' && patch.path.length === 1) {\n    const insertBlockIndex = (snapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    debug(\n      `Adjusting block path (+${patch.items.length}) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n    )\n    return [\n      adjustBlockPath(\n        transformedOperation,\n        patch.items.length,\n        insertBlockIndex,\n      ),\n    ]\n  }\n\n  if (patch.type === 'unset' && patch.path.length === 1) {\n    const unsetBlockIndex = (previousSnapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    // If this operation is targeting the same block that got removed, return empty\n    if (\n      'path' in transformedOperation &&\n      Array.isArray(transformedOperation.path) &&\n      transformedOperation.path[0] === unsetBlockIndex\n    ) {\n      debug('Skipping transformation that targeted removed block')\n      return []\n    }\n    if (debugVerbose) {\n      debug(`Selection ${JSON.stringify(editor.selection)}`)\n      debug(\n        `Adjusting block path (-1) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n      )\n    }\n    return [adjustBlockPath(transformedOperation, -1, unsetBlockIndex)]\n  }\n\n  // Someone reset the whole value\n  if (patch.type === 'unset' && patch.path.length === 0) {\n    debug(\n      `Adjusting selection for unset everything patch and ${operation.type} operation`,\n    )\n    return []\n  }\n\n  if (patch.type === 'diffMatchPatch') {\n    const operationTargetBlock = findOperationTargetBlock(\n      editor,\n      transformedOperation,\n    )\n    if (\n      !operationTargetBlock ||\n      !isEqual({_key: operationTargetBlock._key}, patch.path[0])\n    ) {\n      return [transformedOperation]\n    }\n    const diffPatches = parsePatch(patch.value)\n    diffPatches.forEach((diffPatch) => {\n      let adjustOffsetBy = 0\n      let changedOffset = diffPatch.utf8Start1\n      const {diffs} = diffPatch\n      diffs.forEach((diff, index) => {\n        const [diffType, text] = diff\n        if (diffType === DIFF_INSERT) {\n          adjustOffsetBy += text.length\n          changedOffset += text.length\n        } else if (diffType === DIFF_DELETE) {\n          adjustOffsetBy -= text.length\n          changedOffset -= text.length\n        } else if (diffType === DIFF_EQUAL) {\n          // Only up to the point where there are no other changes\n          if (!diffs.slice(index).every(([dType]) => dType === DIFF_EQUAL)) {\n            changedOffset += text.length\n          }\n        }\n      })\n      // Adjust accordingly if someone inserted text in the same node before us\n      if (transformedOperation.type === 'insert_text') {\n        if (changedOffset < transformedOperation.offset) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust accordingly if someone removed text in the same node before us\n      if (transformedOperation.type === 'remove_text') {\n        if (\n          changedOffset <=\n          transformedOperation.offset - transformedOperation.text.length\n        ) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust set_selection operation's points to new offset\n      if (transformedOperation.type === 'set_selection') {\n        const currentFocus = transformedOperation.properties?.focus\n          ? {...transformedOperation.properties.focus}\n          : undefined\n        const currentAnchor = transformedOperation?.properties?.anchor\n          ? {...transformedOperation.properties.anchor}\n          : undefined\n        const newFocus = transformedOperation?.newProperties?.focus\n          ? {...transformedOperation.newProperties.focus}\n          : undefined\n        const newAnchor = transformedOperation?.newProperties?.anchor\n          ? {...transformedOperation.newProperties.anchor}\n          : undefined\n        if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n          const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n          points.forEach((point) => {\n            if (point && changedOffset < point.offset) {\n              point.offset += adjustOffsetBy\n            }\n          })\n          if (currentFocus && currentAnchor) {\n            transformedOperation.properties = {\n              focus: currentFocus,\n              anchor: currentAnchor,\n            }\n          }\n          if (newFocus && newAnchor) {\n            transformedOperation.newProperties = {\n              focus: newFocus,\n              anchor: newAnchor,\n            }\n          }\n        }\n      }\n    })\n    return [transformedOperation]\n  }\n  return [transformedOperation]\n}\n/**\n * Adjust the block path for a operation\n */\nfunction adjustBlockPath(\n  operation: Operation,\n  level: number,\n  blockIndex: number,\n): Operation {\n  const transformedOperation = {...operation}\n  if (\n    blockIndex >= 0 &&\n    transformedOperation.type !== 'set_selection' &&\n    Array.isArray(transformedOperation.path) &&\n    transformedOperation.path[0] >= blockIndex + level &&\n    transformedOperation.path[0] + level > -1\n  ) {\n    const newPath = [\n      transformedOperation.path[0] + level,\n      ...transformedOperation.path.slice(1),\n    ]\n    transformedOperation.path = newPath\n  }\n  if (transformedOperation.type === 'set_selection') {\n    const currentFocus = transformedOperation.properties?.focus\n      ? {...transformedOperation.properties.focus}\n      : undefined\n    const currentAnchor = transformedOperation?.properties?.anchor\n      ? {...transformedOperation.properties.anchor}\n      : undefined\n    const newFocus = transformedOperation?.newProperties?.focus\n      ? {...transformedOperation.newProperties.focus}\n      : undefined\n    const newAnchor = transformedOperation?.newProperties?.anchor\n      ? {...transformedOperation.newProperties.anchor}\n      : undefined\n    if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n      const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n      points.forEach((point) => {\n        if (\n          point &&\n          point.path[0] >= blockIndex + level &&\n          point.path[0] + level > -1\n        ) {\n          point.path = [point.path[0] + level, ...point.path.slice(1)]\n        }\n      })\n      if (currentFocus && currentAnchor) {\n        transformedOperation.properties = {\n          focus: currentFocus,\n          anchor: currentAnchor,\n        }\n      }\n      if (newFocus && newAnchor) {\n        transformedOperation.newProperties = {\n          focus: newFocus,\n          anchor: newAnchor,\n        }\n      }\n    }\n  }\n  //   // Assign fresh point objects (we don't want to mutate the original ones)\n  return transformedOperation\n}\n\n// Helper functions for editor.apply above\n\nconst shouldMerge = (op: Operation, prev: Operation | undefined): boolean => {\n  if (op.type === 'set_selection') {\n    return true\n  }\n\n  // Text input\n  if (\n    prev &&\n    op.type === 'insert_text' &&\n    prev.type === 'insert_text' &&\n    op.offset === prev.offset + prev.text.length &&\n    Path.equals(op.path, prev.path) &&\n    op.text !== ' ' // Tokenize between words\n  ) {\n    return true\n  }\n\n  // Text deletion\n  if (\n    prev &&\n    op.type === 'remove_text' &&\n    prev.type === 'remove_text' &&\n    op.offset + op.text.length === prev.offset &&\n    Path.equals(op.path, prev.path)\n  ) {\n    return true\n  }\n\n  // Don't merge\n  return false\n}\n\nconst shouldOverwrite = (\n  op: Operation,\n  prev: Operation | undefined,\n): boolean => {\n  if (prev && op.type === 'set_selection' && prev.type === 'set_selection') {\n    return true\n  }\n\n  return false\n}\n\nconst shouldClear = (op: Operation): boolean => {\n  if (op.type === 'set_selection') {\n    return false\n  }\n\n  return true\n}\n\nexport function withoutSaving(editor: Editor, fn: () => void): void {\n  const prev = isSaving(editor)\n  SAVING.set(editor, false)\n  fn()\n  SAVING.set(editor, prev)\n}\n\nfunction createSelectOperation(editor: Editor): SelectionOperation {\n  return {\n    type: 'set_selection',\n    properties: {...editor.selection},\n    newProperties: {...editor.selection},\n  }\n}\n\nfunction findOperationTargetBlock(\n  editor: PortableTextSlateEditor,\n  operation: Operation,\n): Descendant | undefined {\n  let block: Descendant | undefined\n  if (operation.type === 'set_selection' && editor.selection) {\n    block = editor.children[editor.selection.focus.path[0]]\n  } else if ('path' in operation) {\n    block = editor.children[operation.path[0]]\n  }\n  return block\n}\n","import type {Path} from '@sanity/types'\nimport {Editor, Node, Range, Text, Transforms} from 'slate'\nimport {parseAnnotation} from '../internal-utils/parse-blocks'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\n/**\n * @public\n */\nexport type AddedAnnotationPaths = {\n  /**\n   * @deprecated An annotation may be applied to multiple blocks, resulting\n   * in multiple `markDef`'s being created. Use `markDefPaths` instead.\n   */\n  markDefPath: Path\n  markDefPaths: Array<Path>\n  /**\n   * @deprecated Does not return anything meaningful since an annotation\n   * can span multiple blocks and spans. If references the span closest\n   * to the focus point of the selection.\n   */\n  spanPath: Path\n}\n\nexport const addAnnotationOperationImplementation: BehaviorOperationImplementation<\n  'annotation.add',\n  AddedAnnotationPaths | undefined\n> = ({context, operation}) => {\n  const parsedAnnotation = parseAnnotation({\n    annotation: {\n      _type: operation.annotation.name,\n      ...operation.annotation.value,\n    },\n    context,\n    options: {refreshKeys: false, validateFields: true},\n  })\n\n  if (!parsedAnnotation) {\n    throw new Error(\n      `Failed to parse annotation ${JSON.stringify(operation.annotation)}`,\n    )\n  }\n\n  const editor = operation.editor\n\n  if (!editor.selection || Range.isCollapsed(editor.selection)) {\n    return\n  }\n\n  let paths: AddedAnnotationPaths | undefined = undefined\n  let spanPath: Path | undefined\n  let markDefPath: Path | undefined\n  const markDefPaths: Path[] = []\n\n  const selectedBlocks = Editor.nodes(editor, {\n    at: editor.selection,\n    match: (node) => editor.isTextBlock(node),\n    reverse: Range.isBackward(editor.selection),\n  })\n\n  let blockIndex = 0\n\n  for (const [block, blockPath] of selectedBlocks) {\n    if (block.children.length === 0) {\n      continue\n    }\n\n    if (block.children.length === 1 && block.children[0].text === '') {\n      continue\n    }\n\n    // Make sure we don't generate more keys than needed\n    const annotationKey =\n      blockIndex === 0 ? parsedAnnotation._key : context.keyGenerator()\n    const markDefs = block.markDefs ?? []\n    const existingMarkDef = markDefs.find(\n      (markDef) =>\n        markDef._type === parsedAnnotation._type &&\n        markDef._key === annotationKey,\n    )\n\n    if (existingMarkDef === undefined) {\n      Transforms.setNodes(\n        editor,\n        {\n          markDefs: [\n            ...markDefs,\n            {\n              ...parsedAnnotation,\n              _key: annotationKey,\n            },\n          ],\n        },\n        {at: blockPath},\n      )\n\n      markDefPath = [{_key: block._key}, 'markDefs', {_key: annotationKey}]\n\n      if (Range.isBackward(editor.selection)) {\n        markDefPaths.unshift(markDefPath)\n      } else {\n        markDefPaths.push(markDefPath)\n      }\n    }\n\n    Transforms.setNodes(editor, {}, {match: Text.isText, split: true})\n\n    const children = Node.children(editor, blockPath)\n\n    for (const [span, path] of children) {\n      if (!editor.isTextSpan(span)) {\n        continue\n      }\n\n      if (!Range.includes(editor.selection, path)) {\n        continue\n      }\n\n      const marks = span.marks ?? []\n      const existingSameTypeAnnotations = marks.filter((mark) =>\n        markDefs.some(\n          (markDef) =>\n            markDef._key === mark && markDef._type === parsedAnnotation._type,\n        ),\n      )\n\n      Transforms.setNodes(\n        editor,\n        {\n          marks: [\n            ...marks.filter(\n              (mark) => !existingSameTypeAnnotations.includes(mark),\n            ),\n            annotationKey,\n          ],\n        },\n        {at: path},\n      )\n\n      spanPath = [{_key: block._key}, 'children', {_key: span._key}]\n    }\n\n    blockIndex++\n  }\n\n  if (markDefPath && spanPath) {\n    paths = {\n      markDefPath,\n      markDefPaths,\n      spanPath,\n    }\n  }\n\n  return paths\n}\n","import type {PortableTextSpan} from '@sanity/types'\nimport {Editor, Node, Path, Range, Transforms} from 'slate'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const removeAnnotationOperationImplementation: BehaviorOperationImplementation<\n  'annotation.remove'\n> = ({operation}) => {\n  const editor = operation.editor\n\n  if (!editor.selection) {\n    return\n  }\n\n  if (Range.isCollapsed(editor.selection)) {\n    const [block, blockPath] = Editor.node(editor, editor.selection, {\n      depth: 1,\n    })\n\n    if (!editor.isTextBlock(block)) {\n      return\n    }\n\n    const markDefs = block.markDefs ?? []\n    const potentialAnnotations = markDefs.filter(\n      (markDef) => markDef._type === operation.annotation.name,\n    )\n\n    const [selectedChild, selectedChildPath] = Editor.node(\n      editor,\n      editor.selection,\n      {\n        depth: 2,\n      },\n    )\n\n    if (!editor.isTextSpan(selectedChild)) {\n      return\n    }\n\n    const annotationToRemove = selectedChild.marks?.find((mark) =>\n      potentialAnnotations.some((markDef) => markDef._key === mark),\n    )\n\n    if (!annotationToRemove) {\n      return\n    }\n\n    const previousSpansWithSameAnnotation: Array<\n      [span: PortableTextSpan, path: Path]\n    > = []\n\n    for (const [child, childPath] of Node.children(editor, blockPath, {\n      reverse: true,\n    })) {\n      if (!editor.isTextSpan(child)) {\n        continue\n      }\n\n      if (!Path.isBefore(childPath, selectedChildPath)) {\n        continue\n      }\n\n      if (child.marks?.includes(annotationToRemove)) {\n        previousSpansWithSameAnnotation.push([child, childPath])\n      } else {\n        break\n      }\n    }\n\n    const nextSpansWithSameAnnotation: Array<\n      [span: PortableTextSpan, path: Path]\n    > = []\n\n    for (const [child, childPath] of Node.children(editor, blockPath)) {\n      if (!editor.isTextSpan(child)) {\n        continue\n      }\n\n      if (!Path.isAfter(childPath, selectedChildPath)) {\n        continue\n      }\n\n      if (child.marks?.includes(annotationToRemove)) {\n        nextSpansWithSameAnnotation.push([child, childPath])\n      } else {\n        break\n      }\n    }\n\n    for (const [child, childPath] of [\n      ...previousSpansWithSameAnnotation,\n      [selectedChild, selectedChildPath] as const,\n      ...nextSpansWithSameAnnotation,\n    ]) {\n      Transforms.setNodes(\n        editor,\n        {\n          marks: child.marks?.filter((mark) => mark !== annotationToRemove),\n        },\n        {at: childPath},\n      )\n    }\n  } else {\n    Transforms.setNodes(\n      editor,\n      {},\n      {\n        match: (node) => editor.isTextSpan(node),\n        split: true,\n        hanging: true,\n      },\n    )\n\n    const blocks = Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    })\n\n    for (const [block, blockPath] of blocks) {\n      const children = Node.children(editor, blockPath)\n\n      for (const [child, childPath] of children) {\n        if (!editor.isTextSpan(child)) {\n          continue\n        }\n\n        if (!Range.includes(editor.selection, childPath)) {\n          continue\n        }\n\n        const markDefs = block.markDefs ?? []\n        const marks = child.marks ?? []\n        const marksWithoutAnnotation = marks.filter((mark) => {\n          const markDef = markDefs.find((markDef) => markDef._key === mark)\n          return markDef?._type !== operation.annotation.name\n        })\n\n        if (marksWithoutAnnotation.length !== marks.length) {\n          Transforms.setNodes(\n            editor,\n            {\n              marks: marksWithoutAnnotation,\n            },\n            {at: childPath},\n          )\n        }\n      }\n    }\n  }\n}\n","import {Editor, Transforms, type Element as SlateElement} from 'slate'\nimport {parseBlock} from '../internal-utils/parse-blocks'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport {fromSlateValue, toSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const blockSetOperationImplementation: BehaviorOperationImplementation<\n  'block.set'\n> = ({context, operation}) => {\n  const location = toSlateRange(\n    {\n      anchor: {path: operation.at, offset: 0},\n      focus: {path: operation.at, offset: 0},\n    },\n    operation.editor,\n  )\n\n  if (!location) {\n    throw new Error(\n      `Unable to convert ${JSON.stringify(operation.at)} into a Slate Range`,\n    )\n  }\n\n  const blockEntry = Editor.node(operation.editor, location, {depth: 1})\n  const block = blockEntry?.[0]\n\n  if (!block) {\n    throw new Error(`Unable to find block at ${JSON.stringify(operation.at)}`)\n  }\n\n  const parsedBlock = fromSlateValue(\n    [block],\n    context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(operation.editor),\n  ).at(0)\n\n  if (!parsedBlock) {\n    throw new Error(`Unable to parse block at ${JSON.stringify(operation.at)}`)\n  }\n\n  const {_type, ...filteredProps} = operation.props\n\n  const updatedBlock = parseBlock({\n    context,\n    block: {\n      ...parsedBlock,\n      ...filteredProps,\n    },\n    options: {refreshKeys: false, validateFields: true},\n  })\n\n  if (!updatedBlock) {\n    throw new Error(`Unable to update block at ${JSON.stringify(operation.at)}`)\n  }\n\n  const slateBlock = toSlateValue([updatedBlock], {\n    schemaTypes: context.schema,\n  })?.at(0) as SlateElement | undefined\n\n  if (!slateBlock) {\n    throw new Error(`Unable to convert block to Slate value`)\n  }\n\n  Transforms.setNodes(operation.editor, slateBlock, {at: location})\n}\n","import {omit} from 'lodash'\nimport {Editor, Transforms} from 'slate'\nimport {isTextBlock, parseBlock} from '../internal-utils/parse-blocks'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const blockUnsetOperationImplementation: BehaviorOperationImplementation<\n  'block.unset'\n> = ({context, operation}) => {\n  const location = toSlateRange(\n    {\n      anchor: {path: operation.at, offset: 0},\n      focus: {path: operation.at, offset: 0},\n    },\n    operation.editor,\n  )\n\n  if (!location) {\n    throw new Error(\n      `Unable to convert ${JSON.stringify(operation.at)} into a Slate Range`,\n    )\n  }\n\n  const blockEntry = Editor.node(operation.editor, location, {depth: 1})\n  const block = blockEntry?.[0]\n\n  if (!block) {\n    throw new Error(`Unable to find block at ${JSON.stringify(operation.at)}`)\n  }\n\n  const parsedBlock = fromSlateValue(\n    [block],\n    context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(operation.editor),\n  ).at(0)\n\n  if (!parsedBlock) {\n    throw new Error(`Unable to parse block at ${JSON.stringify(operation.at)}`)\n  }\n\n  if (isTextBlock(context, parsedBlock)) {\n    const propsToRemove = operation.props.filter((prop) => prop !== '_type')\n\n    const updatedTextBlock = parseBlock({\n      context,\n      block: omit(parsedBlock, propsToRemove),\n      options: {refreshKeys: false, validateFields: true},\n    })\n\n    if (!updatedTextBlock) {\n      throw new Error(\n        `Unable to update block at ${JSON.stringify(operation.at)}`,\n      )\n    }\n\n    const propsToSet: Record<string, unknown> = {}\n\n    for (const prop of propsToRemove) {\n      if (!(prop in updatedTextBlock)) {\n        propsToSet[prop] = undefined\n      } else {\n        propsToSet[prop] = (updatedTextBlock as Record<string, unknown>)[prop]\n      }\n    }\n\n    Transforms.setNodes(operation.editor, propsToSet, {at: location})\n\n    return\n  }\n\n  const updatedBlockObject = parseBlock({\n    context,\n    block: omit(\n      parsedBlock,\n      operation.props.filter((prop) => prop !== '_type'),\n    ),\n    options: {refreshKeys: false, validateFields: true},\n  })\n\n  if (!updatedBlockObject) {\n    throw new Error(`Unable to update block at ${JSON.stringify(operation.at)}`)\n  }\n\n  const {_type, _key, ...props} = updatedBlockObject\n\n  Transforms.setNodes(\n    operation.editor,\n    {\n      _type,\n      _key,\n      value: props,\n    },\n    {at: location},\n  )\n}\n","import {Editor, Range, Text, Transforms} from 'slate'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport {slateRangeToSelection} from '../internal-utils/slate-utils'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const decoratorAddOperationImplementation: BehaviorOperationImplementation<\n  'decorator.add'\n> = ({context, operation}) => {\n  const editor = operation.editor\n  const mark = operation.decorator\n  const value = fromSlateValue(\n    editor.children,\n    context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(editor),\n  )\n\n  const manualAnchor = operation.at?.anchor\n    ? utils.blockOffsetToSpanSelectionPoint({\n        context: {\n          ...context,\n          value,\n        },\n        blockOffset: operation.at.anchor,\n        direction: 'backward',\n      })\n    : undefined\n  const manualFocus = operation.at?.focus\n    ? utils.blockOffsetToSpanSelectionPoint({\n        context: {\n          ...context,\n          value,\n        },\n        blockOffset: operation.at.focus,\n        direction: 'forward',\n      })\n    : undefined\n  const manualSelection =\n    manualAnchor && manualFocus\n      ? {\n          anchor: manualAnchor,\n          focus: manualFocus,\n        }\n      : undefined\n\n  const selection = manualSelection\n    ? (toSlateRange(manualSelection, operation.editor) ?? editor.selection)\n    : editor.selection\n\n  if (!selection) {\n    return\n  }\n\n  const editorSelection = slateRangeToSelection({\n    schema: context.schema,\n    editor,\n    range: selection,\n  })\n  const anchorOffset = editorSelection\n    ? utils.selectionPointToBlockOffset({\n        context: {\n          ...context,\n          value,\n        },\n        selectionPoint: editorSelection.anchor,\n      })\n    : undefined\n  const focusOffset = editorSelection\n    ? utils.selectionPointToBlockOffset({\n        context: {\n          ...context,\n          value,\n        },\n        selectionPoint: editorSelection.focus,\n      })\n    : undefined\n\n  if (!anchorOffset || !focusOffset) {\n    throw new Error('Unable to find anchor or focus offset')\n  }\n\n  if (Range.isExpanded(selection)) {\n    // Split if needed\n    Transforms.setNodes(\n      editor,\n      {},\n      {at: selection, match: Text.isText, split: true, hanging: true},\n    )\n\n    // The value might have changed after splitting\n    const newValue = fromSlateValue(\n      editor.children,\n      context.schema.block.name,\n      KEY_TO_VALUE_ELEMENT.get(editor),\n    )\n    // We need to find the new selection from the original offsets because the\n    // split operation might have changed the value.\n    const newSelection = utils.blockOffsetsToSelection({\n      context: {\n        ...context,\n        value: newValue,\n      },\n      offsets: {anchor: anchorOffset, focus: focusOffset},\n      backward: editorSelection?.backward,\n    })\n\n    const trimmedSelection = selectors.getTrimmedSelection({\n      beta: {\n        activeAnnotations: [],\n        activeDecorators: [],\n        hasTag: () => false,\n        internalDrag: undefined,\n      },\n      context: {\n        converters: [],\n        keyGenerator: context.keyGenerator,\n        readOnly: false,\n        schema: context.schema,\n        selection: newSelection,\n        value: newValue,\n      },\n    })\n\n    if (!trimmedSelection) {\n      throw new Error('Unable to find trimmed selection')\n    }\n\n    const newRange = toSlateRange(trimmedSelection, editor)\n\n    if (!newRange) {\n      throw new Error('Unable to find new selection')\n    }\n\n    // Use new selection to find nodes to decorate\n    const splitTextNodes = Range.isRange(newRange)\n      ? [\n          ...Editor.nodes(editor, {\n            at: newRange,\n            match: (node) => Text.isText(node),\n          }),\n        ]\n      : []\n\n    for (const [node, path] of splitTextNodes) {\n      const marks = [\n        ...(Array.isArray(node.marks) ? node.marks : []).filter(\n          (eMark: string) => eMark !== mark,\n        ),\n        mark,\n      ]\n      Transforms.setNodes(\n        editor,\n        {marks},\n        {at: path, match: Text.isText, split: true, hanging: true},\n      )\n    }\n  } else {\n    const selectedSpan = Array.from(\n      Editor.nodes(editor, {\n        at: selection,\n        match: (node) => editor.isTextSpan(node),\n      }),\n    )?.at(0)\n\n    if (!selectedSpan) {\n      return\n    }\n\n    const [block, blockPath] = Editor.node(editor, selection, {\n      depth: 1,\n    })\n    const lonelyEmptySpan =\n      editor.isTextBlock(block) &&\n      block.children.length === 1 &&\n      editor.isTextSpan(block.children[0]) &&\n      block.children[0].text === ''\n        ? block.children[0]\n        : undefined\n\n    if (lonelyEmptySpan) {\n      const existingMarks = lonelyEmptySpan.marks ?? []\n      const existingMarksWithoutDecorator = existingMarks.filter(\n        (existingMark) => existingMark !== mark,\n      )\n\n      Transforms.setNodes(\n        editor,\n        {\n          marks:\n            existingMarks.length === existingMarksWithoutDecorator.length\n              ? [...existingMarks, mark]\n              : existingMarksWithoutDecorator,\n        },\n        {\n          at: blockPath,\n          match: (node) => editor.isTextSpan(node),\n        },\n      )\n    } else {\n      editor.decoratorState[mark] = true\n    }\n  }\n\n  if (editor.selection) {\n    // Reselect\n    const selection = editor.selection\n    editor.selection = {...selection}\n  }\n}\n","import {Range} from 'slate'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport {getFocusBlock, getFocusChild} from '../internal-utils/slate-utils'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const deleteOperationImplementation: BehaviorOperationImplementation<\n  'delete'\n> = ({context, operation}) => {\n  const range = toSlateRange(operation.at, operation.editor)\n\n  if (!range) {\n    throw new Error(\n      `Failed to get Slate Range for selection ${JSON.stringify(operation.at)}`,\n    )\n  }\n\n  if (Range.isCollapsed(range)) {\n    const [focusBlock] = getFocusBlock({\n      editor: {...operation.editor, selection: range},\n    })\n    const [focusChild] = getFocusChild({\n      editor: {...operation.editor, selection: range},\n    })\n\n    if (\n      focusBlock &&\n      focusBlock._type === context.schema.block.name &&\n      focusChild &&\n      focusChild._type === context.schema.span.name\n    ) {\n      return\n    }\n  }\n\n  operation.editor.delete({at: range})\n}\n","import {deleteBackward} from 'slate'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const deleteBackwardOperationImplementation: BehaviorOperationImplementation<\n  'delete.backward'\n> = ({operation}) => {\n  deleteBackward(operation.editor, operation.unit)\n}\n","import {Transforms} from 'slate'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const deleteBlockOperationImplementation: BehaviorOperationImplementation<\n  'delete.block'\n> = ({operation}) => {\n  const range = toSlateRange(\n    {\n      anchor: {path: operation.at, offset: 0},\n      focus: {path: operation.at, offset: 0},\n    },\n    operation.editor,\n  )\n\n  if (!range) {\n    console.error('Unable to find Slate range from selection points')\n    return\n  }\n\n  Transforms.removeNodes(operation.editor, {\n    at: range,\n  })\n}\n","import {deleteForward} from 'slate'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const deleteForwardOperationImplementation: BehaviorOperationImplementation<\n  'delete.forward'\n> = ({operation}) => {\n  deleteForward(operation.editor, operation.unit)\n}\n","import {Editor, Transforms, type Element} from 'slate'\nimport {parseInlineObject} from '../internal-utils/parse-blocks'\nimport {toSlateValue} from '../internal-utils/values'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const insertInlineObjectOperationImplementation: BehaviorOperationImplementation<\n  'insert.inline object'\n> = ({context, operation}) => {\n  const parsedInlineObject = parseInlineObject({\n    context,\n    inlineObject: {\n      _type: operation.inlineObject.name,\n      ...(operation.inlineObject.value ?? {}),\n    },\n    options: {refreshKeys: false, validateFields: true},\n  })\n\n  if (!parsedInlineObject) {\n    throw new Error(\n      `Failed to parse inline object ${JSON.stringify(operation.inlineObject)}`,\n    )\n  }\n\n  if (!operation.editor.selection) {\n    console.error('Unable to insert inline object without selection')\n    return\n  }\n\n  const [focusTextBlock] = Array.from(\n    Editor.nodes(operation.editor, {\n      at: operation.editor.selection.focus.path,\n      match: (node) => operation.editor.isTextBlock(node),\n    }),\n  ).at(0) ?? [undefined, undefined]\n\n  if (!focusTextBlock) {\n    console.error('Unable to perform action without focus text block')\n    return\n  }\n\n  const block = toSlateValue(\n    [\n      {\n        _type: context.schema.block.name,\n        _key: context.keyGenerator(),\n        children: [parsedInlineObject],\n      },\n    ],\n    {schemaTypes: context.schema},\n  ).at(0) as unknown as Element\n  const child = block?.children.at(0)\n\n  if (!child) {\n    console.error('Unable to insert inline object')\n    return\n  }\n\n  Transforms.insertNodes(operation.editor, child)\n}\n","import {Editor, Transforms} from 'slate'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const insertSpanOperationImplementation: BehaviorOperationImplementation<\n  'insert.span'\n> = ({context, operation}) => {\n  if (!operation.editor.selection) {\n    console.error('Unable to perform action without selection', operation)\n    return\n  }\n\n  const [focusBlock, focusBlockPath] = Array.from(\n    Editor.nodes(operation.editor, {\n      at: operation.editor.selection.focus.path,\n      match: (node) => operation.editor.isTextBlock(node),\n    }),\n  )[0] ?? [undefined, undefined]\n\n  if (!focusBlock || !focusBlockPath) {\n    console.error('Unable to perform action without focus block', operation)\n    return\n  }\n\n  const markDefs = focusBlock.markDefs ?? []\n  const annotations = operation.annotations\n    ? operation.annotations.map((annotation) => ({\n        _type: annotation.name,\n        _key: context.keyGenerator(),\n        ...annotation.value,\n      }))\n    : undefined\n\n  if (annotations && annotations.length > 0) {\n    Transforms.setNodes(operation.editor, {\n      markDefs: [...markDefs, ...annotations],\n    })\n  }\n\n  Transforms.insertNodes(operation.editor, {\n    _type: 'span',\n    _key: context.keyGenerator(),\n    text: operation.text,\n    marks: [\n      ...(annotations?.map((annotation) => annotation._key) ?? []),\n      ...(operation.decorators ?? []),\n    ],\n  })\n}\n","import {Editor, Path, Point, Range, Transforms, type Descendant} from 'slate'\nimport {DOMEditor} from 'slate-dom'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport {parseBlock} from '../internal-utils/parse-blocks'\nimport {\n  getFocusBlock,\n  getFocusChild,\n  getLastBlock,\n  getSelectionEndBlock,\n  getSelectionStartBlock,\n} from '../internal-utils/slate-utils'\nimport {isEqualToEmptyEditor, toSlateValue} from '../internal-utils/values'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const insertBlockOperationImplementation: BehaviorOperationImplementation<\n  'insert.block'\n> = ({context, operation}) => {\n  const parsedBlock = parseBlock({\n    block: operation.block,\n    context,\n    options: {refreshKeys: false, validateFields: true},\n  })\n\n  if (!parsedBlock) {\n    throw new Error(`Failed to parse block ${JSON.stringify(operation.block)}`)\n  }\n\n  const fragment = toSlateValue([parsedBlock], {schemaTypes: context.schema})[0]\n\n  if (!fragment) {\n    throw new Error(\n      `Failed to convert block to Slate fragment ${JSON.stringify(parsedBlock)}`,\n    )\n  }\n\n  insertBlock({\n    block: fragment,\n    placement: operation.placement,\n    select: operation.select ?? 'start',\n    editor: operation.editor,\n    schema: context.schema,\n  })\n}\n\nexport function insertBlock({\n  block,\n  placement,\n  select,\n  editor,\n  schema,\n}: {\n  block: Descendant\n  placement: 'auto' | 'after' | 'before'\n  select: 'start' | 'end' | 'none'\n  editor: PortableTextSlateEditor\n  schema: EditorSchema\n}) {\n  const [startBlock, startBlockPath] = getSelectionStartBlock({editor})\n  const [endBlock, endBlockPath] = getSelectionEndBlock({editor})\n\n  if (\n    !editor.selection ||\n    !startBlock ||\n    !startBlockPath ||\n    !endBlock ||\n    !endBlockPath\n  ) {\n    if (select !== 'none') {\n      DOMEditor.focus(editor)\n    }\n\n    const [lastBlock, lastBlockPath] = getLastBlock({editor})\n\n    if (placement === 'before') {\n      Transforms.insertNodes(editor, [block], {at: [0]})\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, [0]))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, [0]))\n      }\n    } else if (placement === 'after') {\n      const nextPath = lastBlockPath ? [lastBlockPath[0] + 1] : [0]\n      Transforms.insertNodes(editor, [block], {at: nextPath, select: false})\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, nextPath))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, nextPath))\n      }\n    } else {\n      // placement === 'auto'\n\n      if (lastBlock && isEqualToEmptyEditor([lastBlock], schema)) {\n        // And if the last block was an empty text block, let's remove\n        // that too\n        Transforms.removeNodes(editor, {at: lastBlockPath})\n\n        Transforms.insertNodes(editor, [block], {\n          at: lastBlockPath,\n          select: false,\n        })\n\n        Transforms.deselect(editor)\n\n        if (select === 'start') {\n          Transforms.select(editor, Editor.start(editor, lastBlockPath))\n        } else if (select === 'end') {\n          Transforms.select(editor, Editor.end(editor, lastBlockPath))\n        }\n\n        return\n      }\n\n      if (\n        editor.isTextBlock(block) &&\n        lastBlock &&\n        editor.isTextBlock(lastBlock)\n      ) {\n        const selectionBefore = Editor.end(editor, lastBlockPath)\n\n        Transforms.insertFragment(editor, [block], {\n          at: Editor.end(editor, lastBlockPath),\n        })\n\n        if (select === 'start') {\n          Transforms.select(editor, selectionBefore)\n        } else if (select === 'none') {\n          Transforms.deselect(editor)\n        }\n\n        return\n      }\n\n      const nextPath = lastBlockPath ? [lastBlockPath[0] + 1] : [0]\n\n      Transforms.insertNodes(editor, [block], {at: nextPath, select: false})\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, nextPath))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, nextPath))\n      }\n    }\n  } else {\n    if (placement === 'before') {\n      const currentSelection = editor.selection\n      const selectionStartPoint = Range.start(currentSelection)\n\n      Transforms.insertNodes(editor, [block], {\n        at: [selectionStartPoint.path[0]],\n        select: false,\n      })\n\n      if (select === 'start') {\n        Transforms.select(\n          editor,\n          Editor.start(editor, [selectionStartPoint.path[0]]),\n        )\n      } else if (select === 'end') {\n        Transforms.select(\n          editor,\n          Editor.end(editor, [selectionStartPoint.path[0]]),\n        )\n      }\n    } else if (placement === 'after') {\n      const currentSelection = editor.selection\n      const selectionEndPoint = Range.end(currentSelection)\n\n      const nextPath = [selectionEndPoint.path[0] + 1]\n\n      Transforms.insertNodes(editor, [block], {\n        at: nextPath,\n        select: false,\n      })\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, nextPath))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, nextPath))\n      }\n    } else {\n      // placement === 'auto'\n\n      const currentSelection = editor.selection\n      const endBlockEndPoint = Editor.start(editor, endBlockPath)\n\n      if (Range.isExpanded(currentSelection) && !editor.isTextBlock(block)) {\n        Transforms.delete(editor, {at: currentSelection})\n\n        const newSelection = editor.selection\n\n        const [focusBlock, focusBlockPath] = getFocusBlock({editor})\n\n        Transforms.insertNodes(editor, [block], {\n          voids: true,\n        })\n\n        const adjustedSelection =\n          newSelection.anchor.offset === 0\n            ? Range.transform(newSelection, {\n                type: 'insert_node',\n                node: block,\n                path: [newSelection.anchor.path[0]],\n              })\n            : newSelection\n\n        if (select === 'none' && adjustedSelection) {\n          Transforms.select(editor, adjustedSelection)\n        }\n\n        if (focusBlock && isEqualToEmptyEditor([focusBlock], schema)) {\n          Transforms.removeNodes(editor, {at: focusBlockPath})\n        }\n\n        return\n      }\n\n      if (editor.isTextBlock(endBlock) && editor.isTextBlock(block)) {\n        const selectionStartPoint = Range.start(currentSelection)\n\n        if (isEqualToEmptyEditor([endBlock], schema)) {\n          const currentSelection = editor.selection\n\n          Transforms.insertNodes(editor, [block], {\n            at: endBlockPath,\n            select: false,\n          })\n          Transforms.removeNodes(editor, {at: Path.next(endBlockPath)})\n\n          if (select === 'start') {\n            Transforms.select(editor, selectionStartPoint)\n          } else if (select === 'end') {\n            Transforms.select(editor, Editor.end(editor, endBlockPath))\n          } else {\n            Transforms.select(editor, currentSelection)\n          }\n\n          return\n        }\n\n        if (select === 'end') {\n          Transforms.insertFragment(editor, [block], {\n            voids: true,\n          })\n\n          return\n        }\n\n        Transforms.insertFragment(editor, [block], {\n          at: currentSelection,\n          voids: true,\n        })\n\n        if (select === 'start') {\n          Transforms.select(editor, selectionStartPoint)\n        } else {\n          if (!Point.equals(selectionStartPoint, endBlockEndPoint)) {\n            Transforms.select(editor, selectionStartPoint)\n          }\n        }\n      } else {\n        if (!editor.isTextBlock(endBlock)) {\n          Transforms.insertNodes(editor, [block], {select: false})\n\n          const nextPath = [endBlockPath[0] + 1]\n\n          if (select === 'start') {\n            Transforms.select(editor, Editor.start(editor, nextPath))\n          } else if (select === 'end') {\n            Transforms.select(editor, Editor.end(editor, nextPath))\n          }\n        } else {\n          const endBlockStartPoint = Editor.start(editor, endBlockPath)\n          const endBlockEndPoint = Editor.end(editor, endBlockPath)\n          const selectionStartPoint = Range.start(currentSelection)\n          const selectionEndPoint = Range.end(currentSelection)\n\n          if (\n            Range.isCollapsed(currentSelection) &&\n            Point.equals(selectionStartPoint, endBlockStartPoint)\n          ) {\n            Transforms.insertNodes(editor, [block], {\n              at: endBlockPath,\n              select: false,\n            })\n\n            if (select === 'start' || select === 'end') {\n              Transforms.select(editor, Editor.start(editor, endBlockPath))\n            }\n\n            if (isEqualToEmptyEditor([endBlock], schema)) {\n              Transforms.removeNodes(editor, {at: Path.next(endBlockPath)})\n            }\n          } else if (\n            Range.isCollapsed(currentSelection) &&\n            Point.equals(selectionEndPoint, endBlockEndPoint)\n          ) {\n            const nextPath = [endBlockPath[0] + 1]\n\n            Transforms.insertNodes(editor, [block], {\n              at: nextPath,\n              select: false,\n            })\n\n            if (select === 'start' || select === 'end') {\n              Transforms.select(editor, Editor.start(editor, nextPath))\n            }\n          } else if (\n            Range.isExpanded(currentSelection) &&\n            Point.equals(selectionStartPoint, endBlockStartPoint) &&\n            Point.equals(selectionEndPoint, endBlockEndPoint)\n          ) {\n            Transforms.insertFragment(editor, [block], {\n              at: currentSelection,\n            })\n\n            if (select === 'start') {\n              Transforms.select(editor, Editor.start(editor, endBlockPath))\n            } else if (select === 'end') {\n              Transforms.select(editor, Editor.end(editor, endBlockPath))\n            }\n          } else if (\n            Range.isExpanded(currentSelection) &&\n            Point.equals(selectionStartPoint, endBlockStartPoint)\n          ) {\n            Transforms.insertFragment(editor, [block], {\n              at: currentSelection,\n            })\n\n            if (select === 'start') {\n              Transforms.select(editor, Editor.start(editor, endBlockPath))\n            } else if (select === 'end') {\n              Transforms.select(editor, Editor.end(editor, endBlockPath))\n            }\n          } else if (\n            Range.isExpanded(currentSelection) &&\n            Point.equals(selectionEndPoint, endBlockEndPoint)\n          ) {\n            Transforms.insertFragment(editor, [block], {\n              at: currentSelection,\n            })\n\n            if (select === 'start') {\n              Transforms.select(\n                editor,\n                Editor.start(editor, Path.next(endBlockPath)),\n              )\n            } else if (select === 'end') {\n              Transforms.select(\n                editor,\n                Editor.end(editor, Path.next(endBlockPath)),\n              )\n            }\n          } else {\n            const currentSelection = editor.selection\n            const [focusChild] = getFocusChild({editor})\n\n            if (focusChild && editor.isTextSpan(focusChild)) {\n              Transforms.insertFragment(editor, [block], {\n                at: currentSelection,\n              })\n\n              if (select === 'start' || select === 'end') {\n                Transforms.select(editor, [endBlockPath[0] + 1])\n              } else {\n                Transforms.select(editor, currentSelection)\n              }\n            } else {\n              const nextPath = [endBlockPath[0] + 1]\n              Transforms.insertNodes(editor, [block], {\n                at: nextPath,\n                select: false,\n              })\n              Transforms.select(editor, currentSelection)\n\n              if (select === 'start') {\n                Transforms.select(editor, Editor.start(editor, nextPath))\n              } else if (select === 'end') {\n                Transforms.select(editor, Editor.end(editor, nextPath))\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n","import {Transforms} from 'slate'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const moveBackwardOperationImplementation: BehaviorOperationImplementation<\n  'move.backward'\n> = ({operation}) => {\n  Transforms.move(operation.editor, {\n    unit: 'character',\n    distance: operation.distance,\n    reverse: true,\n  })\n}\n","import {Transforms} from 'slate'\nimport {toSlatePath} from '../internal-utils/paths'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const moveBlockOperationImplementation: BehaviorOperationImplementation<\n  'move.block'\n> = ({operation}) => {\n  const at = [toSlatePath(operation.at, operation.editor)[0]]\n  const to = [toSlatePath(operation.to, operation.editor)[0]]\n\n  Transforms.moveNodes(operation.editor, {\n    at,\n    to,\n    mode: 'highest',\n  })\n}\n","import {Transforms} from 'slate'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const moveForwardOperationImplementation: BehaviorOperationImplementation<\n  'move.forward'\n> = ({operation}) => {\n  Transforms.move(operation.editor, {\n    unit: 'character',\n    distance: operation.distance,\n  })\n}\n","import {Transforms} from 'slate'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const selectOperationImplementation: BehaviorOperationImplementation<\n  'select'\n> = ({operation}) => {\n  const newSelection = toSlateRange(operation.at, operation.editor)\n\n  if (newSelection) {\n    Transforms.select(operation.editor, newSelection)\n  } else {\n    Transforms.deselect(operation.editor)\n  }\n}\n","import type {\n  AbstractBehaviorEventType,\n  SyntheticBehaviorEvent,\n} from '../behaviors/behavior.types.event'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport {removeDecoratorOperationImplementation} from '../editor/plugins/createWithPortableTextMarkModel'\nimport {\n  historyRedoOperationImplementation,\n  historyUndoOperationImplementation,\n} from '../editor/plugins/createWithUndoRedo'\nimport type {OmitFromUnion, PickFromUnion} from '../type-utils'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {addAnnotationOperationImplementation} from './behavior.operation.annotation.add'\nimport {removeAnnotationOperationImplementation} from './behavior.operation.annotation.remove'\nimport {blockSetOperationImplementation} from './behavior.operation.block.set'\nimport {blockUnsetOperationImplementation} from './behavior.operation.block.unset'\nimport {decoratorAddOperationImplementation} from './behavior.operation.decorator.add'\nimport {deleteOperationImplementation} from './behavior.operation.delete'\nimport {deleteBackwardOperationImplementation} from './behavior.operation.delete.backward'\nimport {deleteBlockOperationImplementation} from './behavior.operation.delete.block'\nimport {deleteForwardOperationImplementation} from './behavior.operation.delete.forward'\nimport {insertInlineObjectOperationImplementation} from './behavior.operation.insert-inline-object'\nimport {insertSpanOperationImplementation} from './behavior.operation.insert-span'\nimport {insertBlockOperationImplementation} from './behavior.operation.insert.block'\nimport {insertTextOperationImplementation} from './behavior.operation.insert.text'\nimport {moveBackwardOperationImplementation} from './behavior.operation.move.backward'\nimport {moveBlockOperationImplementation} from './behavior.operation.move.block'\nimport {moveForwardOperationImplementation} from './behavior.operation.move.forward'\nimport {selectOperationImplementation} from './behavior.operation.select'\n\nexport type BehaviorOperationImplementationContext = Pick<\n  EditorContext,\n  'keyGenerator' | 'schema'\n>\n\nexport type BehaviorOperationImplementation<\n  TBehaviorOperationType extends BehaviorOperation['type'],\n  TReturnType = void,\n> = ({\n  context,\n  operation,\n}: {\n  context: BehaviorOperationImplementationContext\n  operation: PickFromUnion<BehaviorOperation, 'type', TBehaviorOperationType>\n}) => TReturnType\n\ntype BehaviorOperation = OmitFromUnion<\n  SyntheticBehaviorEvent,\n  'type',\n  AbstractBehaviorEventType\n> & {\n  editor: PortableTextSlateEditor\n}\n\ntype BehaviorOperationImplementations = {\n  [TBehaviorOperationType in BehaviorOperation['type']]: BehaviorOperationImplementation<TBehaviorOperationType>\n}\n\nconst behaviorOperationImplementations: BehaviorOperationImplementations = {\n  'annotation.add': addAnnotationOperationImplementation,\n  'annotation.remove': removeAnnotationOperationImplementation,\n  'block.set': blockSetOperationImplementation,\n  'block.unset': blockUnsetOperationImplementation,\n  'decorator.add': decoratorAddOperationImplementation,\n  'decorator.remove': removeDecoratorOperationImplementation,\n  'delete': deleteOperationImplementation,\n  'delete.backward': deleteBackwardOperationImplementation,\n  'delete.forward': deleteForwardOperationImplementation,\n  'delete.block': deleteBlockOperationImplementation,\n  'history.redo': historyRedoOperationImplementation,\n  'history.undo': historyUndoOperationImplementation,\n  'insert.block': insertBlockOperationImplementation,\n  'insert.inline object': insertInlineObjectOperationImplementation,\n  'insert.span': insertSpanOperationImplementation,\n  'insert.text': insertTextOperationImplementation,\n  'move.backward': moveBackwardOperationImplementation,\n  'move.block': moveBlockOperationImplementation,\n  'move.forward': moveForwardOperationImplementation,\n  'select': selectOperationImplementation,\n}\n\nexport function performOperation({\n  context,\n  operation,\n}: {\n  context: BehaviorOperationImplementationContext\n  operation: BehaviorOperation\n}) {\n  try {\n    switch (operation.type) {\n      case 'annotation.add': {\n        behaviorOperationImplementations['annotation.add']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'annotation.remove': {\n        behaviorOperationImplementations['annotation.remove']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'block.set': {\n        behaviorOperationImplementations['block.set']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'block.unset': {\n        behaviorOperationImplementations['block.unset']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'decorator.add': {\n        behaviorOperationImplementations['decorator.add']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'decorator.remove': {\n        behaviorOperationImplementations['decorator.remove']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'delete': {\n        behaviorOperationImplementations.delete({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'delete.backward': {\n        behaviorOperationImplementations['delete.backward']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'delete.block': {\n        behaviorOperationImplementations['delete.block']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'delete.forward': {\n        behaviorOperationImplementations['delete.forward']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'history.redo': {\n        behaviorOperationImplementations['history.redo']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'history.undo': {\n        behaviorOperationImplementations['history.undo']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'insert.block': {\n        behaviorOperationImplementations['insert.block']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'insert.inline object': {\n        behaviorOperationImplementations['insert.inline object']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'insert.span': {\n        behaviorOperationImplementations['insert.span']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'insert.text': {\n        behaviorOperationImplementations['insert.text']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'move.backward': {\n        behaviorOperationImplementations['move.backward']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'move.block': {\n        behaviorOperationImplementations['move.block']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'move.forward': {\n        behaviorOperationImplementations['move.forward']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      default: {\n        behaviorOperationImplementations.select({\n          context,\n          operation: operation,\n        })\n        break\n      }\n    }\n  } catch (error) {\n    console.error(\n      new Error(\n        `Executing \"${operation.type}\" failed due to: ${error.message}`,\n      ),\n    )\n  }\n}\n","import {Editor} from 'slate'\nimport {defaultKeyGenerator} from './key-generator'\n\nconst CURRENT_OPERATION_ID: WeakMap<Editor, string | undefined> = new WeakMap()\n\nexport function withApplyingBehaviorOperations(editor: Editor, fn: () => void) {\n  CURRENT_OPERATION_ID.set(editor, defaultKeyGenerator())\n  Editor.withoutNormalizing(editor, fn)\n  CURRENT_OPERATION_ID.set(editor, undefined)\n}\n\nexport function getCurrentOperationId(editor: Editor) {\n  return CURRENT_OPERATION_ID.get(editor)\n}\n\nexport function isApplyingBehaviorOperations(editor: Editor) {\n  return getCurrentOperationId(editor) !== undefined\n}\n","import {Editor} from 'slate'\nimport {slateRangeToSelection} from '../../internal-utils/slate-utils'\nimport {insertTextOperationImplementation} from '../../operations/behavior.operation.insert.text'\nimport {performOperation} from '../../operations/behavior.operations'\nimport type {EditorActor} from '../editor-machine'\nimport {isApplyingBehaviorOperations} from '../with-applying-behavior-operations'\n\nexport function createWithEventListeners(editorActor: EditorActor) {\n  return function withEventListeners(editor: Editor) {\n    if (editorActor.getSnapshot().context.maxBlocks !== undefined) {\n      return editor\n    }\n\n    const {select} = editor\n\n    editor.deleteBackward = (unit) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        console.error('Unexpected call to .deleteBackward(...)')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete.backward',\n          unit,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.deleteForward = (unit) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        console.error('Unexpected call to .deleteForward(...)')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete.forward',\n          unit,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertBreak = () => {\n      if (isApplyingBehaviorOperations(editor)) {\n        console.error('Unexpected call to .insertBreak(...)')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.break',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertData = (dataTransfer) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        console.error('Unexpected call to .insertData(...)')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'input.*',\n          originEvent: {\n            dataTransfer,\n          },\n        },\n        editor,\n      })\n    }\n\n    editor.insertSoftBreak = () => {\n      if (isApplyingBehaviorOperations(editor)) {\n        insertTextOperationImplementation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          operation: {type: 'insert.text', text: '\\n', editor},\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.soft break',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertText = (text) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        insertTextOperationImplementation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          operation: {type: 'insert.text', text, editor},\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.text',\n          text,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.redo = () => {\n      if (isApplyingBehaviorOperations(editor)) {\n        performOperation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          operation: {\n            type: 'history.redo',\n            editor,\n          },\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.redo',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.select = (location) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        select(location)\n        return\n      }\n\n      const range = Editor.range(editor, location)\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'select',\n          at: slateRangeToSelection({\n            schema: editorActor.getSnapshot().context.schema,\n            editor,\n            range,\n          }),\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.setFragmentData = () => {\n      console.error('Unexpected call to .setFragmentData(...)')\n      return\n    }\n\n    editor.undo = () => {\n      if (isApplyingBehaviorOperations(editor)) {\n        performOperation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          operation: {\n            type: 'history.undo',\n            editor,\n          },\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.undo',\n        },\n        editor,\n      })\n      return\n    }\n\n    return editor\n  }\n}\n","import {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * This plugin makes sure that the PTE maxBlocks prop is respected\n *\n */\nexport function createWithMaxBlocks(editorActor: EditorActor) {\n  return function withMaxBlocks(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply} = editor\n    editor.apply = (operation) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(operation)\n        return\n      }\n\n      const rows = editorActor.getSnapshot().context.maxBlocks ?? -1\n      if (rows > 0 && editor.children.length >= rows) {\n        if (\n          (operation.type === 'insert_node' ||\n            operation.type === 'split_node') &&\n          operation.path.length === 1\n        ) {\n          return\n        }\n      }\n      apply(operation)\n    }\n    return editor\n  }\n}\n","import {Editor, Element, Node, Transforms} from 'slate'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * This plugin makes sure that every new node in the editor get a new _key prop when created\n *\n */\nexport function createWithObjectKeys(editorActor: EditorActor) {\n  return function withKeys(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply, normalizeNode} = editor\n\n    // The default behavior is to always generate a new key here.\n    // For example, when undoing and redoing we want to retain the keys, but\n    // when we create a new bold span by splitting a non-bold-span we want the produced node to get a new key.\n    editor.apply = (operation) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(operation)\n        return\n      }\n\n      if (operation.type === 'split_node') {\n        const existingKeys = [...Node.descendants(editor)].map(\n          ([node]) => node._key,\n        )\n\n        apply({\n          ...operation,\n          properties: {\n            ...operation.properties,\n            _key:\n              operation.properties._key === undefined ||\n              existingKeys.includes(operation.properties._key)\n                ? editorActor.getSnapshot().context.keyGenerator()\n                : operation.properties._key,\n          },\n        })\n\n        return\n      }\n\n      if (operation.type === 'insert_node') {\n        if (!Editor.isEditor(operation.node)) {\n          const existingKeys = [...Node.descendants(editor)].map(\n            ([node]) => node._key,\n          )\n\n          apply({\n            ...operation,\n            node: {\n              ...operation.node,\n              _key:\n                operation.node._key === undefined ||\n                existingKeys.includes(operation.node._key)\n                  ? editorActor.getSnapshot().context.keyGenerator()\n                  : operation.node._key,\n            },\n          })\n\n          return\n        }\n      }\n\n      apply(operation)\n    }\n\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n      if (\n        Element.isElement(node) &&\n        node._type === editorActor.getSnapshot().context.schema.block.name\n      ) {\n        // Set key on block itself\n        if (!node._key) {\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(\n            editor,\n            {_key: editorActor.getSnapshot().context.keyGenerator()},\n            {at: path},\n          )\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n        // Set keys on it's children\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (!child._key) {\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {_key: editorActor.getSnapshot().context.keyGenerator()},\n              {at: childPath},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n      normalizeNode(entry)\n    }\n\n    return editor\n  }\n}\n","import {\n  applyAll,\n  type DiffMatchPatch,\n  type InsertPatch,\n  type Patch,\n  type SetPatch,\n  type UnsetPatch,\n} from '@portabletext/patches'\nimport {\n  cleanupEfficiency,\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  applyPatches as diffMatchPatchApplyPatches,\n  makeDiff,\n  parsePatch,\n} from '@sanity/diff-match-patch'\nimport type {\n  KeyedSegment,\n  Path,\n  PathSegment,\n  PortableTextBlock,\n  PortableTextChild,\n} from '@sanity/types'\nimport {\n  Element,\n  Node,\n  Text,\n  Transforms,\n  type Descendant,\n  type Path as SlatePath,\n} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {debugWithName} from './debug'\nimport {isEqualToEmptyEditor, toSlateValue} from './values'\nimport {KEY_TO_SLATE_ELEMENT} from './weakMaps'\n\nconst debug = debugWithName('applyPatches')\nconst debugVerbose = debug.enabled && true\n\n/**\n * Creates a function that can apply a patch onto a PortableTextSlateEditor.\n */\nexport function createApplyPatch(\n  schema: EditorSchema,\n): (editor: PortableTextSlateEditor, patch: Patch) => boolean {\n  return (editor: PortableTextSlateEditor, patch: Patch): boolean => {\n    let changed = false\n\n    // Save some CPU cycles by not stringifying unless enabled\n    if (debugVerbose) {\n      debug(\n        '\\n\\nNEW PATCH =============================================================',\n      )\n      debug(JSON.stringify(patch, null, 2))\n    }\n\n    try {\n      switch (patch.type) {\n        case 'insert':\n          changed = insertPatch(editor, patch, schema)\n          break\n        case 'unset':\n          changed = unsetPatch(editor, patch)\n          break\n        case 'set':\n          changed = setPatch(editor, patch)\n          break\n        case 'diffMatchPatch':\n          changed = diffMatchPatch(editor, patch)\n          break\n        default:\n          debug('Unhandled patch', patch.type)\n      }\n    } catch (err) {\n      console.error(err)\n    }\n\n    return changed\n  }\n}\n\n/**\n * Apply a remote diff match patch to the current PTE instance.\n * Note meant for external consumption, only exported for testing purposes.\n *\n * @param editor - Portable text slate editor instance\n * @param patch - The PTE diff match patch operation to apply\n * @returns true if the patch was applied, false otherwise\n * @internal\n */\nexport function diffMatchPatch(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  patch: DiffMatchPatch,\n): boolean {\n  const {block, child, childPath} = findBlockAndChildFromPath(\n    editor,\n    patch.path,\n  )\n  if (!block) {\n    debug('Block not found')\n    return false\n  }\n  if (!child || !childPath) {\n    debug('Child not found')\n    return false\n  }\n  const isSpanTextDiffMatchPatch =\n    block &&\n    editor.isTextBlock(block) &&\n    patch.path.length === 4 &&\n    patch.path[1] === 'children' &&\n    patch.path[3] === 'text'\n\n  if (!isSpanTextDiffMatchPatch || !Text.isText(child)) {\n    return false\n  }\n\n  const patches = parsePatch(patch.value)\n  const [newValue] = diffMatchPatchApplyPatches(patches, child.text, {\n    allowExceedingIndices: true,\n  })\n  const diff = cleanupEfficiency(makeDiff(child.text, newValue), 5)\n\n  debugState(editor, 'before')\n  let offset = 0\n  for (const [op, text] of diff) {\n    if (op === DIFF_INSERT) {\n      editor.apply({type: 'insert_text', path: childPath, offset, text})\n      offset += text.length\n    } else if (op === DIFF_DELETE) {\n      editor.apply({type: 'remove_text', path: childPath, offset: offset, text})\n    } else if (op === DIFF_EQUAL) {\n      offset += text.length\n    }\n  }\n  debugState(editor, 'after')\n\n  return true\n}\n\nfunction insertPatch(\n  editor: PortableTextSlateEditor,\n  patch: InsertPatch,\n  schema: EditorSchema,\n) {\n  const {\n    block: targetBlock,\n    child: targetChild,\n    blockPath: targetBlockPath,\n    childPath: targetChildPath,\n  } = findBlockAndChildFromPath(editor, patch.path)\n  if (!targetBlock || !targetBlockPath) {\n    debug('Block not found')\n    return false\n  }\n  if (patch.path.length > 1 && patch.path[1] !== 'children') {\n    debug('Ignoring patch targeting void value')\n    return false\n  }\n  // Insert blocks\n  if (patch.path.length === 1) {\n    const {items, position} = patch\n    const blocksToInsert = toSlateValue(\n      items as PortableTextBlock[],\n      {schemaTypes: schema},\n      KEY_TO_SLATE_ELEMENT.get(editor),\n    ) as Descendant[]\n    const targetBlockIndex = targetBlockPath[0]\n    const normalizedIdx =\n      position === 'after' ? targetBlockIndex + 1 : targetBlockIndex\n\n    debug(`Inserting blocks at path [${normalizedIdx}]`)\n    debugState(editor, 'before')\n\n    const editorWasEmptyBefore = isEqualToEmptyEditor(editor.children, schema)\n\n    Transforms.insertNodes(editor, blocksToInsert, {at: [normalizedIdx]})\n\n    if (\n      editorWasEmptyBefore &&\n      typeof patch.path[0] === 'number' &&\n      patch.path[0] === 0\n    ) {\n      Transforms.removeNodes(editor, {\n        at: [position === 'before' ? targetBlockIndex + 1 : targetBlockIndex],\n      })\n    }\n\n    debugState(editor, 'after')\n    return true\n  }\n  // Insert children\n  const {items, position} = patch\n  if (!targetChild || !targetChildPath) {\n    debug('Child not found')\n    return false\n  }\n  const childrenToInsert =\n    targetBlock &&\n    toSlateValue(\n      [{...targetBlock, children: items as PortableTextChild[]}],\n      {schemaTypes: schema},\n      KEY_TO_SLATE_ELEMENT.get(editor),\n    )\n  const targetChildIndex = targetChildPath[1]\n  const normalizedIdx =\n    position === 'after' ? targetChildIndex + 1 : targetChildIndex\n  const childInsertPath = [targetChildPath[0], normalizedIdx]\n  debug(`Inserting children at path ${childInsertPath}`)\n  debugState(editor, 'before')\n  if (childrenToInsert && Element.isElement(childrenToInsert[0])) {\n    Transforms.insertNodes(editor, childrenToInsert[0].children, {\n      at: childInsertPath,\n    })\n  }\n  debugState(editor, 'after')\n  return true\n}\n\nfunction setPatch(editor: PortableTextSlateEditor, patch: SetPatch) {\n  let value = patch.value\n  if (typeof patch.path[3] === 'string') {\n    value = {}\n    value[patch.path[3]] = patch.value\n  }\n  const {block, blockPath, child, childPath} = findBlockAndChildFromPath(\n    editor,\n    patch.path,\n  )\n\n  if (!block) {\n    debug('Block not found')\n    return false\n  }\n  const isTextBlock = editor.isTextBlock(block)\n\n  // Ignore patches targeting nested void data, like 'markDefs'\n  if (isTextBlock && patch.path.length > 1 && patch.path[1] !== 'children') {\n    debug('Ignoring setting void value')\n    return false\n  }\n\n  debugState(editor, 'before')\n\n  // If this is targeting a text block child\n  if (isTextBlock && child && childPath) {\n    if (Text.isText(value) && Text.isText(child)) {\n      const newText = child.text\n      const oldText = value.text\n      if (oldText !== newText) {\n        debug('Setting text property')\n        editor.apply({\n          type: 'remove_text',\n          path: childPath,\n          offset: 0,\n          text: newText,\n        })\n        editor.apply({\n          type: 'insert_text',\n          path: childPath,\n          offset: 0,\n          text: value.text,\n        })\n        // call OnChange here to emit the new selection\n        // the user's selection might be interfering with\n        editor.onChange()\n      }\n    } else {\n      debug('Setting non-text property')\n      editor.apply({\n        type: 'set_node',\n        path: childPath,\n        properties: {},\n        newProperties: value as Partial<Node>,\n      })\n    }\n    return true\n  } else if (Element.isElement(block) && patch.path.length === 1 && blockPath) {\n    debug('Setting block property')\n    const {children, ...nextRest} = value as unknown as PortableTextBlock\n    const {children: prevChildren, ...prevRest} = block || {children: undefined}\n    // Set any block properties\n    editor.apply({\n      type: 'set_node',\n      path: blockPath,\n      properties: {...prevRest},\n      newProperties: nextRest,\n    })\n    // Replace the children in the block\n    // Note that children must be explicitly inserted, and can't be set with set_node\n    debug('Setting children')\n    block.children.forEach((c, cIndex) => {\n      editor.apply({\n        type: 'remove_node',\n        path: blockPath.concat(block.children.length - 1 - cIndex),\n        node: c,\n      })\n    })\n    if (Array.isArray(children)) {\n      children.forEach((c, cIndex) => {\n        editor.apply({\n          type: 'insert_node',\n          path: blockPath.concat(cIndex),\n          node: c,\n        })\n      })\n    }\n  } else if (block && 'value' in block) {\n    if (patch.path.length > 1 && patch.path[1] !== 'children') {\n      const newVal = applyAll(block.value, [\n        {\n          ...patch,\n          path: patch.path.slice(1),\n        },\n      ])\n      Transforms.setNodes(editor, {...block, value: newVal}, {at: blockPath})\n    } else {\n      return false\n    }\n  }\n  debugState(editor, 'after')\n  return true\n}\n\nfunction unsetPatch(editor: PortableTextSlateEditor, patch: UnsetPatch) {\n  // Value\n  if (patch.path.length === 0) {\n    debug('Removing everything')\n    debugState(editor, 'before')\n    const previousSelection = editor.selection\n    Transforms.deselect(editor)\n\n    const children = Node.children(editor, [], {\n      reverse: true,\n    })\n\n    for (const [_, path] of children) {\n      Transforms.removeNodes(editor, {at: path})\n    }\n\n    Transforms.insertNodes(editor, editor.pteCreateTextBlock({decorators: []}))\n    if (previousSelection) {\n      Transforms.select(editor, {\n        anchor: {path: [0, 0], offset: 0},\n        focus: {path: [0, 0], offset: 0},\n      })\n    }\n    // call OnChange here to emit the new selection\n    editor.onChange()\n    debugState(editor, 'after')\n    return true\n  }\n  const {block, blockPath, child, childPath} = findBlockAndChildFromPath(\n    editor,\n    patch.path,\n  )\n\n  // Single blocks\n  if (patch.path.length === 1) {\n    if (!block || !blockPath) {\n      debug('Block not found')\n      return false\n    }\n    const blockIndex = blockPath[0]\n    debug(`Removing block at path [${blockIndex}]`)\n    debugState(editor, 'before')\n\n    Transforms.removeNodes(editor, {at: [blockIndex]})\n    debugState(editor, 'after')\n    return true\n  }\n\n  // Unset on text block children\n  if (\n    editor.isTextBlock(block) &&\n    patch.path[1] === 'children' &&\n    patch.path.length === 3\n  ) {\n    if (!child || !childPath) {\n      debug('Child not found')\n      return false\n    }\n    debug(`Unsetting child at path ${JSON.stringify(childPath)}`)\n    debugState(editor, 'before')\n    if (debugVerbose) {\n      debug(`Removing child at path ${JSON.stringify(childPath)}`)\n    }\n    Transforms.removeNodes(editor, {at: childPath})\n    debugState(editor, 'after')\n    return true\n  }\n  return false\n}\n\nfunction isKeyedSegment(segment: PathSegment): segment is KeyedSegment {\n  return typeof segment === 'object' && '_key' in segment\n}\n\nfunction debugState(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection'\n  >,\n  stateName: string,\n) {\n  if (!debugVerbose) {\n    return\n  }\n\n  debug(`Children ${stateName}:`, JSON.stringify(editor.children, null, 2))\n  debug(`Selection ${stateName}: `, JSON.stringify(editor.selection, null, 2))\n}\n\nfunction findBlockFromPath(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  path: Path,\n): {block?: Descendant; path?: SlatePath} {\n  let blockIndex = -1\n  const block = editor.children.find((node: Descendant, index: number) => {\n    const isMatch = isKeyedSegment(path[0])\n      ? node._key === path[0]._key\n      : index === path[0]\n    if (isMatch) {\n      blockIndex = index\n    }\n    return isMatch\n  })\n  if (!block) {\n    return {}\n  }\n  return {block, path: [blockIndex] as SlatePath}\n}\n\nfunction findBlockAndChildFromPath(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  path: Path,\n): {\n  child?: Descendant\n  childPath?: SlatePath\n  block?: Descendant\n  blockPath?: SlatePath\n} {\n  const {block, path: blockPath} = findBlockFromPath(editor, path)\n  if (!(Element.isElement(block) && path[1] === 'children')) {\n    return {block, blockPath, child: undefined, childPath: undefined}\n  }\n  let childIndex = -1\n  const child = block.children.find((node, index: number) => {\n    const isMatch = isKeyedSegment(path[2])\n      ? node._key === path[2]._key\n      : index === path[2]\n    if (isMatch) {\n      childIndex = index\n    }\n    return isMatch\n  })\n  if (!child) {\n    return {block, blockPath, child: undefined, childPath: undefined}\n  }\n  return {\n    block,\n    child,\n    blockPath,\n    childPath: blockPath?.concat(childIndex) as SlatePath,\n  }\n}\n","import {\n  diffMatchPatch,\n  insert,\n  set,\n  setIfMissing,\n  unset,\n  type InsertPosition,\n  type Patch,\n} from '@portabletext/patches'\nimport type {Path, PortableTextSpan, PortableTextTextBlock} from '@sanity/types'\nimport {get, isUndefined, omitBy} from 'lodash'\nimport {\n  Text,\n  type Descendant,\n  type InsertNodeOperation,\n  type InsertTextOperation,\n  type MergeNodeOperation,\n  type MoveNodeOperation,\n  type RemoveNodeOperation,\n  type RemoveTextOperation,\n  type SetNodeOperation,\n  type SplitNodeOperation,\n} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport {isSpan, isTextBlock} from './parse-blocks'\nimport {fromSlateValue} from './values'\n\nexport function insertTextPatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: InsertTextOperation,\n  beforeValue: Descendant[],\n): Array<Patch> {\n  const block =\n    isTextBlock({schema}, children[operation.path[0]]) &&\n    children[operation.path[0]]\n  if (!block) {\n    throw new Error('Could not find block')\n  }\n  const textChild =\n    isTextBlock({schema}, block) &&\n    isSpan({schema}, block.children[operation.path[1]]) &&\n    (block.children[operation.path[1]] as PortableTextSpan)\n  if (!textChild) {\n    throw new Error('Could not find child')\n  }\n  const path: Path = [\n    {_key: block._key},\n    'children',\n    {_key: textChild._key},\n    'text',\n  ]\n  const prevBlock = beforeValue[operation.path[0]]\n  const prevChild =\n    isTextBlock({schema}, prevBlock) && prevBlock.children[operation.path[1]]\n  const prevText = isSpan({schema}, prevChild) ? prevChild.text : ''\n  const patch = diffMatchPatch(prevText, textChild.text, path)\n  return patch.value.length ? [patch] : []\n}\n\nexport function removeTextPatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: RemoveTextOperation,\n  beforeValue: Descendant[],\n): Array<Patch> {\n  const block = children[operation.path[0]]\n  if (!block) {\n    throw new Error('Could not find block')\n  }\n  const child =\n    (isTextBlock({schema}, block) && block.children[operation.path[1]]) ||\n    undefined\n  const textChild: PortableTextSpan | undefined = isSpan({schema}, child)\n    ? child\n    : undefined\n  if (child && !textChild) {\n    throw new Error('Expected span')\n  }\n  if (!textChild) {\n    throw new Error('Could not find child')\n  }\n  const path: Path = [\n    {_key: block._key},\n    'children',\n    {_key: textChild._key},\n    'text',\n  ]\n  const beforeBlock = beforeValue[operation.path[0]]\n  const prevTextChild =\n    isTextBlock({schema}, beforeBlock) &&\n    beforeBlock.children[operation.path[1]]\n  const prevText = isSpan({schema}, prevTextChild) && prevTextChild.text\n  const patch = diffMatchPatch(prevText || '', textChild.text, path)\n  return patch.value ? [patch] : []\n}\n\nexport function setNodePatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: SetNodeOperation,\n): Array<Patch> {\n  if (operation.path.length === 1) {\n    const block = children[operation.path[0]]\n    if (typeof block._key !== 'string') {\n      throw new Error('Expected block to have a _key')\n    }\n    const setNode = omitBy(\n      {...children[operation.path[0]], ...operation.newProperties},\n      isUndefined,\n    ) as unknown as Descendant\n    return [\n      set(fromSlateValue([setNode], schema.block.name)[0], [\n        {_key: block._key},\n      ]),\n    ]\n  } else if (operation.path.length === 2) {\n    const block = children[operation.path[0]]\n    if (isTextBlock({schema}, block)) {\n      const child = block.children[operation.path[1]]\n      if (child) {\n        const blockKey = block._key\n        const childKey = child._key\n        const patches: Patch[] = []\n        const keys = Object.keys(operation.newProperties)\n        keys.forEach((keyName) => {\n          // Special case for setting _key on a child. We have to target it by index and not the _key.\n          if (keys.length === 1 && keyName === '_key') {\n            const val = get(operation.newProperties, keyName)\n            patches.push(\n              set(val, [\n                {_key: blockKey},\n                'children',\n                block.children.indexOf(child),\n                keyName,\n              ]),\n            )\n          } else {\n            const val = get(operation.newProperties, keyName)\n            patches.push(\n              set(val, [\n                {_key: blockKey},\n                'children',\n                {_key: childKey},\n                keyName,\n              ]),\n            )\n          }\n        })\n        return patches\n      }\n      throw new Error('Could not find a valid child')\n    }\n    throw new Error('Could not find a valid block')\n  } else {\n    throw new Error(\n      `Unexpected path encountered: ${JSON.stringify(operation.path)}`,\n    )\n  }\n}\n\nexport function insertNodePatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: InsertNodeOperation,\n  beforeValue: Descendant[],\n): Array<Patch> {\n  const block = beforeValue[operation.path[0]]\n  if (operation.path.length === 1) {\n    const position = operation.path[0] === 0 ? 'before' : 'after'\n    const beforeBlock = beforeValue[operation.path[0] - 1]\n    const targetKey = operation.path[0] === 0 ? block?._key : beforeBlock?._key\n    if (targetKey) {\n      return [\n        insert(\n          [\n            fromSlateValue(\n              [operation.node as Descendant],\n              schema.block.name,\n            )[0],\n          ],\n          position,\n          [{_key: targetKey}],\n        ),\n      ]\n    }\n    return [\n      setIfMissing(beforeValue, []),\n      insert(\n        [fromSlateValue([operation.node as Descendant], schema.block.name)[0]],\n        'before',\n        [operation.path[0]],\n      ),\n    ]\n  } else if (\n    isTextBlock({schema}, block) &&\n    operation.path.length === 2 &&\n    children[operation.path[0]]\n  ) {\n    const position =\n      block.children.length === 0 || !block.children[operation.path[1] - 1]\n        ? 'before'\n        : 'after'\n    const node = {...operation.node} as Descendant\n    if (!node._type && Text.isText(node)) {\n      node._type = 'span'\n      node.marks = []\n    }\n    const blk = fromSlateValue(\n      [\n        {\n          _key: 'bogus',\n          _type: schema.block.name,\n          children: [node],\n        },\n      ],\n      schema.block.name,\n    )[0] as PortableTextTextBlock\n    const child = blk.children[0]\n    return [\n      insert([child], position, [\n        {_key: block._key},\n        'children',\n        block.children.length <= 1 || !block.children[operation.path[1] - 1]\n          ? 0\n          : {_key: block.children[operation.path[1] - 1]._key},\n      ]),\n    ]\n  }\n  return []\n}\n\nexport function splitNodePatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: SplitNodeOperation,\n  beforeValue: Descendant[],\n): Array<Patch> {\n  const patches: Patch[] = []\n  const splitBlock = children[operation.path[0]]\n  if (!isTextBlock({schema}, splitBlock)) {\n    throw new Error(\n      `Block with path ${JSON.stringify(\n        operation.path[0],\n      )} is not a text block and can't be split`,\n    )\n  }\n  if (operation.path.length === 1) {\n    const oldBlock = beforeValue[operation.path[0]]\n    if (isTextBlock({schema}, oldBlock)) {\n      const targetValue = fromSlateValue(\n        [children[operation.path[0] + 1]],\n        schema.block.name,\n      )[0]\n      if (targetValue) {\n        patches.push(insert([targetValue], 'after', [{_key: splitBlock._key}]))\n        const spansToUnset = oldBlock.children.slice(operation.position)\n        spansToUnset.forEach((span) => {\n          const path = [{_key: oldBlock._key}, 'children', {_key: span._key}]\n          patches.push(unset(path))\n        })\n      }\n    }\n    return patches\n  }\n  if (operation.path.length === 2) {\n    const splitSpan = splitBlock.children[operation.path[1]]\n    if (isSpan({schema}, splitSpan)) {\n      const targetSpans = (\n        fromSlateValue(\n          [\n            {\n              ...splitBlock,\n              children: splitBlock.children.slice(\n                operation.path[1] + 1,\n                operation.path[1] + 2,\n              ),\n            } as Descendant,\n          ],\n          schema.block.name,\n        )[0] as PortableTextTextBlock\n      ).children\n\n      patches.push(\n        insert(targetSpans, 'after', [\n          {_key: splitBlock._key},\n          'children',\n          {_key: splitSpan._key},\n        ]),\n      )\n      patches.push(\n        set(splitSpan.text, [\n          {_key: splitBlock._key},\n          'children',\n          {_key: splitSpan._key},\n          'text',\n        ]),\n      )\n    }\n    return patches\n  }\n  return patches\n}\n\nexport function removeNodePatch(\n  schema: EditorSchema,\n  beforeValue: Descendant[],\n  operation: RemoveNodeOperation,\n): Array<Patch> {\n  const block = beforeValue[operation.path[0]]\n  if (operation.path.length === 1) {\n    // Remove a single block\n    if (block && block._key) {\n      return [unset([{_key: block._key}])]\n    }\n    throw new Error('Block not found')\n  } else if (isTextBlock({schema}, block) && operation.path.length === 2) {\n    const spanToRemove = block.children[operation.path[1]]\n\n    if (spanToRemove) {\n      const spansMatchingKey = block.children.filter(\n        (span) => span._key === operation.node._key,\n      )\n\n      if (spansMatchingKey.length > 1) {\n        console.warn(\n          `Multiple spans have \\`_key\\` ${operation.node._key}. It's ambiguous which one to remove.`,\n          JSON.stringify(block, null, 2),\n        )\n        return []\n      }\n\n      return [\n        unset([{_key: block._key}, 'children', {_key: spanToRemove._key}]),\n      ]\n    }\n    return []\n  } else {\n    return []\n  }\n}\n\nexport function mergeNodePatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: MergeNodeOperation,\n  beforeValue: Descendant[],\n): Array<Patch> {\n  const patches: Patch[] = []\n\n  const block = beforeValue[operation.path[0]]\n  const updatedBlock = children[operation.path[0]]\n\n  if (operation.path.length === 1) {\n    if (block?._key) {\n      const newBlock = fromSlateValue(\n        [children[operation.path[0] - 1]],\n        schema.block.name,\n      )[0]\n      patches.push(set(newBlock, [{_key: newBlock._key}]))\n      patches.push(unset([{_key: block._key}]))\n    } else {\n      throw new Error('Target key not found!')\n    }\n  } else if (\n    isTextBlock({schema}, block) &&\n    isTextBlock({schema}, updatedBlock) &&\n    operation.path.length === 2\n  ) {\n    const updatedSpan =\n      updatedBlock.children[operation.path[1] - 1] &&\n      isSpan({schema}, updatedBlock.children[operation.path[1] - 1])\n        ? updatedBlock.children[operation.path[1] - 1]\n        : undefined\n    const removedSpan =\n      block.children[operation.path[1]] &&\n      isSpan({schema}, block.children[operation.path[1]])\n        ? block.children[operation.path[1]]\n        : undefined\n\n    if (updatedSpan) {\n      const spansMatchingKey = block.children.filter(\n        (span) => span._key === updatedSpan._key,\n      )\n\n      if (spansMatchingKey.length === 1) {\n        patches.push(\n          set(updatedSpan.text, [\n            {_key: block._key},\n            'children',\n            {_key: updatedSpan._key},\n            'text',\n          ]),\n        )\n      } else {\n        console.warn(\n          `Multiple spans have \\`_key\\` ${updatedSpan._key}. It's ambiguous which one to update.`,\n          JSON.stringify(block, null, 2),\n        )\n      }\n    }\n\n    if (removedSpan) {\n      const spansMatchingKey = block.children.filter(\n        (span) => span._key === removedSpan._key,\n      )\n\n      if (spansMatchingKey.length === 1) {\n        patches.push(\n          unset([{_key: block._key}, 'children', {_key: removedSpan._key}]),\n        )\n      } else {\n        console.warn(\n          `Multiple spans have \\`_key\\` ${removedSpan._key}. It's ambiguous which one to remove.`,\n          JSON.stringify(block, null, 2),\n        )\n      }\n    }\n  }\n  return patches\n}\n\nexport function moveNodePatch(\n  schema: EditorSchema,\n  beforeValue: Descendant[],\n  operation: MoveNodeOperation,\n): Array<Patch> {\n  const patches: Patch[] = []\n  const block = beforeValue[operation.path[0]]\n  const targetBlock = beforeValue[operation.newPath[0]]\n\n  if (!targetBlock) {\n    return patches\n  }\n\n  if (operation.path.length === 1) {\n    const position: InsertPosition =\n      operation.path[0] > operation.newPath[0] ? 'before' : 'after'\n    patches.push(unset([{_key: block._key}]))\n    patches.push(\n      insert([fromSlateValue([block], schema.block.name)[0]], position, [\n        {_key: targetBlock._key},\n      ]),\n    )\n  } else if (\n    operation.path.length === 2 &&\n    isTextBlock({schema}, block) &&\n    isTextBlock({schema}, targetBlock)\n  ) {\n    const child = block.children[operation.path[1]]\n    const targetChild = targetBlock.children[operation.newPath[1]]\n    const position =\n      operation.newPath[1] === targetBlock.children.length ? 'after' : 'before'\n    const childToInsert = (\n      fromSlateValue([block], schema.block.name)[0] as PortableTextTextBlock\n    ).children[operation.path[1]]\n    patches.push(unset([{_key: block._key}, 'children', {_key: child._key}]))\n    patches.push(\n      insert([childToInsert], position, [\n        {_key: targetBlock._key},\n        'children',\n        {_key: targetChild._key},\n      ]),\n    )\n  }\n  return patches\n}\n","import type {Editor} from 'slate'\n\nexport const PATCHING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withoutPatching(editor: Editor, fn: () => void): void {\n  const prev = isPatching(editor)\n  PATCHING.set(editor, false)\n  fn()\n  PATCHING.set(editor, prev)\n}\n\nexport function isPatching(editor: Editor): boolean | undefined {\n  return PATCHING.get(editor)\n}\n","import {insert, setIfMissing, unset, type Patch} from '@portabletext/patches'\nimport {Editor, type Descendant, type Operation} from 'slate'\nimport {createApplyPatch} from '../../internal-utils/applyPatch'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {\n  insertNodePatch,\n  insertTextPatch,\n  mergeNodePatch,\n  moveNodePatch,\n  removeNodePatch,\n  removeTextPatch,\n  setNodePatch,\n  splitNodePatch,\n} from '../../internal-utils/operation-to-patches'\nimport {fromSlateValue, isEqualToEmptyEditor} from '../../internal-utils/values'\nimport {\n  IS_PROCESSING_REMOTE_CHANGES,\n  KEY_TO_VALUE_ELEMENT,\n} from '../../internal-utils/weakMaps'\nimport {withRemoteChanges} from '../../internal-utils/withChanges'\nimport {\n  isPatching,\n  PATCHING,\n  withoutPatching,\n} from '../../internal-utils/withoutPatching'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport type {RelayActor} from '../relay-machine'\nimport {getCurrentOperationId} from '../with-applying-behavior-operations'\nimport {withoutSaving} from './createWithUndoRedo'\n\nconst debug = debugWithName('plugin:withPatches')\nconst debugVerbose = false\n\ninterface Options {\n  editorActor: EditorActor\n  relayActor: RelayActor\n  subscriptions: Array<() => () => void>\n}\n\nexport function createWithPatches({\n  editorActor,\n  relayActor,\n  subscriptions,\n}: Options): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  // The previous editor children are needed to figure out the _key of deleted nodes\n  // The editor.children would no longer contain that information if the node is already deleted.\n  let previousChildren: Descendant[]\n\n  const applyPatch = createApplyPatch(editorActor.getSnapshot().context.schema)\n\n  return function withPatches(editor: PortableTextSlateEditor) {\n    IS_PROCESSING_REMOTE_CHANGES.set(editor, false)\n    PATCHING.set(editor, true)\n    previousChildren = [...editor.children]\n\n    const {apply} = editor\n    let bufferedPatches: Patch[] = []\n\n    const handleBufferedRemotePatches = () => {\n      if (bufferedPatches.length === 0) {\n        return\n      }\n      const patches = bufferedPatches\n      bufferedPatches = []\n      let changed = false\n\n      withRemoteChanges(editor, () => {\n        Editor.withoutNormalizing(editor, () => {\n          withoutPatching(editor, () => {\n            withoutSaving(editor, () => {\n              for (const patch of patches) {\n                if (debug.enabled)\n                  debug(`Handling remote patch ${JSON.stringify(patch)}`)\n\n                try {\n                  changed = applyPatch(editor, patch)\n                } catch (error) {\n                  console.error(\n                    `Applying patch ${JSON.stringify(patch)} failed due to: ${error.message}`,\n                  )\n                }\n              }\n            })\n          })\n        })\n        if (changed) {\n          editor.normalize()\n          editor.onChange()\n        }\n      })\n    }\n\n    const handlePatches = ({patches}: {patches: Patch[]}) => {\n      const remotePatches = patches.filter((p) => p.origin !== 'local')\n      if (remotePatches.length === 0) {\n        return\n      }\n      bufferedPatches = bufferedPatches.concat(remotePatches)\n      handleBufferedRemotePatches()\n    }\n\n    subscriptions.push(() => {\n      debug('Subscribing to remote patches')\n      const sub = editorActor.on('patches', handlePatches)\n      return () => {\n        debug('Unsubscribing to remote patches')\n        sub.unsubscribe()\n      }\n    })\n\n    editor.apply = (operation: Operation): void | Editor => {\n      let patches: Patch[] = []\n\n      // Update previous children here before we apply\n      previousChildren = editor.children\n\n      const editorWasEmpty = isEqualToEmptyEditor(\n        previousChildren,\n        editorActor.getSnapshot().context.schema,\n      )\n\n      // Apply the operation\n      apply(operation)\n\n      const editorIsEmpty = isEqualToEmptyEditor(\n        editor.children,\n        editorActor.getSnapshot().context.schema,\n      )\n\n      if (!isPatching(editor)) {\n        if (debugVerbose && debug.enabled)\n          debug(\n            `Editor is not producing patch for operation ${operation.type}`,\n            operation,\n          )\n        return editor\n      }\n\n      // If the editor was empty and now isn't, insert the placeholder into it.\n      if (\n        editorWasEmpty &&\n        !editorIsEmpty &&\n        operation.type !== 'set_selection'\n      ) {\n        patches.push(insert(previousChildren, 'before', [0]))\n      }\n\n      switch (operation.type) {\n        case 'insert_text':\n          patches = [\n            ...patches,\n            ...insertTextPatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'remove_text':\n          patches = [\n            ...patches,\n            ...removeTextPatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'remove_node':\n          patches = [\n            ...patches,\n            ...removeNodePatch(\n              editorActor.getSnapshot().context.schema,\n              previousChildren,\n              operation,\n            ),\n          ]\n          break\n        case 'split_node':\n          patches = [\n            ...patches,\n            ...splitNodePatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'insert_node':\n          patches = [\n            ...patches,\n            ...insertNodePatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'set_node':\n          patches = [\n            ...patches,\n            ...setNodePatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n            ),\n          ]\n          break\n        case 'merge_node':\n          patches = [\n            ...patches,\n            ...mergeNodePatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'move_node':\n          patches = [\n            ...patches,\n            ...moveNodePatch(\n              editorActor.getSnapshot().context.schema,\n              previousChildren,\n              operation,\n            ),\n          ]\n          break\n        default:\n        // Do nothing\n      }\n\n      // Unset the value if a operation made the editor empty\n      if (\n        !editorWasEmpty &&\n        editorIsEmpty &&\n        ['merge_node', 'set_node', 'remove_text', 'remove_node'].includes(\n          operation.type,\n        )\n      ) {\n        patches = [...patches, unset([])]\n        relayActor.send({\n          type: 'unset',\n          previousValue: fromSlateValue(\n            previousChildren,\n            editorActor.getSnapshot().context.schema.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n        })\n      }\n\n      // Prepend patches with setIfMissing if going from empty editor to something involving a patch.\n      if (editorWasEmpty && patches.length > 0) {\n        patches = [setIfMissing([], []), ...patches]\n      }\n\n      // Emit all patches\n      if (patches.length > 0) {\n        for (const patch of patches) {\n          editorActor.send({\n            type: 'internal.patch',\n            patch: {...patch, origin: 'local'},\n            operationId: getCurrentOperationId(editor),\n            value: fromSlateValue(\n              editor.children,\n              editorActor.getSnapshot().context.schema.block.name,\n              KEY_TO_VALUE_ELEMENT.get(editor),\n            ),\n          })\n        }\n      }\n      return editor\n    }\n    return editor\n  }\n}\n","import {Editor, Path} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {SlateTextBlock, VoidElement} from '../../types/slate'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPlaceholderBlock')\n\n/**\n * Keep a \"placeholder\" block present when the editor is empty\n *\n */\nexport function createWithPlaceholderBlock(\n  editorActor: EditorActor,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPlaceholderBlock(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply} = editor\n\n    editor.apply = (op) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      if (op.type === 'remove_node') {\n        const node = op.node as SlateTextBlock | VoidElement\n        if (op.path[0] === 0 && Editor.isVoid(editor, node)) {\n          // Check next path, if it exists, do nothing\n          const nextPath = Path.next(op.path)\n          // Is removing the first block which is a void (not a text block), add a new empty text block in it, if there is no other element in the next path\n          if (!editor.children[nextPath[0]]) {\n            debug('Adding placeholder block')\n            Editor.insertNode(\n              editor,\n              editor.pteCreateTextBlock({decorators: []}),\n            )\n          }\n        }\n      }\n      apply(op)\n    }\n    return editor\n  }\n}\n","import {Editor, Path, Text as SlateText, Transforms} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextBlockStyle')\n\nexport function createWithPortableTextBlockStyle(\n  editorActor: EditorActor,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const defaultStyle = editorActor.getSnapshot().context.schema.styles[0].name\n  return function withPortableTextBlockStyle(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    // Extend Slate's default normalization to reset split node to normal style\n    // if there is no text at the right end of the split.\n    const {normalizeNode} = editor\n\n    editor.normalizeNode = (nodeEntry) => {\n      const [, path] = nodeEntry\n\n      for (const op of editor.operations) {\n        if (\n          op.type === 'split_node' &&\n          op.path.length === 1 &&\n          editor.isTextBlock(op.properties) &&\n          op.properties.style !== defaultStyle &&\n          op.path[0] === path[0] &&\n          !Path.equals(path, op.path)\n        ) {\n          const [child] = Editor.node(editor, [op.path[0] + 1, 0])\n          if (SlateText.isText(child) && child.text === '') {\n            debug(`Normalizing split node to ${defaultStyle} style`, op)\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {style: defaultStyle},\n              {at: [op.path[0] + 1], voids: false},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      normalizeNode(nodeEntry)\n    }\n\n    return editor\n  }\n}\n","import type {BaseRange} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {slateRangeToSelection} from '../../internal-utils/slate-utils'\nimport {SLATE_TO_PORTABLE_TEXT_RANGE} from '../../internal-utils/weakMaps'\nimport type {EditorSelection, PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextSelections')\nconst debugVerbose = debug.enabled && false\n\n// This plugin will make sure that we emit a PT selection whenever the editor has changed.\nexport function createWithPortableTextSelections(\n  editorActor: EditorActor,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  let prevSelection: BaseRange | null = null\n  return function withPortableTextSelections(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const emitPortableTextSelection = () => {\n      if (prevSelection !== editor.selection) {\n        let ptRange: EditorSelection | null = null\n        if (editor.selection) {\n          const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n          if (existing) {\n            ptRange = existing\n          } else {\n            ptRange = slateRangeToSelection({\n              schema: editorActor.getSnapshot().context.schema,\n              editor,\n              range: editor.selection,\n            })\n            SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n          }\n        }\n        if (debugVerbose) {\n          debug(\n            `Emitting selection ${JSON.stringify(ptRange || null)} (${JSON.stringify(\n              editor.selection,\n            )})`,\n          )\n        }\n        if (ptRange) {\n          editorActor.send({type: 'update selection', selection: ptRange})\n        } else {\n          editorActor.send({type: 'update selection', selection: null})\n        }\n      }\n      prevSelection = editor.selection\n    }\n\n    const {onChange} = editor\n    editor.onChange = () => {\n      onChange()\n      if (!editorActor.getSnapshot().matches({setup: 'setting up'})) {\n        emitPortableTextSelection()\n      }\n    }\n    return editor\n  }\n}\n","import type {\n  PortableTextListBlock,\n  PortableTextSpan,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {Transforms, type Element} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {\n  isListBlock,\n  isSpan,\n  isTextBlock,\n} from '../../internal-utils/parse-blocks'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withSchemaTypes')\n/**\n * This plugin makes sure that schema types are recognized properly by Slate as blocks, voids, inlines\n *\n */\nexport function createWithSchemaTypes({\n  editorActor,\n}: {\n  editorActor: EditorActor\n}) {\n  return function withSchemaTypes(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    editor.isTextBlock = (value: unknown): value is PortableTextTextBlock => {\n      return isTextBlock(editorActor.getSnapshot().context, value)\n    }\n    editor.isTextSpan = (value: unknown): value is PortableTextSpan => {\n      return isSpan(editorActor.getSnapshot().context, value)\n    }\n    editor.isListBlock = (value: unknown): value is PortableTextListBlock => {\n      return isListBlock(editorActor.getSnapshot().context, value)\n    }\n    editor.isVoid = (element: Element): boolean => {\n      return (\n        editorActor.getSnapshot().context.schema.block.name !== element._type &&\n        (editorActor\n          .getSnapshot()\n          .context.schema.blockObjects.map((obj) => obj.name)\n          .includes(element._type) ||\n          editorActor\n            .getSnapshot()\n            .context.schema.inlineObjects.map((obj) => obj.name)\n            .includes(element._type))\n      )\n    }\n    editor.isInline = (element: Element): boolean => {\n      const inlineSchemaTypes = editorActor\n        .getSnapshot()\n        .context.schema.inlineObjects.map((obj) => obj.name)\n      return (\n        inlineSchemaTypes.includes(element._type) &&\n        '__inline' in element &&\n        element.__inline === true\n      )\n    }\n\n    // Extend Slate's default normalization\n    const {normalizeNode} = editor\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n\n      // If text block children node is missing _type, set it to the span type\n      if (node._type === undefined && path.length === 2) {\n        debug('Setting span type on text node without a type')\n        const span = node as PortableTextSpan\n        const key =\n          span._key || editorActor.getSnapshot().context.keyGenerator()\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(\n          editor,\n          {\n            ...span,\n            _type: editorActor.getSnapshot().context.schema.span.name,\n            _key: key,\n          },\n          {at: path},\n        )\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      // catches cases when the children are missing keys but excludes it when the normalize is running the node as the editor object\n      if (node._key === undefined && (path.length === 1 || path.length === 2)) {\n        debug('Setting missing key on child node without a key')\n        const key = editorActor.getSnapshot().context.keyGenerator()\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {_key: key}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      normalizeNode(entry)\n    }\n    return editor\n  }\n}\n","import {toSlateValue} from '../../internal-utils/values'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\ninterface Options {\n  editorActor: EditorActor\n}\n\n/**\n * This plugin makes various util commands available in the editor\n *\n */\nexport function createWithUtils({editorActor}: Options) {\n  return function withUtils(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    editor.pteCreateTextBlock = (options: {\n      decorators: Array<string>\n      listItem?: string\n      level?: number\n    }) => {\n      const block = toSlateValue(\n        [\n          {\n            _type: editorActor.getSnapshot().context.schema.block.name,\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n            style:\n              editorActor.getSnapshot().context.schema.styles[0].name ||\n              'normal',\n            ...(options.listItem ? {listItem: options.listItem} : {}),\n            ...(options.level ? {level: options.level} : {}),\n            markDefs: [],\n            children: [\n              {\n                _type: 'span',\n                _key: editorActor.getSnapshot().context.keyGenerator(),\n                text: '',\n                marks: options.decorators.filter((decorator) =>\n                  editorActor\n                    .getSnapshot()\n                    .context.schema.decorators.find(\n                      ({name}) => name === decorator,\n                    ),\n                ),\n              },\n            ],\n          },\n        ],\n        {schemaTypes: editorActor.getSnapshot().context.schema},\n      )[0]\n      return block\n    }\n    return editor\n  }\n}\n","import {Range} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {getNextSpan, getPreviousSpan} from './sibling-utils'\nimport {getFocusBlock, getFocusSpan, getSelectedSpans} from './slate-utils'\n\nexport type MarkState = {\n  state: 'changed' | 'unchanged'\n  marks: Array<string>\n}\n\n/**\n * Given that text is inserted at the current position, what marks should\n * be applied?\n */\nexport function getMarkState({\n  schema,\n  editor,\n}: {\n  schema: EditorSchema\n  editor: PortableTextSlateEditor\n}): MarkState | undefined {\n  if (!editor.selection) {\n    return undefined\n  }\n\n  const [block, blockPath] = getFocusBlock({\n    editor,\n  })\n  const [span, spanPath] = getFocusSpan({\n    editor,\n  })\n\n  if (!block || !editor.isTextBlock(block) || !span) {\n    return undefined\n  }\n\n  if (Range.isExpanded(editor.selection)) {\n    const selectedSpans = getSelectedSpans({editor})\n\n    let index = 0\n    let marks: Array<string> = []\n\n    for (const [span] of selectedSpans) {\n      if (index === 0) {\n        marks = span.marks ?? []\n      } else {\n        if (\n          span.marks?.length === 0 ||\n          (span.marks ?? [])?.some((mark) => !marks.includes(mark))\n        ) {\n          marks = []\n        }\n      }\n\n      index++\n    }\n\n    return {\n      state: 'unchanged',\n      marks,\n    }\n  }\n\n  const decorators = schema.decorators.map((decorator) => decorator.name)\n  const marks = span.marks ?? []\n  const marksWithoutAnnotations = marks.filter((mark) =>\n    decorators.includes(mark),\n  )\n\n  const spanHasAnnotations = marks.length > marksWithoutAnnotations.length\n\n  const spanIsEmpty = span.text.length === 0\n\n  const atTheBeginningOfSpan = editor.selection.anchor.offset === 0\n  const atTheEndOfSpan = editor.selection.anchor.offset === span.text.length\n\n  const previousSpan = getPreviousSpan({editor, blockPath, spanPath})\n  const nextSpan = getNextSpan({editor, blockPath, spanPath})\n  const nextSpanAnnotations =\n    nextSpan?.marks?.filter((mark) => !decorators.includes(mark)) ?? []\n  const spanAnnotations = marks.filter((mark) => !decorators.includes(mark))\n\n  const previousSpanHasAnnotations = previousSpan\n    ? previousSpan.marks?.some((mark) => !decorators.includes(mark))\n    : false\n  const previousSpanHasSameAnnotations = previousSpan\n    ? previousSpan.marks\n        ?.filter((mark) => !decorators.includes(mark))\n        .every((mark) => marks.includes(mark))\n    : false\n  const previousSpanHasSameAnnotation = previousSpan\n    ? previousSpan.marks?.some(\n        (mark) => !decorators.includes(mark) && marks.includes(mark),\n      )\n    : false\n\n  const previousSpanHasSameMarks = previousSpan\n    ? previousSpan.marks?.every((mark) => marks.includes(mark))\n    : false\n  const nextSpanSharesSomeAnnotations = spanAnnotations.some((mark) =>\n    nextSpanAnnotations?.includes(mark),\n  )\n\n  if (spanHasAnnotations && !spanIsEmpty) {\n    if (atTheBeginningOfSpan) {\n      if (previousSpanHasSameMarks) {\n        return {\n          state: 'changed',\n          marks: previousSpan?.marks ?? [],\n        }\n      } else if (previousSpanHasSameAnnotations) {\n        return {\n          state: 'changed',\n          marks: previousSpan?.marks ?? [],\n        }\n      } else if (previousSpanHasSameAnnotation) {\n        return {\n          state: 'unchanged',\n          marks: span.marks ?? [],\n        }\n      } else if (!previousSpan) {\n        return {\n          state: 'changed',\n          marks: [],\n        }\n      }\n    }\n\n    if (atTheEndOfSpan) {\n      if (\n        (nextSpan &&\n          nextSpanSharesSomeAnnotations &&\n          nextSpanAnnotations.length < spanAnnotations.length) ||\n        !nextSpanSharesSomeAnnotations\n      ) {\n        return {\n          state: 'changed',\n          marks: nextSpan?.marks ?? [],\n        }\n      }\n\n      if (!nextSpan) {\n        return {\n          state: 'changed',\n          marks: [],\n        }\n      }\n    }\n  }\n\n  if (atTheBeginningOfSpan && !spanIsEmpty && !!previousSpan) {\n    if (previousSpanHasAnnotations) {\n      return {\n        state: 'changed',\n        marks: [],\n      }\n    } else {\n      return {\n        state: 'changed',\n        marks: (previousSpan?.marks ?? []).filter((mark) =>\n          decorators.includes(mark),\n        ),\n      }\n    }\n  }\n\n  return {\n    state: 'unchanged',\n    marks: span.marks ?? [],\n  }\n}\n","import {getMarkState} from '../../internal-utils/mark-state'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorContext} from '../editor-snapshot'\n\nexport function pluginUpdateMarkState(\n  context: Pick<EditorContext, 'schema'>,\n  editor: PortableTextSlateEditor,\n) {\n  const {apply} = editor\n\n  editor.apply = (operation) => {\n    apply(operation)\n\n    editor.markState = getMarkState({\n      editor,\n      schema: context.schema,\n    })\n  }\n\n  return editor\n}\n","import type {EditorSchema} from '../editor/editor-schema'\nimport {isTypedObject} from './asserters'\n\ntype Path = Array<number>\n\nexport type PortableTextNode<TEditorSchema extends EditorSchema> =\n  | EditorNode<TEditorSchema>\n  | TextBlockNode<TEditorSchema>\n  | SpanNode<TEditorSchema>\n  | PartialSpanNode\n  | ObjectNode\n\n//////////\n\nexport type EditorNode<TEditorSchema extends EditorSchema> = {\n  children: Array<TextBlockNode<TEditorSchema> | ObjectNode>\n}\n\nexport function isEditorNode<TEditorSchema extends EditorSchema>(\n  node: unknown,\n): node is EditorNode<TEditorSchema> {\n  if (typeof node === 'object' && node !== null) {\n    return (\n      !('_type' in node) && 'children' in node && Array.isArray(node.children)\n    )\n  }\n\n  return false\n}\n\n//////////\n\nexport type TextBlockNode<TEditorSchema extends EditorSchema> = {\n  _key: string\n  _type: TEditorSchema['block']['name']\n  children: Array<SpanNode<TEditorSchema> | ObjectNode>\n  [other: string]: unknown\n}\n\nexport function isTextBlockNode<TEditorSchema extends EditorSchema>(\n  context: {schema: TEditorSchema},\n  node: unknown,\n): node is TextBlockNode<TEditorSchema> {\n  return isTypedObject(node) && node._type === context.schema.block.name\n}\n\n//////////\n\nexport type SpanNode<TEditorSchema extends EditorSchema> = {\n  _key: string\n  _type?: TEditorSchema['span']['name']\n  text: string\n  [other: string]: unknown\n}\n\nexport function isSpanNode<TEditorSchema extends EditorSchema>(\n  context: {schema: TEditorSchema},\n  node: unknown,\n): node is SpanNode<TEditorSchema> {\n  if (typeof node !== 'object' || node === null) {\n    return false\n  }\n\n  if ('children' in node) {\n    return false\n  }\n\n  if ('_type' in node) {\n    return node._type === context.schema.span.name\n  }\n\n  return 'text' in node\n}\n\n//////////\n\nexport type PartialSpanNode = {\n  text: string\n  [other: string]: unknown\n}\n\nexport function isPartialSpanNode(node: unknown): node is PartialSpanNode {\n  return (\n    typeof node === 'object' &&\n    node !== null &&\n    'text' in node &&\n    typeof node.text === 'string'\n  )\n}\n\n//////////\n\nexport type ObjectNode = {\n  _type: string\n  _key: string\n  [other: string]: unknown\n}\n\nexport function isObjectNode(\n  context: {schema: EditorSchema},\n  node: unknown,\n): node is ObjectNode {\n  return (\n    !isEditorNode(node) &&\n    !isTextBlockNode(context, node) &&\n    !isSpanNode(context, node) &&\n    !isPartialSpanNode(node)\n  )\n}\n\n/**\n *\n */\nexport function getBlock<TEditorSchema extends EditorSchema>(\n  root: EditorNode<TEditorSchema>,\n  path: Path,\n): TextBlockNode<TEditorSchema> | ObjectNode | undefined {\n  const index = path.at(0)\n\n  if (index === undefined || path.length !== 1) {\n    return undefined\n  }\n\n  return root.children.at(index)\n}\n\n/**\n * A \"node\" can either be\n * 1. The root (path length is 0)\n * 2. A block (path length is 1)\n * 3. A span (path length is 2)\n * 4. Or an inline object (path length is 2)\n */\nexport function getNode<TEditorSchema extends EditorSchema>(\n  context: {schema: TEditorSchema},\n  root: EditorNode<TEditorSchema>,\n  path: Path,\n): PortableTextNode<TEditorSchema> | undefined {\n  if (path.length === 0) {\n    return root\n  }\n\n  if (path.length === 1) {\n    return getBlock(root, path)\n  }\n\n  if (path.length === 2) {\n    const block = getBlock(root, path.slice(0, 1))\n\n    if (!block || !isTextBlockNode(context, block)) {\n      return undefined\n    }\n\n    const child = block.children.at(path[1])\n\n    if (!child) {\n      return undefined\n    }\n\n    return child\n  }\n}\n\nexport function getSpan<TEditorSchema extends EditorSchema>(\n  context: {schema: TEditorSchema},\n  root: EditorNode<TEditorSchema>,\n  path: Path,\n) {\n  const node = getNode(context, root, path)\n\n  if (node && isSpanNode(context, node)) {\n    return node\n  }\n\n  return undefined\n}\n\n/**\n * A parent can either be the root or a text block\n */\nexport function getParent<TEditorSchema extends EditorSchema>(\n  context: {schema: TEditorSchema},\n  root: EditorNode<TEditorSchema>,\n  path: Path,\n) {\n  if (path.length === 0) {\n    return undefined\n  }\n\n  const parentPath = path.slice(0, -1)\n\n  if (parentPath.length === 0) {\n    return root\n  }\n\n  const blockIndex = parentPath.at(0)\n\n  if (blockIndex === undefined || parentPath.length !== 1) {\n    return undefined\n  }\n\n  const block = root.children.at(blockIndex)\n\n  if (block && isTextBlockNode(context, block)) {\n    return block\n  }\n\n  return undefined\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport {createDraft, finishDraft, type WritableDraft} from 'immer'\nimport {Element, Path, type Node, type Operation} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport type {OmitFromUnion} from '../type-utils'\nimport {\n  getBlock,\n  getNode,\n  getParent,\n  getSpan,\n  isEditorNode,\n  isObjectNode,\n  isPartialSpanNode,\n  isSpanNode,\n  isTextBlockNode,\n  type PortableTextNode,\n  type SpanNode,\n  type TextBlockNode,\n} from './portable-text-node'\n\nexport function applyOperationToPortableText(\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>,\n  value: Array<PortableTextBlock>,\n  operation: OmitFromUnion<Operation, 'type', 'set_selection'>,\n) {\n  const draft = createDraft({children: value})\n\n  try {\n    applyOperationToPortableTextDraft(context, draft, operation)\n  } catch (e) {\n    console.error(e)\n  }\n\n  return finishDraft(draft).children\n}\n\nfunction applyOperationToPortableTextDraft(\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>,\n  root: WritableDraft<{\n    children: Array<PortableTextBlock>\n  }>,\n  operation: OmitFromUnion<Operation, 'type', 'set_selection'>,\n) {\n  switch (operation.type) {\n    case 'insert_node': {\n      const {path, node: insertedNode} = operation\n      const parent = getParent(context, root, path)\n      const index = path[path.length - 1]\n\n      if (!parent) {\n        break\n      }\n\n      if (index > parent.children.length) {\n        break\n      }\n\n      if (path.length === 1) {\n        // Inserting block at the root\n\n        if (isTextBlockNode(context, insertedNode)) {\n          // Text blocks can be inserted as is\n\n          parent.children.splice(index, 0, {\n            ...insertedNode,\n            children: insertedNode.children.map((child) => {\n              if ('__inline' in child) {\n                // Except for inline object children which need to have their\n                // `value` spread onto the block\n                return {\n                  _key: child._key,\n                  _type: child._type,\n                  ...('value' in child && typeof child.value === 'object'\n                    ? child.value\n                    : {}),\n                }\n              }\n\n              return child\n            }),\n          })\n\n          break\n        }\n\n        if (Element.isElement(insertedNode) && !('__inline' in insertedNode)) {\n          // Void blocks have to have their `value` spread onto the block\n\n          parent.children.splice(index, 0, {\n            _key: insertedNode._key,\n            _type: insertedNode._type,\n            ...('value' in insertedNode &&\n            typeof insertedNode.value === 'object'\n              ? insertedNode.value\n              : {}),\n          })\n          break\n        }\n      }\n\n      if (path.length === 2) {\n        // Inserting children into blocks\n\n        if (!isTextBlockNode(context, parent)) {\n          // Only text blocks can have children\n          break\n        }\n\n        if (isPartialSpanNode(insertedNode)) {\n          // Text nodes can be inserted as is\n\n          parent.children.splice(index, 0, insertedNode)\n          break\n        }\n\n        if ('__inline' in insertedNode) {\n          // Void children have to have their `value` spread onto the block\n\n          parent.children.splice(index, 0, {\n            _key: insertedNode._key,\n            _type: insertedNode._type,\n            ...('value' in insertedNode &&\n            typeof insertedNode.value === 'object'\n              ? insertedNode.value\n              : {}),\n          })\n          break\n        }\n      }\n\n      break\n    }\n\n    case 'insert_text': {\n      const {path, offset, text} = operation\n      if (text.length === 0) break\n      const span = getSpan(context, root, path)\n\n      if (!span) {\n        break\n      }\n\n      const before = span.text.slice(0, offset)\n      const after = span.text.slice(offset)\n      span.text = before + text + after\n\n      break\n    }\n\n    case 'merge_node': {\n      const {path} = operation\n      const node = getNode(context, root, path)\n      const prevPath = Path.previous(path)\n      const prev = getNode(context, root, prevPath)\n      const parent = getParent(context, root, path)\n\n      if (!node || !prev || !parent) {\n        break\n      }\n\n      const index = path[path.length - 1]\n\n      if (isPartialSpanNode(node) && isPartialSpanNode(prev)) {\n        prev.text += node.text\n      } else if (\n        isTextBlockNode(context, node) &&\n        isTextBlockNode(context, prev)\n      ) {\n        prev.children.push(...node.children)\n      } else {\n        break\n      }\n\n      parent.children.splice(index, 1)\n\n      break\n    }\n\n    case 'move_node': {\n      const {path, newPath} = operation\n\n      if (Path.isAncestor(path, newPath)) {\n        break\n      }\n\n      const node = getNode(context, root, path)\n      const parent = getParent(context, root, path)\n      const index = path[path.length - 1]\n\n      if (!node || !parent) {\n        break\n      }\n\n      // This is tricky, but since the `path` and `newPath` both refer to\n      // the same snapshot in time, there's a mismatch. After either\n      // removing the original position, the second step's path can be out\n      // of date. So instead of using the `op.newPath` directly, we\n      // transform `op.path` to ascertain what the `newPath` would be after\n      // the operation was applied.\n      parent.children.splice(index, 1)\n      const truePath = Path.transform(path, operation)!\n      const newParent = getNode(context, root, Path.parent(truePath))\n      const newIndex = truePath[truePath.length - 1]\n\n      if (!newParent) {\n        break\n      }\n\n      if (!('children' in newParent)) {\n        break\n      }\n\n      if (!Array.isArray(newParent.children)) {\n        break\n      }\n\n      newParent.children.splice(newIndex, 0, node)\n\n      break\n    }\n\n    case 'remove_node': {\n      const {path} = operation\n      const index = path[path.length - 1]\n      const parent = getParent(context, root, path)\n      parent?.children.splice(index, 1)\n\n      break\n    }\n\n    case 'remove_text': {\n      const {path, offset, text} = operation\n\n      if (text.length === 0) {\n        break\n      }\n\n      const span = getSpan(context, root, path)\n\n      if (!span) {\n        break\n      }\n\n      const before = span.text.slice(0, offset)\n      const after = span.text.slice(offset + text.length)\n      span.text = before + after\n\n      break\n    }\n\n    case 'set_node': {\n      const {path, properties, newProperties} = operation\n\n      const node = getNode(context, root, path)\n\n      if (!node) {\n        break\n      }\n\n      if (isEditorNode(node)) {\n        break\n      }\n\n      if (isObjectNode(context, node)) {\n        const valueBefore = (\n          'value' in properties && typeof properties.value === 'object'\n            ? properties.value\n            : {}\n        ) as Partial<Node>\n        const valueAfter = (\n          'value' in newProperties && typeof newProperties.value === 'object'\n            ? newProperties.value\n            : {}\n        ) as Partial<Node>\n\n        for (const key in newProperties) {\n          if (key === 'value') {\n            continue\n          }\n\n          const value = newProperties[key as keyof Partial<Node>]\n\n          if (value == null) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          } else {\n            node[<keyof PortableTextNode<EditorSchema>>key] = value\n          }\n        }\n\n        for (const key in properties) {\n          if (key === 'value') {\n            continue\n          }\n\n          if (!newProperties.hasOwnProperty(key)) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          }\n        }\n\n        for (const key in valueAfter) {\n          const value = valueAfter[key as keyof Partial<Node>]\n\n          if (value == null) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          } else {\n            node[<keyof PortableTextNode<EditorSchema>>key] = value\n          }\n        }\n\n        for (const key in valueBefore) {\n          if (!valueAfter.hasOwnProperty(key)) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          }\n        }\n\n        break\n      }\n\n      if (isTextBlockNode(context, node)) {\n        for (const key in newProperties) {\n          if (key === 'children' || key === 'text') {\n            break\n          }\n\n          const value = newProperties[key as keyof Partial<Node>]\n\n          if (value == null) {\n            delete node[<keyof Partial<Node>>key]\n          } else {\n            node[<keyof Partial<Node>>key] = value\n          }\n        }\n\n        // properties that were previously defined, but are now missing, must be deleted\n        for (const key in properties) {\n          if (!newProperties.hasOwnProperty(key)) {\n            delete node[<keyof Partial<Node>>key]\n          }\n        }\n\n        break\n      }\n\n      if (isPartialSpanNode(node)) {\n        for (const key in newProperties) {\n          if (key === 'text') {\n            break\n          }\n\n          const value = newProperties[key as keyof Partial<Node>]\n\n          if (value == null) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          } else {\n            node[<keyof PortableTextNode<EditorSchema>>key] = value\n          }\n        }\n\n        // properties that were previously defined, but are now missing, must be deleted\n        for (const key in properties) {\n          if (!newProperties.hasOwnProperty(key)) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          }\n        }\n\n        break\n      }\n\n      break\n    }\n\n    case 'split_node': {\n      const {path, position, properties} = operation\n\n      if (path.length === 0) {\n        break\n      }\n\n      const parent = getParent(context, root, path)\n      const index = path[path.length - 1]\n\n      if (!parent) {\n        break\n      }\n\n      if (isEditorNode(parent)) {\n        const block = getBlock(root, path)\n\n        if (!block || !isTextBlockNode(context, block)) {\n          break\n        }\n\n        const before = block.children.slice(0, position)\n        const after = block.children.slice(position)\n        block.children = before\n\n        // _key is deliberately left out\n        const newTextBlockNode = {\n          ...properties,\n          children: after,\n          _type: context.schema.block.name,\n        } as unknown as TextBlockNode<EditorSchema>\n\n        parent.children.splice(index + 1, 0, newTextBlockNode)\n\n        break\n      }\n\n      if (isTextBlockNode(context, parent)) {\n        const node = getNode(context, root, path)\n\n        if (!node || !isSpanNode(context, node)) {\n          break\n        }\n\n        const before = node.text.slice(0, position)\n        const after = node.text.slice(position)\n        node.text = before\n\n        // _key is deliberately left out\n        const newSpanNode = {\n          ...properties,\n          text: after,\n        } as unknown as SpanNode<EditorSchema>\n\n        parent.children.splice(index + 1, 0, newSpanNode)\n      }\n\n      break\n    }\n  }\n\n  return root\n}\n","import {applyOperationToPortableText} from '../../internal-utils/apply-operation-to-portable-text'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorContext} from '../editor-snapshot'\n\nexport function pluginUpdateValue(\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>,\n  editor: PortableTextSlateEditor,\n) {\n  const {apply} = editor\n\n  editor.apply = (operation) => {\n    if (operation.type === 'set_selection') {\n      apply(operation)\n      return\n    }\n\n    editor.value = applyOperationToPortableText(\n      context,\n      editor.value,\n      operation,\n    )\n\n    apply(operation)\n  }\n\n  return editor\n}\n","import type {BaseOperation, Editor, Node, NodeEntry} from 'slate'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport type {RelayActor} from '../relay-machine'\nimport {createWithEventListeners} from './create-with-event-listeners'\nimport {createWithMaxBlocks} from './createWithMaxBlocks'\nimport {createWithObjectKeys} from './createWithObjectKeys'\nimport {createWithPatches} from './createWithPatches'\nimport {createWithPlaceholderBlock} from './createWithPlaceholderBlock'\nimport {createWithPortableTextBlockStyle} from './createWithPortableTextBlockStyle'\nimport {createWithPortableTextMarkModel} from './createWithPortableTextMarkModel'\nimport {createWithPortableTextSelections} from './createWithPortableTextSelections'\nimport {createWithSchemaTypes} from './createWithSchemaTypes'\nimport {createWithUndoRedo} from './createWithUndoRedo'\nimport {createWithUtils} from './createWithUtils'\nimport {pluginUpdateMarkState} from './slate-plugin.update-mark-state'\nimport {pluginUpdateValue} from './slate-plugin.update-value'\n\nexport interface OriginalEditorFunctions {\n  apply: (operation: BaseOperation) => void\n  onChange: () => void\n  normalizeNode: (entry: NodeEntry<Node>) => void\n}\n\ntype PluginsOptions = {\n  editorActor: EditorActor\n  relayActor: RelayActor\n  subscriptions: Array<() => () => void>\n}\n\nexport const withPlugins = <T extends Editor>(\n  editor: T,\n  options: PluginsOptions,\n): PortableTextSlateEditor => {\n  const e = editor as T & PortableTextSlateEditor\n  const {editorActor, relayActor} = options\n  const withObjectKeys = createWithObjectKeys(editorActor)\n  const withSchemaTypes = createWithSchemaTypes({\n    editorActor,\n  })\n  const withPatches = createWithPatches({\n    editorActor,\n    relayActor,\n    subscriptions: options.subscriptions,\n  })\n  const withMaxBlocks = createWithMaxBlocks(editorActor)\n  const withUndoRedo = createWithUndoRedo({\n    editorActor,\n    subscriptions: options.subscriptions,\n  })\n  const withPortableTextMarkModel = createWithPortableTextMarkModel(editorActor)\n  const withPortableTextBlockStyle =\n    createWithPortableTextBlockStyle(editorActor)\n\n  const withPlaceholderBlock = createWithPlaceholderBlock(editorActor)\n\n  const withUtils = createWithUtils({\n    editorActor,\n  })\n  const withPortableTextSelections =\n    createWithPortableTextSelections(editorActor)\n  const withEventListeners = createWithEventListeners(editorActor)\n\n  // Ordering is important here, selection dealing last, data manipulation in the middle and core model stuff first.\n  return withEventListeners(\n    withSchemaTypes(\n      withObjectKeys(\n        withPortableTextMarkModel(\n          withPortableTextBlockStyle(\n            withPlaceholderBlock(\n              withUtils(\n                withMaxBlocks(\n                  withUndoRedo(\n                    withPatches(\n                      withPortableTextSelections(\n                        pluginUpdateValue(\n                          editorActor.getSnapshot().context,\n                          pluginUpdateMarkState(\n                            editorActor.getSnapshot().context,\n                            e,\n                          ),\n                        ),\n                      ),\n                    ),\n                  ),\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n    ),\n  )\n}\n","import {createEditor, type Descendant} from 'slate'\nimport {withReact} from 'slate-react'\nimport {createPlaceholderBlock} from '../internal-utils/create-placeholder-block'\nimport {debugWithName} from '../internal-utils/debug'\nimport {toSlateValue} from '../internal-utils/values'\nimport {\n  KEY_TO_SLATE_ELEMENT,\n  KEY_TO_VALUE_ELEMENT,\n} from '../internal-utils/weakMaps'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorActor} from './editor-machine'\nimport {withPlugins} from './plugins/with-plugins'\nimport type {RelayActor} from './relay-machine'\n\nconst debug = debugWithName('setup')\n\ntype SlateEditorConfig = {\n  editorActor: EditorActor\n  relayActor: RelayActor\n  subscriptions: Array<() => () => void>\n}\n\nexport type SlateEditor = {\n  instance: PortableTextSlateEditor\n  initialValue: Array<Descendant>\n}\n\nexport function createSlateEditor(config: SlateEditorConfig): SlateEditor {\n  debug('Creating new Slate editor instance')\n\n  const instance = withPlugins(withReact(createEditor()), {\n    editorActor: config.editorActor,\n    relayActor: config.relayActor,\n    subscriptions: config.subscriptions,\n  })\n\n  KEY_TO_VALUE_ELEMENT.set(instance, {})\n  KEY_TO_SLATE_ELEMENT.set(instance, {})\n\n  instance.decoratorState = {}\n  instance.markState = undefined\n  instance.value = [\n    createPlaceholderBlock(config.editorActor.getSnapshot().context),\n  ]\n\n  const initialValue = toSlateValue(instance.value, {\n    schemaTypes: config.editorActor.getSnapshot().context.schema,\n  })\n\n  const slateEditor: SlateEditor = {\n    instance,\n    initialValue,\n  }\n\n  return slateEditor\n}\n","import * as selectors from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst addAnnotationOnCollapsedSelection = defineBehavior({\n  on: 'annotation.add',\n  guard: ({snapshot}) => {\n    if (!selectors.isSelectionCollapsed(snapshot)) {\n      return false\n    }\n\n    const caretWordSelection = selectors.getCaretWordSelection(snapshot)\n\n    if (\n      !caretWordSelection ||\n      !selectors.isSelectionExpanded({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: caretWordSelection,\n        },\n      })\n    ) {\n      return false\n    }\n\n    return {caretWordSelection}\n  },\n  actions: [\n    ({event}, {caretWordSelection}) => [\n      raise({type: 'select', at: caretWordSelection}),\n      raise({type: 'annotation.add', annotation: event.annotation}),\n    ],\n  ],\n})\n\nexport const coreAnnotationBehaviors = {\n  addAnnotationOnCollapsedSelection,\n}\n","export interface KeyboardEventLike {\n  key: string\n  keyCode?: number\n  altKey: boolean\n  ctrlKey: boolean\n  metaKey: boolean\n  shiftKey: boolean\n}\n\ninterface HotKey {\n  keyCode?: number | undefined\n  key?: string | undefined\n  altKey: boolean | null\n  ctrlKey: boolean | null\n  metaKey: boolean | null\n  shiftKey: boolean | null\n}\n\nconst IS_MAC =\n  typeof window !== 'undefined' &&\n  /Mac|iPod|iPhone|iPad/.test(window.navigator.userAgent)\n\ntype Modifier = 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n\nconst modifiers: Record<string, Modifier | undefined> = {\n  alt: 'altKey',\n  control: 'ctrlKey',\n  meta: 'metaKey',\n  shift: 'shiftKey',\n}\n\nconst aliases: Record<string, string | undefined> = {\n  add: '+',\n  break: 'pause',\n  cmd: 'meta',\n  command: 'meta',\n  ctl: 'control',\n  ctrl: 'control',\n  del: 'delete',\n  down: 'arrowdown',\n  esc: 'escape',\n  ins: 'insert',\n  left: 'arrowleft',\n  mod: IS_MAC ? 'meta' : 'control',\n  opt: 'alt',\n  option: 'alt',\n  return: 'enter',\n  right: 'arrowright',\n  space: ' ',\n  spacebar: ' ',\n  up: 'arrowup',\n  win: 'meta',\n  windows: 'meta',\n}\n\nconst keyCodes: Record<string, number | undefined> = {\n  'backspace': 8,\n  'tab': 9,\n  'enter': 13,\n  'shift': 16,\n  'control': 17,\n  'alt': 18,\n  'pause': 19,\n  'capslock': 20,\n  'escape': 27,\n  ' ': 32,\n  'pageup': 33,\n  'pagedown': 34,\n  'end': 35,\n  'home': 36,\n  'arrowleft': 37,\n  'arrowup': 38,\n  'arrowright': 39,\n  'arrowdown': 40,\n  'insert': 45,\n  'delete': 46,\n  'meta': 91,\n  'numlock': 144,\n  'scrolllock': 145,\n  ';': 186,\n  '=': 187,\n  ',': 188,\n  '-': 189,\n  '.': 190,\n  '/': 191,\n  '`': 192,\n  '[': 219,\n  '\\\\': 220,\n  ']': 221,\n  \"'\": 222,\n  'f1': 112,\n  'f2': 113,\n  'f3': 114,\n  'f4': 115,\n  'f5': 116,\n  'f6': 117,\n  'f7': 118,\n  'f8': 119,\n  'f9': 120,\n  'f10': 121,\n  'f11': 122,\n  'f12': 123,\n  'f13': 124,\n  'f14': 125,\n  'f15': 126,\n  'f16': 127,\n  'f17': 128,\n  'f18': 129,\n  'f19': 130,\n  'f20': 131,\n}\n\nexport function isHotkey(hotkey: string, event: KeyboardEventLike): boolean {\n  return compareHotkey(parseHotkey(hotkey), event)\n}\n\nfunction parseHotkey(hotkey: string): HotKey {\n  // Ensure that all the modifiers are set to false unless the hotkey has them.\n  const parsedHotkey: HotKey = {\n    altKey: false,\n    ctrlKey: false,\n    metaKey: false,\n    shiftKey: false,\n  }\n\n  // Special case to handle the `+` key since we use it as a separator.\n  const hotkeySegments = hotkey.replace('++', '+add').split('+')\n\n  for (const rawHotkeySegment of hotkeySegments) {\n    const optional =\n      rawHotkeySegment.endsWith('?') && rawHotkeySegment.length > 1\n    const hotkeySegment = optional\n      ? rawHotkeySegment.slice(0, -1)\n      : rawHotkeySegment\n    const keyName = toKeyName(hotkeySegment)\n    const modifier = modifiers[keyName]\n    const alias = aliases[hotkeySegment]\n    const code = keyCodes[keyName]\n\n    if (\n      hotkeySegment.length > 1 &&\n      modifier === undefined &&\n      alias === undefined &&\n      code === undefined\n    ) {\n      throw new TypeError(`Unknown modifier: \"${hotkeySegment}\"`)\n    }\n\n    if (hotkeySegments.length === 1 || modifier === undefined) {\n      parsedHotkey.key = keyName\n      parsedHotkey.keyCode = toKeyCode(hotkeySegment)\n    }\n\n    if (modifier !== undefined) {\n      parsedHotkey[modifier] = optional ? null : true\n    }\n  }\n\n  return parsedHotkey\n}\n\nfunction compareHotkey(\n  parsedHotkey: HotKey,\n  event: KeyboardEventLike,\n): boolean {\n  const matchingModifiers =\n    (parsedHotkey.altKey != null\n      ? parsedHotkey.altKey === event.altKey\n      : true) &&\n    (parsedHotkey.ctrlKey != null\n      ? parsedHotkey.ctrlKey === event.ctrlKey\n      : true) &&\n    (parsedHotkey.metaKey != null\n      ? parsedHotkey.metaKey === event.metaKey\n      : true) &&\n    (parsedHotkey.shiftKey != null\n      ? parsedHotkey.shiftKey === event.shiftKey\n      : true)\n\n  if (!matchingModifiers) {\n    return false\n  }\n\n  if (parsedHotkey.keyCode !== undefined && event.keyCode !== undefined) {\n    if (parsedHotkey.keyCode === 91 && event.keyCode === 93) {\n      return true\n    }\n\n    return parsedHotkey.keyCode === event.keyCode\n  }\n\n  return (\n    parsedHotkey.keyCode === event.keyCode ||\n    parsedHotkey.key === event.key.toLowerCase()\n  )\n}\n\nfunction toKeyCode(name: string): number {\n  const keyName = toKeyName(name)\n  const keyCode = keyCodes[keyName] ?? keyName.toUpperCase().charCodeAt(0)\n\n  return keyCode\n}\n\nfunction toKeyName(name: string): string {\n  const keyName = name.toLowerCase()\n\n  return aliases[keyName] ?? keyName\n}\n","import {isHotkey} from '../internal-utils/is-hotkey'\nimport {isTextBlock} from '../internal-utils/parse-blocks'\nimport * as selectors from '../selectors'\nimport {isEmptyTextBlock} from '../utils/util.is-empty-text-block'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst arrowDownOnLonelyBlockObject = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({snapshot, event}) => {\n    const isArrowDown = isHotkey('ArrowDown', event.originEvent)\n\n    if (!isArrowDown) {\n      return false\n    }\n\n    const collapsedSelection = selectors.isSelectionCollapsed(snapshot)\n\n    if (!collapsedSelection) {\n      return false\n    }\n\n    const focusBlockObject = selectors.getFocusBlockObject(snapshot)\n    const nextBlock = selectors.getNextBlock(snapshot)\n\n    return focusBlockObject && !nextBlock\n  },\n  actions: [\n    ({snapshot}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'after',\n      }),\n    ],\n  ],\n})\n\nconst arrowUpOnLonelyBlockObject = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({snapshot, event}) => {\n    const isArrowUp = isHotkey('ArrowUp', event.originEvent)\n\n    if (!isArrowUp) {\n      return false\n    }\n\n    const collapsedSelection = selectors.isSelectionCollapsed(snapshot)\n\n    if (!collapsedSelection) {\n      return false\n    }\n\n    const focusBlockObject = selectors.getFocusBlockObject(snapshot)\n    const previousBlock = selectors.getPreviousBlock(snapshot)\n\n    return focusBlockObject && !previousBlock\n  },\n  actions: [\n    ({snapshot}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'before',\n      }),\n    ],\n  ],\n})\n\nconst breakingBlockObject = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const focusBlockObject = selectors.getFocusBlockObject(snapshot)\n    const collapsedSelection = selectors.isSelectionCollapsed(snapshot)\n\n    return collapsedSelection && focusBlockObject !== undefined\n  },\n  actions: [\n    ({snapshot}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'after',\n      }),\n    ],\n  ],\n})\n\nconst clickingAboveLonelyBlockObject = defineBehavior({\n  on: 'mouse.click',\n  guard: ({snapshot, event}) => {\n    if (snapshot.context.readOnly) {\n      return false\n    }\n\n    if (\n      snapshot.context.selection &&\n      !selectors.isSelectionCollapsed(snapshot)\n    ) {\n      return false\n    }\n\n    const focusBlockObject = selectors.getFocusBlockObject({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection,\n      },\n    })\n    const previousBlock = selectors.getPreviousBlock({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection,\n      },\n    })\n\n    return (\n      event.position.isEditor &&\n      event.position.block === 'start' &&\n      focusBlockObject &&\n      !previousBlock\n    )\n  },\n  actions: [\n    ({snapshot, event}) => [\n      raise({\n        type: 'select',\n        at: event.position.selection,\n      }),\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'before',\n        select: 'start',\n      }),\n    ],\n  ],\n})\n\nconst clickingBelowLonelyBlockObject = defineBehavior({\n  on: 'mouse.click',\n  guard: ({snapshot, event}) => {\n    if (snapshot.context.readOnly) {\n      return false\n    }\n\n    if (\n      snapshot.context.selection &&\n      !selectors.isSelectionCollapsed(snapshot)\n    ) {\n      return false\n    }\n\n    const focusBlockObject = selectors.getFocusBlockObject({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection,\n      },\n    })\n    const nextBlock = selectors.getNextBlock({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection,\n      },\n    })\n\n    return (\n      event.position.isEditor &&\n      event.position.block === 'end' &&\n      focusBlockObject &&\n      !nextBlock\n    )\n  },\n  actions: [\n    ({snapshot, event}) => [\n      raise({\n        type: 'select',\n        at: event.position.selection,\n      }),\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'after',\n        select: 'start',\n      }),\n    ],\n  ],\n})\n\nconst deletingEmptyTextBlockAfterBlockObject = defineBehavior({\n  on: 'delete.backward',\n  guard: ({snapshot}) => {\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const previousBlock = selectors.getPreviousBlock(snapshot)\n\n    if (!focusTextBlock || !selectionCollapsed || !previousBlock) {\n      return false\n    }\n\n    if (\n      isEmptyTextBlock(snapshot.context, focusTextBlock.node) &&\n      !isTextBlock(snapshot.context, previousBlock.node)\n    ) {\n      return {focusTextBlock, previousBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, previousBlock}) => [\n      raise({\n        type: 'delete.block',\n        at: focusTextBlock.path,\n      }),\n      raise({\n        type: 'select',\n        at: {\n          anchor: {path: previousBlock.path, offset: 0},\n          focus: {path: previousBlock.path, offset: 0},\n        },\n      }),\n    ],\n  ],\n})\n\nconst deletingEmptyTextBlockBeforeBlockObject = defineBehavior({\n  on: 'delete.forward',\n  guard: ({snapshot}) => {\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const nextBlock = selectors.getNextBlock(snapshot)\n\n    if (!focusTextBlock || !selectionCollapsed || !nextBlock) {\n      return false\n    }\n\n    if (\n      isEmptyTextBlock(snapshot.context, focusTextBlock.node) &&\n      !isTextBlock(snapshot.context, nextBlock.node)\n    ) {\n      return {focusTextBlock, nextBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, nextBlock}) => [\n      raise({\n        type: 'delete.block',\n        at: focusTextBlock.path,\n      }),\n      raise({\n        type: 'select',\n        at: {\n          anchor: {path: nextBlock.path, offset: 0},\n          focus: {path: nextBlock.path, offset: 0},\n        },\n      }),\n    ],\n  ],\n})\n\nexport const coreBlockObjectBehaviors = {\n  arrowDownOnLonelyBlockObject,\n  arrowUpOnLonelyBlockObject,\n  breakingBlockObject,\n  clickingAboveLonelyBlockObject,\n  clickingBelowLonelyBlockObject,\n  deletingEmptyTextBlockAfterBlockObject,\n  deletingEmptyTextBlockBeforeBlockObject,\n}\n","import {isHotkey} from '../internal-utils/is-hotkey'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const coreDecoratorBehaviors = {\n  strongShortcut: defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      isHotkey('mod+b', event.originEvent) &&\n      snapshot.context.schema.decorators.some(\n        (decorator) => decorator.name === 'strong',\n      ),\n    actions: [() => [raise({type: 'decorator.toggle', decorator: 'strong'})]],\n  }),\n  emShortcut: defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      isHotkey('mod+i', event.originEvent) &&\n      snapshot.context.schema.decorators.some(\n        (decorator) => decorator.name === 'em',\n      ),\n    actions: [() => [raise({type: 'decorator.toggle', decorator: 'em'})]],\n  }),\n  underlineShortcut: defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      isHotkey('mod+u', event.originEvent) &&\n      snapshot.context.schema.decorators.some(\n        (decorator) => decorator.name === 'underline',\n      ),\n    actions: [\n      () => [raise({type: 'decorator.toggle', decorator: 'underline'})],\n    ],\n  }),\n  codeShortcut: defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      isHotkey(\"mod+'\", event.originEvent) &&\n      snapshot.context.schema.decorators.some(\n        (decorator) => decorator.name === 'code',\n      ),\n    actions: [() => [raise({type: 'decorator.toggle', decorator: 'code'})]],\n  }),\n}\n","import * as selectors from '../selectors'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const coreDndBehaviors = [\n  /**\n   * When dragging over the drag origin, we don't want to show the caret in the\n   * text.\n   */\n  defineBehavior({\n    on: 'drag.dragover',\n    guard: ({snapshot, event}) => {\n      const dragOrigin = snapshot.beta.internalDrag?.origin\n      const draggingOverDragOrigin = dragOrigin\n        ? selectors.isOverlappingSelection(event.position.selection)({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragOrigin.selection,\n            },\n          })\n        : false\n\n      return draggingOverDragOrigin\n    },\n    actions: [],\n  }),\n]\n","import * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst breakingAtTheEndOfTextBlock = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n    if (!snapshot.context.selection || !focusTextBlock || !selectionCollapsed) {\n      return false\n    }\n\n    const atTheEndOfBlock =\n      selectors.isAtTheEndOfBlock(focusTextBlock)(snapshot)\n\n    const focusListItem = focusTextBlock.node.listItem\n    const focusLevel = focusTextBlock.node.level\n\n    if (atTheEndOfBlock) {\n      return {focusListItem, focusLevel}\n    }\n\n    return false\n  },\n  actions: [\n    ({snapshot}, {focusListItem, focusLevel}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n          children: [\n            {\n              _type: snapshot.context.schema.span.name,\n              text: '',\n              marks: [],\n            },\n          ],\n          markDefs: [],\n          listItem: focusListItem,\n          level: focusLevel,\n          style: snapshot.context.schema.styles[0]?.name,\n        },\n        placement: 'after',\n      }),\n    ],\n  ],\n})\n\nconst breakingAtTheStartOfTextBlock = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n    if (!snapshot.context.selection || !focusTextBlock || !selectionCollapsed) {\n      return false\n    }\n\n    const focusSpan = selectors.getFocusSpan(snapshot)\n\n    const focusDecorators = focusSpan?.node.marks?.filter(\n      (mark) =>\n        snapshot.context.schema.decorators.some(\n          (decorator) => decorator.name === mark,\n        ) ?? [],\n    )\n    const focusAnnotations =\n      focusSpan?.node.marks?.filter(\n        (mark) =>\n          !snapshot.context.schema.decorators.some(\n            (decorator) => decorator.name === mark,\n          ),\n      ) ?? []\n    const focusListItem = focusTextBlock.node.listItem\n    const focusLevel = focusTextBlock.node.level\n\n    const atTheStartOfBlock =\n      selectors.isAtTheStartOfBlock(focusTextBlock)(snapshot)\n\n    if (atTheStartOfBlock) {\n      return {focusAnnotations, focusDecorators, focusListItem, focusLevel}\n    }\n\n    return false\n  },\n  actions: [\n    (\n      {snapshot},\n      {focusAnnotations, focusDecorators, focusListItem, focusLevel},\n    ) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n          children: [\n            {\n              _type: snapshot.context.schema.span.name,\n              marks: focusAnnotations.length === 0 ? focusDecorators : [],\n              text: '',\n            },\n          ],\n          listItem: focusListItem,\n          level: focusLevel,\n          style: snapshot.context.schema.styles[0]?.name,\n        },\n        placement: 'before',\n        select: 'none',\n      }),\n    ],\n  ],\n})\n\nconst breakingEntireDocument = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    if (!snapshot.context.selection) {\n      return false\n    }\n\n    if (!selectors.isSelectionExpanded(snapshot)) {\n      return false\n    }\n\n    const firstBlock = selectors.getFirstBlock(snapshot)\n    const lastBlock = selectors.getLastBlock(snapshot)\n\n    if (!firstBlock || !lastBlock) {\n      return false\n    }\n\n    const firstBlockStartPoint = utils.getBlockStartPoint({\n      context: snapshot.context,\n      block: firstBlock,\n    })\n    const selectionStartPoint = utils.getSelectionStartPoint(\n      snapshot.context.selection,\n    )\n    const lastBlockEndPoint = utils.getBlockEndPoint({\n      context: snapshot.context,\n      block: lastBlock,\n    })\n    const selectionEndPoint = utils.getSelectionEndPoint(\n      snapshot.context.selection,\n    )\n\n    if (\n      utils.isEqualSelectionPoints(firstBlockStartPoint, selectionStartPoint) &&\n      utils.isEqualSelectionPoints(lastBlockEndPoint, selectionEndPoint)\n    ) {\n      return {selection: snapshot.context.selection}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {selection}) => [\n      raise({\n        type: 'delete',\n        at: selection,\n      }),\n    ],\n  ],\n})\n\nconst breakingEntireBlocks = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    if (!snapshot.context.selection) {\n      return false\n    }\n\n    if (!selectors.isSelectionExpanded(snapshot)) {\n      return false\n    }\n\n    const selectedBlocks = selectors.getSelectedBlocks(snapshot)\n    const selectionStartBlock = selectors.getSelectionStartBlock(snapshot)\n    const selectionEndBlock = selectors.getSelectionEndBlock(snapshot)\n\n    if (!selectionStartBlock || !selectionEndBlock) {\n      return false\n    }\n\n    const startBlockStartPoint = utils.getBlockStartPoint({\n      context: snapshot.context,\n      block: selectionStartBlock,\n    })\n    const selectionStartPoint = utils.getSelectionStartPoint(\n      snapshot.context.selection,\n    )\n    const endBlockEndPoint = utils.getBlockEndPoint({\n      context: snapshot.context,\n      block: selectionEndBlock,\n    })\n    const selectionEndPoint = utils.getSelectionEndPoint(\n      snapshot.context.selection,\n    )\n\n    if (\n      utils.isEqualSelectionPoints(selectionStartPoint, startBlockStartPoint) &&\n      utils.isEqualSelectionPoints(selectionEndPoint, endBlockEndPoint)\n    ) {\n      return {selectedBlocks}\n    }\n\n    return false\n  },\n  actions: [\n    ({snapshot}, {selectedBlocks}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n          children: [\n            {\n              _type: snapshot.context.schema.span.name,\n              text: '',\n              marks: [],\n            },\n          ],\n        },\n        placement: 'before',\n        select: 'start',\n      }),\n      ...selectedBlocks.map((block) =>\n        raise({\n          type: 'delete.block',\n          at: block.path,\n        }),\n      ),\n    ],\n  ],\n})\n\nexport const coreInsertBreakBehaviors = {\n  breakingAtTheEndOfTextBlock,\n  breakingAtTheStartOfTextBlock,\n  breakingEntireDocument,\n  breakingEntireBlocks,\n}\n","import {isHotkey} from '../internal-utils/is-hotkey'\nimport {isListBlock} from '../internal-utils/parse-blocks'\nimport * as selectors from '../selectors'\nimport {isEmptyTextBlock} from '../utils/util.is-empty-text-block'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst MAX_LIST_LEVEL = 10\n\nconst clearListOnBackspace = defineBehavior({\n  on: 'delete.backward',\n  guard: ({snapshot}) => {\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const focusSpan = selectors.getFocusSpan(snapshot)\n\n    if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n      return false\n    }\n\n    const atTheBeginningOfBLock =\n      focusTextBlock.node.children[0]._key === focusSpan.node._key &&\n      snapshot.context.selection?.focus.offset === 0\n\n    if (atTheBeginningOfBLock && focusTextBlock.node.level === 1) {\n      return {focusTextBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock}) => [\n      raise({\n        type: 'block.unset',\n        props: ['listItem', 'level'],\n        at: focusTextBlock.path,\n      }),\n    ],\n  ],\n})\n\nconst unindentListOnBackspace = defineBehavior({\n  on: 'delete.backward',\n  guard: ({snapshot}) => {\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const focusSpan = selectors.getFocusSpan(snapshot)\n\n    if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n      return false\n    }\n\n    const atTheBeginningOfBLock =\n      focusTextBlock.node.children[0]._key === focusSpan.node._key &&\n      snapshot.context.selection?.focus.offset === 0\n\n    if (\n      atTheBeginningOfBLock &&\n      focusTextBlock.node.level !== undefined &&\n      focusTextBlock.node.level > 1\n    ) {\n      return {focusTextBlock, level: focusTextBlock.node.level - 1}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, level}) => [\n      raise({\n        type: 'block.set',\n        props: {level},\n        at: focusTextBlock.path,\n      }),\n    ],\n  ],\n})\n\nconst clearListOnEnter = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const focusListBlock = selectors.getFocusListBlock(snapshot)\n\n    if (\n      !selectionCollapsed ||\n      !focusListBlock ||\n      !isEmptyTextBlock(snapshot.context, focusListBlock.node)\n    ) {\n      return false\n    }\n\n    return {focusListBlock}\n  },\n  actions: [\n    (_, {focusListBlock}) => [\n      raise({\n        type: 'block.unset',\n        props: ['listItem', 'level'],\n        at: focusListBlock.path,\n      }),\n    ],\n  ],\n})\n\nconst indentListOnTab = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({snapshot, event}) => {\n    const isTab = isHotkey('Tab', event.originEvent)\n\n    if (!isTab) {\n      return false\n    }\n\n    const selectedBlocks = selectors.getSelectedBlocks(snapshot)\n    const selectedListBlocks = selectedBlocks.flatMap((block) =>\n      isListBlock(snapshot.context, block.node)\n        ? [\n            {\n              node: block.node,\n              path: block.path,\n            },\n          ]\n        : [],\n    )\n\n    if (selectedListBlocks.length === selectedBlocks.length) {\n      return {selectedListBlocks}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {selectedListBlocks}) =>\n      selectedListBlocks.map((selectedListBlock) =>\n        raise({\n          type: 'block.set',\n          props: {\n            level: Math.min(\n              MAX_LIST_LEVEL,\n              Math.max(1, selectedListBlock.node.level + 1),\n            ),\n          },\n          at: selectedListBlock.path,\n        }),\n      ),\n  ],\n})\n\nconst unindentListOnShiftTab = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({snapshot, event}) => {\n    const isShiftTab = isHotkey('Shift+Tab', event.originEvent)\n\n    if (!isShiftTab) {\n      return false\n    }\n\n    const selectedBlocks = selectors.getSelectedBlocks(snapshot)\n    const selectedListBlocks = selectedBlocks.flatMap((block) =>\n      isListBlock(snapshot.context, block.node)\n        ? [\n            {\n              node: block.node,\n              path: block.path,\n            },\n          ]\n        : [],\n    )\n\n    if (selectedListBlocks.length === selectedBlocks.length) {\n      return {selectedListBlocks}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {selectedListBlocks}) =>\n      selectedListBlocks.map((selectedListBlock) =>\n        raise({\n          type: 'block.set',\n          props: {\n            level: Math.min(\n              MAX_LIST_LEVEL,\n              Math.max(1, selectedListBlock.node.level - 1),\n            ),\n          },\n          at: selectedListBlock.path,\n        }),\n      ),\n  ],\n})\n\nexport const coreListBehaviors = {\n  clearListOnBackspace,\n  unindentListOnBackspace,\n  clearListOnEnter,\n  indentListOnTab,\n  unindentListOnShiftTab,\n}\n","import {corePriority} from '../priority/priority.core'\nimport {coreAnnotationBehaviors} from './behavior.core.annotations'\nimport {coreBlockObjectBehaviors} from './behavior.core.block-objects'\nimport {coreDecoratorBehaviors} from './behavior.core.decorators'\nimport {coreDndBehaviors} from './behavior.core.dnd'\nimport {coreInsertBreakBehaviors} from './behavior.core.insert-break'\nimport {coreListBehaviors} from './behavior.core.lists'\n\nexport const coreBehaviorsConfig = [\n  coreAnnotationBehaviors.addAnnotationOnCollapsedSelection,\n  coreDecoratorBehaviors.strongShortcut,\n  coreDecoratorBehaviors.emShortcut,\n  coreDecoratorBehaviors.underlineShortcut,\n  coreDecoratorBehaviors.codeShortcut,\n  ...coreDndBehaviors,\n  coreBlockObjectBehaviors.clickingAboveLonelyBlockObject,\n  coreBlockObjectBehaviors.clickingBelowLonelyBlockObject,\n  coreBlockObjectBehaviors.arrowDownOnLonelyBlockObject,\n  coreBlockObjectBehaviors.arrowUpOnLonelyBlockObject,\n  coreBlockObjectBehaviors.breakingBlockObject,\n  coreBlockObjectBehaviors.deletingEmptyTextBlockAfterBlockObject,\n  coreBlockObjectBehaviors.deletingEmptyTextBlockBeforeBlockObject,\n  coreListBehaviors.clearListOnBackspace,\n  coreListBehaviors.unindentListOnBackspace,\n  coreListBehaviors.clearListOnEnter,\n  coreListBehaviors.indentListOnTab,\n  coreListBehaviors.unindentListOnShiftTab,\n  coreInsertBreakBehaviors.breakingAtTheEndOfTextBlock,\n  coreInsertBreakBehaviors.breakingAtTheStartOfTextBlock,\n  coreInsertBreakBehaviors.breakingEntireDocument,\n  coreInsertBreakBehaviors.breakingEntireBlocks,\n].map((behavior) => ({\n  behavior,\n  priority: corePriority,\n}))\n","import {isActiveAnnotation} from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractAnnotationBehaviors = [\n  defineBehavior({\n    on: 'annotation.toggle',\n    guard: ({snapshot, event}) =>\n      isActiveAnnotation(event.annotation.name)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'annotation.remove', annotation: event.annotation}),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'annotation.toggle',\n    guard: ({snapshot, event}) =>\n      !isActiveAnnotation(event.annotation.name)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'annotation.add', annotation: event.annotation}),\n      ],\n    ],\n  }),\n]\n","import {isActiveDecorator} from '../selectors'\nimport {blockOffsetsToSelection} from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractDecoratorBehaviors = [\n  defineBehavior({\n    on: 'decorator.toggle',\n    guard: ({snapshot, event}) => isActiveDecorator(event.decorator)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'decorator.remove', decorator: event.decorator}),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'decorator.toggle',\n    guard: ({snapshot, event}) => {\n      const manualSelection = event.at\n        ? blockOffsetsToSelection({\n            context: snapshot.context,\n            offsets: event.at,\n          })\n        : null\n\n      if (manualSelection) {\n        return !isActiveDecorator(event.decorator)({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: manualSelection,\n          },\n        })\n      }\n\n      return !isActiveDecorator(event.decorator)(snapshot)\n    },\n    actions: [\n      ({event}) => [\n        raise({\n          ...event,\n          type: 'decorator.add',\n        }),\n      ],\n    ],\n  }),\n]\n","import * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractDeleteBehaviors = [\n  defineBehavior({\n    on: 'delete.text',\n    guard: ({snapshot, event}) => {\n      const selection = utils.blockOffsetsToSelection({\n        context: snapshot.context,\n        offsets: event.at,\n      })\n\n      if (!selection) {\n        return false\n      }\n\n      const trimmedSelection = selectors.getTrimmedSelection({\n        beta: {\n          activeAnnotations: [],\n          activeDecorators: [],\n          hasTag: () => false,\n          internalDrag: undefined,\n        },\n        context: {\n          converters: [],\n          schema: snapshot.context.schema,\n          keyGenerator: snapshot.context.keyGenerator,\n          readOnly: false,\n          value: snapshot.context.value,\n          selection,\n        },\n      })\n\n      if (!trimmedSelection) {\n        return false\n      }\n\n      return {\n        selection: trimmedSelection,\n      }\n    },\n    actions: [(_, {selection}) => [raise({type: 'delete', at: selection})]],\n  }),\n]\n","import {getFocusTextBlock} from '../selectors'\nimport {isEmptyTextBlock} from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractInsertBehaviors = [\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({event}) => event.placement === 'before',\n    actions: [\n      ({event}) =>\n        event.blocks.map((block, index) =>\n          raise({\n            type: 'insert.block',\n            block,\n            placement: index === 0 ? 'before' : 'after',\n            select: 'end',\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({event}) => event.placement === 'after',\n    actions: [\n      ({event}) =>\n        event.blocks.map((block) =>\n          raise({\n            type: 'insert.block',\n            block,\n            placement: 'after',\n            select: 'end',\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({snapshot, event}) => {\n      if (event.placement !== 'auto') {\n        return false\n      }\n\n      const focusTextBlock = getFocusTextBlock(snapshot)\n\n      if (!focusTextBlock) {\n        return false\n      }\n\n      return {focusTextBlock}\n    },\n    actions: [\n      ({snapshot, event}, {focusTextBlock}) =>\n        event.blocks.length === 1\n          ? [\n              raise({\n                type: 'insert.block',\n                block: event.blocks[0],\n                placement: 'auto',\n                select: 'end',\n              }),\n            ]\n          : isEmptyTextBlock(snapshot.context, focusTextBlock.node)\n            ? event.blocks.map((block, index) =>\n                raise({\n                  type: 'insert.block',\n                  block,\n                  placement: index === 0 ? 'auto' : 'after',\n                  select: 'end',\n                }),\n              )\n            : event.blocks.flatMap((block, index) =>\n                index === 0\n                  ? [\n                      raise({\n                        type: 'split',\n                      }),\n                      raise({\n                        type: 'select.previous block',\n                        select: 'end',\n                      }),\n                      raise({\n                        type: 'insert.block',\n                        block,\n                        placement: 'auto',\n                        select: 'end',\n                      }),\n                    ]\n                  : index === event.blocks.length - 1\n                    ? [\n                        raise({\n                          type: 'select.next block',\n                          select: 'start',\n                        }),\n                        raise({\n                          type: 'insert.block',\n                          block,\n                          placement: 'auto',\n                          select: 'end',\n                        }),\n                      ]\n                    : [\n                        raise({\n                          type: 'insert.block',\n                          block,\n                          placement: 'after',\n                          select: 'end',\n                        }),\n                      ],\n              ),\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({event}) => event.placement === 'auto',\n    actions: [\n      ({event}) =>\n        event.blocks.map((block, index) =>\n          raise({\n            type: 'insert.block',\n            block,\n            placement: index === 0 ? 'auto' : 'after',\n            select: 'end',\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.break',\n    actions: [() => [raise({type: 'split'})]],\n  }),\n  defineBehavior({\n    on: 'insert.soft break',\n    actions: [() => [raise({type: 'insert.text', text: '\\n'})]],\n  }),\n]\n","export const keyIs = {\n  lineBreak: (event) => event.key === 'Enter' && event.shiftKey,\n} satisfies Record<string, KeyboardEventPredicate>\n\ntype KeyboardEventPredicate = (\n  event: Pick<\n    KeyboardEvent,\n    'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n  >,\n) => boolean\n","import {keyIs} from '../internal-utils/key-is'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractKeyboardBehaviors = [\n  /**\n   * On WebKit, Shift+Enter results in an `insertParagraph` input event rather\n   * than an `insertLineBreak` input event. This Behavior makes sure we catch\n   * that `keyboard.keydown` event beforehand and raise an `insert.soft break` manually.\n   */\n  defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({event}) => keyIs.lineBreak(event.originEvent),\n    actions: [() => [raise({type: 'insert.soft break'})]],\n  }),\n]\n","import {getSelectedTextBlocks, isActiveListItem} from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractListItemBehaviors = [\n  defineBehavior({\n    on: 'list item.add',\n    guard: ({snapshot}) => {\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      ({event}, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.set',\n            at: block.path,\n            props: {\n              level: 1,\n              listItem: event.listItem,\n            },\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'list item.remove',\n    guard: ({snapshot}) => {\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      (_, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.unset',\n            at: block.path,\n            props: ['level', 'listItem'],\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'list item.toggle',\n    guard: ({snapshot, event}) => isActiveListItem(event.listItem)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'list item.remove', listItem: event.listItem}),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'list item.toggle',\n    guard: ({snapshot, event}) => !isActiveListItem(event.listItem)(snapshot),\n    actions: [\n      ({event}) => [raise({type: 'list item.add', listItem: event.listItem})],\n    ],\n  }),\n]\n","import {getNextBlock, getPreviousBlock} from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractMoveBehaviors = [\n  defineBehavior({\n    on: 'move.block up',\n    guard: ({snapshot, event}) => {\n      const previousBlock = getPreviousBlock({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: {\n            anchor: {\n              path: event.at,\n              offset: 0,\n            },\n            focus: {\n              path: event.at,\n              offset: 0,\n            },\n          },\n        },\n      })\n\n      if (previousBlock) {\n        return {previousBlock}\n      }\n\n      return false\n    },\n    actions: [\n      ({event}, {previousBlock}) => [\n        raise({\n          type: 'move.block',\n          at: event.at,\n          to: previousBlock.path,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'move.block down',\n    guard: ({snapshot, event}) => {\n      const nextBlock = getNextBlock({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: {\n            anchor: {\n              path: event.at,\n              offset: 0,\n            },\n            focus: {\n              path: event.at,\n              offset: 0,\n            },\n          },\n        },\n      })\n\n      if (nextBlock) {\n        return {nextBlock}\n      }\n\n      return false\n    },\n    actions: [\n      ({event}, {nextBlock}) => [\n        raise({\n          type: 'move.block',\n          at: event.at,\n          to: nextBlock.path,\n        }),\n      ],\n    ],\n  }),\n]\n","import {getNextBlock, getPreviousBlock} from '../selectors'\nimport {getBlockEndPoint, getBlockStartPoint} from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractSelectBehaviors = [\n  defineBehavior({\n    on: 'select.previous block',\n    guard: ({snapshot, event}) => {\n      const previousBlock = getPreviousBlock(snapshot)\n\n      if (!previousBlock) {\n        return false\n      }\n\n      const point =\n        event.select === 'end'\n          ? getBlockEndPoint({\n              context: snapshot.context,\n              block: previousBlock,\n            })\n          : getBlockStartPoint({\n              context: snapshot.context,\n              block: previousBlock,\n            })\n\n      return {\n        selection: {\n          anchor: point,\n          focus: point,\n        },\n      }\n    },\n    actions: [\n      (_, {selection}) => [\n        raise({\n          type: 'select',\n          at: selection,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'select.next block',\n    guard: ({snapshot, event}) => {\n      const nextBlock = getNextBlock(snapshot)\n\n      if (!nextBlock) {\n        return false\n      }\n\n      const point =\n        event.select === 'end'\n          ? getBlockEndPoint({\n              context: snapshot.context,\n              block: nextBlock,\n            })\n          : getBlockStartPoint({\n              context: snapshot.context,\n              block: nextBlock,\n            })\n\n      return {selection: {anchor: point, focus: point}}\n    },\n    actions: [\n      (_, {selection}) => [\n        raise({\n          type: 'select',\n          at: selection,\n        }),\n      ],\n    ],\n  }),\n]\n","import {isTextBlock, parseBlock} from '../internal-utils/parse-blocks'\nimport * as selectors from '../selectors'\nimport {getSelectionStartPoint} from '../utils'\nimport {getBlockEndPoint} from '../utils/util.get-block-end-point'\nimport {getSelectionEndPoint} from '../utils/util.get-selection-end-point'\nimport {sliceBlocks} from '../utils/util.slice-blocks'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractSplitBehaviors = [\n  defineBehavior({\n    on: 'split',\n    guard: ({snapshot}) => {\n      if (!snapshot.context.selection) {\n        return false\n      }\n\n      const selectionStartPoint = getSelectionStartPoint(\n        snapshot.context.selection,\n      )\n      const selectionEndPoint = getSelectionEndPoint(snapshot.context.selection)\n\n      const focusTextBlock = selectors.getFocusTextBlock({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: {\n            anchor: selectionStartPoint,\n            focus: selectionEndPoint,\n          },\n        },\n      })\n\n      if (focusTextBlock) {\n        const blockEndPoint = getBlockEndPoint({\n          context: snapshot.context,\n          block: focusTextBlock,\n        })\n        const newTextBlockSelection = {\n          anchor: selectionEndPoint,\n          focus: blockEndPoint,\n        }\n        const newTextBlock = parseBlock({\n          block: sliceBlocks({\n            context: {\n              ...snapshot.context,\n              selection: newTextBlockSelection,\n            },\n            blocks: [focusTextBlock.node],\n          }).at(0),\n          context: snapshot.context,\n          options: {refreshKeys: true, validateFields: true},\n        })\n\n        if (!newTextBlock || !isTextBlock(snapshot.context, newTextBlock)) {\n          return false\n        }\n\n        return {\n          newTextBlock,\n          newTextBlockSelection,\n          selection: {\n            anchor: selectionStartPoint,\n            focus: blockEndPoint,\n          },\n        }\n      }\n\n      const focusBlockObject = selectors.getFocusBlockObject({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: {\n            anchor: selectionStartPoint,\n            focus: selectionEndPoint,\n          },\n        },\n      })\n\n      if (focusBlockObject) {\n        const newTextBlock = parseBlock({\n          block: {\n            _type: snapshot.context.schema.block.name,\n            children: [],\n          },\n          context: snapshot.context,\n          options: {refreshKeys: true, validateFields: true},\n        })\n\n        if (!newTextBlock) {\n          return false\n        }\n\n        return {\n          newTextBlock,\n          newTextBlockSelection: {\n            anchor: selectionEndPoint,\n            focus: selectionEndPoint,\n          },\n          selection: snapshot.context.selection,\n        }\n      }\n\n      return false\n    },\n    actions: [\n      (_, {newTextBlock, selection}) => [\n        raise({\n          type: 'delete',\n          at: selection,\n        }),\n        raise({\n          type: 'insert.block',\n          block: newTextBlock,\n          placement: 'after',\n          select: 'start',\n        }),\n      ],\n    ],\n  }),\n]\n","import {getSelectedTextBlocks, isActiveStyle} from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractStyleBehaviors = [\n  defineBehavior({\n    on: 'style.add',\n    guard: ({snapshot}) => {\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      ({event}, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.set',\n            at: block.path,\n            props: {\n              style: event.style,\n            },\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'style.remove',\n    guard: ({snapshot}) => {\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      (_, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.unset',\n            at: block.path,\n            props: ['style'],\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'style.toggle',\n    guard: ({snapshot, event}) => isActiveStyle(event.style)(snapshot),\n    actions: [({event}) => [raise({type: 'style.remove', style: event.style})]],\n  }),\n  defineBehavior({\n    on: 'style.toggle',\n    guard: ({snapshot, event}) => !isActiveStyle(event.style)(snapshot),\n    actions: [({event}) => [raise({type: 'style.add', style: event.style})]],\n  }),\n]\n","import type {ConverterEvent} from '../converters/converter.types'\nimport {isTextBlock} from '../internal-utils/parse-blocks'\nimport * as selectors from '../selectors'\nimport type {PickFromUnion} from '../type-utils'\nimport {getTextBlockText} from '../utils'\nimport {abstractAnnotationBehaviors} from './behavior.abstract.annotation'\nimport {abstractDecoratorBehaviors} from './behavior.abstract.decorator'\nimport {abstractDeleteBehaviors} from './behavior.abstract.delete'\nimport {abstractInsertBehaviors} from './behavior.abstract.insert'\nimport {abstractKeyboardBehaviors} from './behavior.abstract.keyboard'\nimport {abstractListItemBehaviors} from './behavior.abstract.list-item'\nimport {abstractMoveBehaviors} from './behavior.abstract.move'\nimport {abstractSelectBehaviors} from './behavior.abstract.select'\nimport {abstractSplitBehaviors} from './behavior.abstract.split'\nimport {abstractStyleBehaviors} from './behavior.abstract.style'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst raiseDeserializationSuccessOrFailure = defineBehavior({\n  on: 'deserialize',\n  guard: ({snapshot, event}) => {\n    let success:\n      | PickFromUnion<ConverterEvent, 'type', 'deserialization.success'>\n      | undefined\n    const failures: Array<\n      PickFromUnion<ConverterEvent, 'type', 'deserialization.failure'>\n    > = []\n\n    for (const converter of snapshot.context.converters) {\n      const data = event.originEvent.originEvent.dataTransfer.getData(\n        converter.mimeType,\n      )\n\n      if (!data) {\n        continue\n      }\n\n      const deserializeEvent = converter.deserialize({\n        snapshot,\n        event: {type: 'deserialize', data},\n      })\n\n      if (deserializeEvent.type === 'deserialization.success') {\n        success = deserializeEvent\n        break\n      } else {\n        failures.push(deserializeEvent)\n      }\n    }\n\n    if (!success) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: '*/*',\n        reason: failures.map((failure) => failure.reason).join(', '),\n      } as const\n    }\n\n    return success\n  },\n  actions: [\n    ({event}, deserializeEvent) => [\n      raise({\n        ...deserializeEvent,\n        originEvent: event.originEvent,\n      }),\n    ],\n  ],\n})\n\nconst raiseSerializationSuccessOrFailure = defineBehavior({\n  on: 'serialize',\n  guard: ({snapshot, event}) => {\n    if (snapshot.context.converters.length === 0) {\n      return false\n    }\n\n    const serializeEvents = snapshot.context.converters.map((converter) =>\n      converter.serialize({\n        snapshot,\n        event: {\n          ...event,\n          originEvent: event.originEvent.type,\n        },\n      }),\n    )\n\n    if (serializeEvents.length === 0) {\n      return false\n    }\n\n    return serializeEvents\n  },\n  actions: [\n    ({event}, serializeEvents) =>\n      serializeEvents.map((serializeEvent) => {\n        return raise({\n          ...serializeEvent,\n          originEvent: event.originEvent,\n        })\n      }),\n  ],\n})\n\nexport const abstractBehaviors = [\n  defineBehavior({\n    on: 'clipboard.copy',\n    guard: ({snapshot}) => {\n      const focusSpan = selectors.getFocusSpan(snapshot)\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n      return focusSpan && selectionCollapsed\n    },\n    actions: [],\n  }),\n  defineBehavior({\n    on: 'clipboard.copy',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'serialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'clipboard.cut',\n    guard: ({snapshot}) => {\n      const focusSpan = selectors.getFocusSpan(snapshot)\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n      return focusSpan && selectionCollapsed\n    },\n    actions: [],\n  }),\n  defineBehavior({\n    on: 'clipboard.cut',\n    guard: ({snapshot}) => {\n      return snapshot.context.selection\n        ? {\n            selection: snapshot.context.selection,\n          }\n        : false\n    },\n    actions: [\n      ({event}, {selection}) => [\n        raise({\n          type: 'serialize',\n          originEvent: event,\n        }),\n        raise({\n          type: 'delete',\n          at: selection,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'drag.dragstart',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'serialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'serialization.success',\n    actions: [\n      ({event}) => [\n        {\n          type: 'effect',\n          effect: () => {\n            event.originEvent.originEvent.dataTransfer.setData(\n              event.mimeType,\n              event.data,\n            )\n          },\n        },\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'serialization.failure',\n    actions: [\n      ({event}) => [\n        {\n          type: 'effect',\n          effect: () => {\n            console.warn(\n              `Serialization of ${event.mimeType} failed with reason \"${event.reason}\"`,\n            )\n          },\n        },\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'drag.drop',\n    guard: ({snapshot, event}) => {\n      const dragOrigin = snapshot.beta.internalDrag?.origin\n      const dropPosition = event.position.selection\n      const droppingOnDragOrigin = dragOrigin\n        ? selectors.isOverlappingSelection(dropPosition)({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragOrigin.selection,\n            },\n          })\n        : false\n      return droppingOnDragOrigin\n    },\n    actions: [],\n  }),\n  defineBehavior({\n    on: 'drag.drop',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'select',\n          at: event.position.selection,\n        }),\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'deserialization.success',\n    guard: ({snapshot, event}) => {\n      if (\n        event.originEvent.type !== 'drag.drop' ||\n        snapshot.beta.internalDrag === undefined\n      ) {\n        return false\n      }\n\n      const dragOrigin = snapshot.beta.internalDrag.origin\n      const dropPosition = event.originEvent.position.selection\n      const droppingOnDragOrigin = dragOrigin\n        ? selectors.isOverlappingSelection(dropPosition)({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragOrigin.selection,\n            },\n          })\n        : false\n\n      const draggingEntireBlocks = selectors.isSelectingEntireBlocks({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragOrigin.selection,\n        },\n      })\n\n      const draggedBlocks = selectors.getSelectedBlocks({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragOrigin.selection,\n        },\n      })\n\n      if (!droppingOnDragOrigin) {\n        return {\n          draggingEntireBlocks,\n          draggedBlocks,\n          dragOrigin,\n          originEvent: event.originEvent,\n        }\n      }\n\n      return false\n    },\n    actions: [\n      (\n        {event},\n        {draggingEntireBlocks, draggedBlocks, dragOrigin, originEvent},\n      ) => [\n        ...(draggingEntireBlocks\n          ? draggedBlocks.map((block) =>\n              raise({\n                type: 'delete.block',\n                at: block.path,\n              }),\n            )\n          : [\n              raise({\n                type: 'delete',\n                at: dragOrigin.selection,\n              }),\n            ]),\n        raise({\n          type: 'insert.blocks',\n          blocks: event.data,\n          placement: draggingEntireBlocks\n            ? originEvent.position.block === 'start'\n              ? 'before'\n              : originEvent.position.block === 'end'\n                ? 'after'\n                : 'auto'\n            : 'auto',\n        }),\n      ],\n    ],\n  }),\n  /**\n   * If we are pasting text/plain into a text block then we can probably\n   * assume that the intended behavior is that the pasted text inherits\n   * formatting from the text it's pasted into.\n   */\n  defineBehavior({\n    on: 'deserialization.success',\n    guard: ({snapshot, event}) => {\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n\n      if (\n        focusTextBlock &&\n        event.mimeType === 'text/plain' &&\n        event.originEvent.type === 'clipboard.paste'\n      ) {\n        const activeDecorators = snapshot.beta.activeDecorators\n        const activeAnnotations = selectors.getActiveAnnotations(snapshot)\n\n        return {\n          activeAnnotations,\n          activeDecorators,\n          textRuns: event.data.flatMap((block) =>\n            isTextBlock(snapshot.context, block)\n              ? [getTextBlockText(block)]\n              : [],\n          ),\n        }\n      }\n\n      return false\n    },\n    actions: [\n      (_, {activeAnnotations, activeDecorators, textRuns}) =>\n        textRuns.flatMap((textRun, index) =>\n          index !== textRuns.length - 1\n            ? [\n                raise({\n                  type: 'insert.span',\n                  text: textRun,\n                  decorators: activeDecorators,\n                  annotations: activeAnnotations.map(\n                    ({_key, _type, ...value}) => ({\n                      name: _type,\n                      value,\n                    }),\n                  ),\n                }),\n                raise({type: 'insert.break'}),\n              ]\n            : [\n                raise({\n                  type: 'insert.span',\n                  text: textRun,\n                  decorators: activeDecorators,\n                  annotations: activeAnnotations.map(\n                    ({_key, _type, ...value}) => ({\n                      name: _type,\n                      value,\n                    }),\n                  ),\n                }),\n              ],\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'deserialization.success',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'insert.blocks',\n          blocks: event.data,\n          placement: 'auto',\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'deserialization.failure',\n    actions: [\n      ({event}) => [\n        {\n          type: 'effect',\n          effect: () => {\n            console.warn(\n              `Deserialization of ${event.mimeType} failed with reason \"${event.reason}\"`,\n            )\n          },\n        },\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'clipboard.paste',\n    guard: ({snapshot}) => {\n      return snapshot.context.selection &&\n        selectors.isSelectionExpanded(snapshot)\n        ? {selection: snapshot.context.selection}\n        : false\n    },\n    actions: [\n      ({event}, {selection}) => [\n        raise({\n          type: 'delete',\n          at: selection,\n        }),\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'clipboard.paste',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'input.*',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  ...abstractAnnotationBehaviors,\n  ...abstractDecoratorBehaviors,\n  ...abstractDeleteBehaviors,\n  ...abstractInsertBehaviors,\n  ...abstractKeyboardBehaviors,\n  ...abstractListItemBehaviors,\n  ...abstractMoveBehaviors,\n  ...abstractStyleBehaviors,\n  ...abstractSelectBehaviors,\n  ...abstractSplitBehaviors,\n  raiseDeserializationSuccessOrFailure,\n  raiseSerializationSuccessOrFailure,\n]\n","import type {KeyedSegment, PortableTextBlock} from '@sanity/types'\nimport type {TextUnit} from 'slate'\nimport type {EventPosition} from '../internal-utils/event-position'\nimport type {MIMEType} from '../internal-utils/mime-type'\nimport type {OmitFromUnion, PickFromUnion, StrictExtract} from '../type-utils'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {BlockWithOptionalKey} from '../types/block-with-optional-key'\nimport type {EditorSelection} from '../types/editor'\n\n/**\n * @beta\n */\nexport type BehaviorEvent =\n  | SyntheticBehaviorEvent\n  | NativeBehaviorEvent\n  | CustomBehaviorEvent\n\nexport type BehaviorEventTypeNamespace =\n  | SyntheticBehaviorEventNamespace\n  | NativeBehaviorEventNamespace\n  | CustomBehaviorEventNamespace\n\ntype NamespacedBehaviorEventType<\n  TNamespace extends BehaviorEventTypeNamespace | '',\n> = TNamespace extends ''\n  ? BehaviorEvent['type']\n  : Extract<BehaviorEvent['type'], TNamespace | `${TNamespace}.${string}`>\n\n/**************************************\n * External events\n **************************************/\n\ntype ExternalBehaviorEventNamespace = 'blur' | 'focus' | 'insert'\n\ntype ExternalBehaviorEventType<\n  TNamespace extends ExternalBehaviorEventNamespace,\n  TType extends string = '',\n> = TType extends '' ? `${TNamespace}` : `${TNamespace}.${TType}`\n\nexport type ExternalBehaviorEvent =\n  | {\n      type: ExternalBehaviorEventType<'blur'>\n    }\n  | {\n      type: ExternalBehaviorEventType<'focus'>\n    }\n  | {\n      type: ExternalBehaviorEventType<'insert', 'block object'>\n      placement: InsertPlacement\n      blockObject: {\n        name: string\n        value?: {[prop: string]: unknown}\n      }\n    }\n  | SyntheticBehaviorEvent\n  | CustomBehaviorEvent\n\n/**************************************\n * Synthetic events\n **************************************/\n\nconst syntheticBehaviorEventTypes = [\n  'annotation.add',\n  'annotation.remove',\n  'block.set',\n  'block.unset',\n  'decorator.add',\n  'decorator.remove',\n  'delete',\n  'delete.backward',\n  'delete.block',\n  'delete.forward',\n  'history.redo',\n  'history.undo',\n  'insert.inline object',\n  'insert.block',\n  'insert.span',\n  'insert.text',\n  'move.backward',\n  'move.block',\n  'move.forward',\n  'select',\n] as const\n\ntype SyntheticBehaviorEventType =\n  | (typeof syntheticBehaviorEventTypes)[number]\n  | (typeof abstractBehaviorEventTypes)[number]\n\ntype SyntheticBehaviorEventNamespace =\n  ExtractNamespace<SyntheticBehaviorEventType>\n\n/**\n * @beta\n */\nexport type SyntheticBehaviorEvent =\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'annotation.add'>\n      annotation: {\n        name: string\n        value: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'annotation.remove'>\n      annotation: {\n        name: string\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'block.set'>\n      at: [KeyedSegment]\n      props: Record<string, unknown>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'block.unset'>\n      at: [KeyedSegment]\n      props: Array<string>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'decorator.add'>\n      decorator: string\n      at?: {\n        anchor: BlockOffset\n        focus: BlockOffset\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'decorator.remove'>\n      decorator: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete'>\n      at: NonNullable<EditorSelection>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.backward'>\n      unit: TextUnit\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.block'>\n      at: [KeyedSegment]\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.forward'>\n      unit: TextUnit\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'history.redo'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'history.undo'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.inline object'>\n      inlineObject: {\n        name: string\n        value?: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.block'>\n      block: BlockWithOptionalKey\n      placement: InsertPlacement\n      select?: 'start' | 'end' | 'none'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.span'>\n      text: string\n      annotations?: Array<{\n        name: string\n        value: {[prop: string]: unknown}\n      }>\n      decorators?: Array<string>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.text'>\n      text: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.backward'>\n      distance: number\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.block'>\n      at: [KeyedSegment]\n      to: [KeyedSegment]\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.forward'>\n      distance: number\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'select'>\n      at: EditorSelection\n    }\n  | AbstractBehaviorEvent\n\nexport type InsertPlacement = 'auto' | 'after' | 'before'\n\nexport function isSyntheticBehaviorEvent(\n  event: BehaviorEvent,\n): event is OmitFromUnion<\n  SyntheticBehaviorEvent,\n  'type',\n  AbstractBehaviorEventType\n> {\n  return (\n    !isCustomBehaviorEvent(event) &&\n    !isNativeBehaviorEvent(event) &&\n    !isAbstractBehaviorEvent(event)\n  )\n}\n\n/**************************************\n * Abstract events\n **************************************/\n\nconst abstractBehaviorEventTypes = [\n  'annotation.toggle',\n  'decorator.toggle',\n  'delete.text',\n  'deserialize',\n  'deserialization.success',\n  'deserialization.failure',\n  'insert.blocks',\n  'insert.break',\n  'insert.soft break',\n  'list item.add',\n  'list item.remove',\n  'list item.toggle',\n  'move.block down',\n  'move.block up',\n  'select.previous block',\n  'select.next block',\n  'serialize',\n  'serialization.success',\n  'serialization.failure',\n  'split',\n  'style.add',\n  'style.remove',\n  'style.toggle',\n] as const\n\nexport type AbstractBehaviorEventType =\n  (typeof abstractBehaviorEventTypes)[number]\n\ntype AbstractBehaviorEvent =\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'annotation.toggle'>\n      annotation: {\n        name: string\n        value: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'decorator.toggle'>\n      decorator: string\n      at?: {anchor: BlockOffset; focus: BlockOffset}\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.text'>\n      at: {\n        anchor: BlockOffset\n        focus: BlockOffset\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'deserialize'>\n      originEvent:\n        | PickFromUnion<\n            NativeBehaviorEvent,\n            'type',\n            'drag.drop' | 'clipboard.paste'\n          >\n        | InputBehaviorEvent\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'serialize'>\n      originEvent: PickFromUnion<\n        NativeBehaviorEvent,\n        'type',\n        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'\n      >\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'deserialization.success'>\n      mimeType: MIMEType\n      data: Array<PortableTextBlock>\n      originEvent:\n        | PickFromUnion<\n            NativeBehaviorEvent,\n            'type',\n            'drag.drop' | 'clipboard.paste'\n          >\n        | InputBehaviorEvent\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'deserialization.failure'>\n      mimeType: MIMEType\n      reason: string\n      originEvent:\n        | PickFromUnion<\n            NativeBehaviorEvent,\n            'type',\n            'drag.drop' | 'clipboard.paste'\n          >\n        | InputBehaviorEvent\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'serialization.success'>\n      mimeType: MIMEType\n      data: string\n      originEvent: PickFromUnion<\n        NativeBehaviorEvent,\n        'type',\n        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'\n      >\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'serialization.failure'>\n      mimeType: MIMEType\n      reason: string\n      originEvent: PickFromUnion<\n        NativeBehaviorEvent,\n        'type',\n        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'\n      >\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.blocks'>\n      blocks: Array<BlockWithOptionalKey>\n      placement: InsertPlacement\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.break'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.soft break'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'list item.add'>\n      listItem: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'list item.remove'>\n      listItem: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'list item.toggle'>\n      listItem: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.block down'>\n      at: [KeyedSegment]\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.block up'>\n      at: [KeyedSegment]\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'select.previous block'>\n      select?: 'start' | 'end'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'select.next block'>\n      select?: 'start' | 'end'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'split'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'style.add'>\n      style: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'style.remove'>\n      style: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'style.toggle'>\n      style: string\n    }\n\nexport function isAbstractBehaviorEvent(\n  event: BehaviorEvent,\n): event is AbstractBehaviorEvent {\n  return (abstractBehaviorEventTypes as readonly string[]).includes(event.type)\n}\n\n/**************************************\n * Native events\n **************************************/\n\nconst nativeBehaviorEventTypes = [\n  'clipboard.copy',\n  'clipboard.cut',\n  'clipboard.paste',\n  'drag.dragstart',\n  'drag.drag',\n  'drag.dragend',\n  'drag.dragenter',\n  'drag.dragover',\n  'drag.dragleave',\n  'drag.drop',\n  'input.*',\n  'keyboard.keydown',\n  'keyboard.keyup',\n  'mouse.click',\n] as const\n\ntype NativeBehaviorEventType = (typeof nativeBehaviorEventTypes)[number]\n\ntype NativeBehaviorEventNamespace = ExtractNamespace<NativeBehaviorEventType>\n\nexport function isNativeBehaviorEvent(\n  event: BehaviorEvent,\n): event is NativeBehaviorEvent {\n  return (nativeBehaviorEventTypes as readonly string[]).includes(event.type)\n}\n\n/**\n * @beta\n */\nexport type NativeBehaviorEvent =\n  | ClipboardBehaviorEvent\n  | DragBehaviorEvent\n  | InputBehaviorEvent\n  | KeyboardBehaviorEvent\n  | MouseBehaviorEvent\n\ntype ClipboardBehaviorEvent =\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'clipboard.copy'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'clipboard.cut'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'clipboard.paste'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n\ntype DragBehaviorEvent =\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragstart'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.drag'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragend'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragenter'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: EventPosition\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragover'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: EventPosition\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.drop'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: EventPosition\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragleave'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n    }\n\n/**\n * Used to represent native InputEvents that hold a DataTransfer object.\n *\n * These can either be one of:\n *\n * - insertFromPaste\n * - insertFromPasteAsQuotation\n * - insertFromDrop\n * - insertReplacementText\n * - insertFromYank\n */\nexport type InputBehaviorEvent = {\n  type: StrictExtract<NativeBehaviorEventType, 'input.*'>\n  originEvent: {\n    dataTransfer: DataTransfer\n  }\n}\n\nexport type KeyboardBehaviorEvent =\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'keyboard.keydown'>\n      originEvent: Pick<\n        KeyboardEvent,\n        'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n      >\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'keyboard.keyup'>\n      originEvent: Pick<\n        KeyboardEvent,\n        'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n      >\n    }\n\nexport type MouseBehaviorEvent = {\n  type: StrictExtract<NativeBehaviorEventType, 'mouse.click'>\n  position: EventPosition\n}\n\n/**************************************\n * Custom events\n **************************************/\n\ntype CustomBehaviorEventNamespace = 'custom'\n\ntype CustomBehaviorEventType<\n  TNamespace extends CustomBehaviorEventNamespace,\n  TType extends string = '',\n> = TType extends '' ? `${TNamespace}` : `${TNamespace}.${TType}`\n\n/**\n * @beta\n */\nexport type CustomBehaviorEvent<\n  TPayload extends Record<string, unknown> = Record<string, unknown>,\n  TType extends string = string,\n  TInternalType extends CustomBehaviorEventType<\n    'custom',\n    TType\n  > = CustomBehaviorEventType<'custom', TType>,\n> = {\n  type: TInternalType\n} & TPayload\n\nexport function isCustomBehaviorEvent(\n  event: BehaviorEvent,\n): event is CustomBehaviorEvent {\n  return event.type.startsWith('custom.')\n}\n\n/**************************************\n * Resolve behavior event\n **************************************/\n\nexport type ResolveBehaviorEvent<\n  TBehaviorEventType extends\n    | '*'\n    | `${BehaviorEventTypeNamespace}.*`\n    | BehaviorEvent['type'],\n  TPayload extends Record<string, unknown> = Record<string, unknown>,\n> = TBehaviorEventType extends '*'\n  ? BehaviorEvent\n  : TBehaviorEventType extends `${infer TNamespace}.*`\n    ? TNamespace extends BehaviorEventTypeNamespace\n      ? PickFromUnion<\n          BehaviorEvent,\n          'type',\n          NamespacedBehaviorEventType<TNamespace>\n        >\n      : never\n    : TBehaviorEventType extends `custom.${infer TType}`\n      ? CustomBehaviorEvent<TPayload, TType>\n      : TBehaviorEventType extends BehaviorEvent['type']\n        ? PickFromUnion<BehaviorEvent, 'type', TBehaviorEventType>\n        : never\n\ntype ExtractNamespace<TType extends string> =\n  TType extends `${infer Namespace}.${string}` ? Namespace : TType\n","import type {EditorSchema} from '../editor/editor-schema'\nimport type {EditorSnapshot} from '../editor/editor-snapshot'\nimport {withApplyingBehaviorOperations} from '../editor/with-applying-behavior-operations'\nimport {withUndoStep} from '../editor/with-undo-step'\nimport {debugWithName} from '../internal-utils/debug'\nimport {performOperation} from '../operations/behavior.operations'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {abstractBehaviors} from './behavior.abstract'\nimport type {BehaviorAction} from './behavior.types.action'\nimport type {Behavior} from './behavior.types.behavior'\nimport {\n  isAbstractBehaviorEvent,\n  isCustomBehaviorEvent,\n  isNativeBehaviorEvent,\n  isSyntheticBehaviorEvent,\n  type BehaviorEvent,\n} from './behavior.types.event'\n\nconst debug = debugWithName('behaviors:event')\n\nfunction eventCategory(event: BehaviorEvent) {\n  return isNativeBehaviorEvent(event)\n    ? 'native'\n    : isAbstractBehaviorEvent(event)\n      ? 'synthetic'\n      : isCustomBehaviorEvent(event)\n        ? 'custom'\n        : 'synthetic'\n}\n\nexport function performEvent({\n  mode,\n  behaviors,\n  remainingEventBehaviors,\n  event,\n  editor,\n  keyGenerator,\n  schema,\n  getSnapshot,\n  nativeEvent,\n}: {\n  mode: 'raise' | 'execute' | 'forward'\n  behaviors: Array<Behavior>\n  remainingEventBehaviors: Array<Behavior>\n  event: BehaviorEvent\n  editor: PortableTextSlateEditor\n  keyGenerator: () => string\n  schema: EditorSchema\n  getSnapshot: () => EditorSnapshot\n  nativeEvent:\n    | {\n        preventDefault: () => void\n      }\n    | undefined\n}) {\n  debug(`(${mode}:${eventCategory(event)})`, JSON.stringify(event, null, 2))\n\n  const eventBehaviors = [\n    ...remainingEventBehaviors,\n    ...abstractBehaviors,\n  ].filter((behavior) => {\n    // Catches all events\n    if (behavior.on === '*') {\n      return true\n    }\n\n    const [listenedNamespace] =\n      behavior.on.includes('*') && behavior.on.includes('.')\n        ? behavior.on.split('.')\n        : [undefined]\n    const [eventNamespace] = event.type.includes('.')\n      ? event.type.split('.')\n      : [undefined]\n\n    // Handles scenarios like a Behavior listening for `select.*` and the event\n    // `select.block` is fired.\n    if (\n      listenedNamespace !== undefined &&\n      eventNamespace !== undefined &&\n      listenedNamespace === eventNamespace\n    ) {\n      return true\n    }\n\n    // Handles scenarios like a Behavior listening for `select.*` and the event\n    // `select` is fired.\n    if (\n      listenedNamespace !== undefined &&\n      eventNamespace === undefined &&\n      listenedNamespace === event.type\n    ) {\n      return true\n    }\n\n    return behavior.on === event.type\n  })\n\n  if (eventBehaviors.length === 0 && isSyntheticBehaviorEvent(event)) {\n    nativeEvent?.preventDefault()\n\n    withApplyingBehaviorOperations(editor, () => {\n      debug(`(execute:${eventCategory(event)})`, JSON.stringify(event, null, 2))\n\n      performOperation({\n        context: {\n          keyGenerator,\n          schema,\n        },\n        operation: {\n          ...event,\n          editor,\n        },\n      })\n    })\n\n    editor.onChange()\n\n    return\n  }\n\n  const guardSnapshot = getSnapshot()\n\n  let nativeEventPrevented = false\n  let defaultBehaviorOverwritten = false\n  let eventBehaviorIndex = -1\n\n  for (const eventBehavior of eventBehaviors) {\n    eventBehaviorIndex++\n\n    let shouldRun = false\n\n    try {\n      shouldRun =\n        eventBehavior.guard === undefined ||\n        eventBehavior.guard({\n          snapshot: guardSnapshot,\n          event,\n        })\n    } catch (error) {\n      console.error(\n        new Error(\n          `Evaluating guard for \"${event.type}\" failed due to: ${error.message}`,\n        ),\n      )\n    }\n\n    if (!shouldRun) {\n      continue\n    }\n\n    // This Behavior now \"owns\" the event and we can consider the default\n    // action prevented\n    defaultBehaviorOverwritten = true\n\n    for (const actionSet of eventBehavior.actions) {\n      const actionsSnapshot = getSnapshot()\n\n      let actions: Array<BehaviorAction> = []\n\n      try {\n        actions = actionSet(\n          {\n            snapshot: actionsSnapshot,\n            event,\n          },\n          shouldRun,\n        )\n      } catch (error) {\n        console.error(\n          new Error(\n            `Evaluating actions for \"${event.type}\" failed due to: ${error.message}`,\n          ),\n        )\n      }\n\n      if (actions.length === 0) {\n        continue\n      }\n\n      if (actions.some((action) => action.type === 'execute')) {\n        // Since at least one action is about to `execute` changes in the editor,\n        // we set up a new undo step.\n        // All actions performed recursively from now will be squashed into this\n        // undo step\n        withUndoStep(editor, () => {\n          for (const action of actions) {\n            if (action.type === 'effect') {\n              nativeEventPrevented = true\n\n              try {\n                action.effect()\n              } catch (error) {\n                console.error(\n                  new Error(\n                    `Executing effect as a result of \"${event.type}\" failed due to: ${error.message}`,\n                  ),\n                )\n              }\n\n              continue\n            }\n\n            if (action.type === 'forward') {\n              const remainingEventBehaviors = eventBehaviors.slice(\n                eventBehaviorIndex + 1,\n              )\n\n              performEvent({\n                mode: 'forward',\n                behaviors,\n                remainingEventBehaviors: remainingEventBehaviors,\n                event: action.event,\n                editor,\n                keyGenerator,\n                schema,\n                getSnapshot,\n                nativeEvent,\n              })\n\n              continue\n            }\n\n            if (action.type === 'raise') {\n              nativeEventPrevented = true\n\n              performEvent({\n                mode: 'raise',\n                behaviors,\n                remainingEventBehaviors: behaviors,\n                event: action.event,\n                editor,\n                keyGenerator,\n                schema,\n                getSnapshot,\n                nativeEvent,\n              })\n\n              continue\n            }\n\n            nativeEventPrevented = true\n\n            performEvent({\n              mode: 'execute',\n              behaviors,\n              remainingEventBehaviors: isAbstractBehaviorEvent(action.event)\n                ? behaviors\n                : [],\n              event: action.event,\n              editor,\n              keyGenerator,\n              schema,\n              getSnapshot,\n              nativeEvent: undefined,\n            })\n          }\n        })\n\n        continue\n      }\n\n      for (const action of actions) {\n        if (action.type === 'effect') {\n          nativeEventPrevented = true\n\n          try {\n            action.effect()\n          } catch (error) {\n            console.error(\n              new Error(\n                `Executing effect as a result of \"${event.type}\" failed due to: ${error.message}`,\n              ),\n            )\n          }\n\n          continue\n        }\n\n        if (action.type === 'forward') {\n          const remainingEventBehaviors = eventBehaviors.slice(\n            eventBehaviorIndex + 1,\n          )\n\n          performEvent({\n            mode: 'forward',\n            behaviors,\n            remainingEventBehaviors: remainingEventBehaviors,\n            event: action.event,\n            editor,\n            keyGenerator,\n            schema,\n            getSnapshot,\n            nativeEvent,\n          })\n\n          continue\n        }\n\n        if (action.type === 'raise') {\n          nativeEventPrevented = true\n\n          performEvent({\n            mode: 'raise',\n            behaviors,\n            remainingEventBehaviors: behaviors,\n            event: action.event,\n            editor,\n            keyGenerator,\n            schema,\n            getSnapshot,\n            nativeEvent,\n          })\n\n          continue\n        }\n\n        if (action.type === 'execute') {\n          console.error('Unexpected action type: `execute`')\n        }\n      }\n    }\n\n    break\n  }\n\n  if (!defaultBehaviorOverwritten && isSyntheticBehaviorEvent(event)) {\n    nativeEvent?.preventDefault()\n\n    withApplyingBehaviorOperations(editor, () => {\n      debug(`(execute:${eventCategory(event)})`, JSON.stringify(event, null, 2))\n\n      performOperation({\n        context: {keyGenerator, schema},\n        operation: {\n          ...event,\n          editor,\n        },\n      })\n    })\n\n    editor.onChange()\n  } else if (nativeEventPrevented) {\n    nativeEvent?.preventDefault()\n  }\n}\n","import type {EditorPriority} from './priority.types'\n\nexport function sortByPriority<\n  T extends {\n    priority?: EditorPriority\n  },\n>(items: Array<T>): Array<T> {\n  if (items.length === 0) {\n    return []\n  }\n\n  // Separate items with and without priority\n  const itemsWithPriority = items.filter(\n    (item): item is T & {priority: EditorPriority} =>\n      item.priority !== undefined,\n  )\n  const itemsWithoutPriority = items.filter(\n    (item) => item.priority === undefined,\n  )\n\n  if (itemsWithPriority.length === 0) {\n    return items\n  }\n\n  // Create a map of items by their priority ID\n  const itemsByPriorityId = new Map(\n    itemsWithPriority.map((item) => [item.priority.id, item]),\n  )\n\n  // Build the dependency graph\n  const graph = new Map<string, Set<string>>()\n  const inDegree = new Map<string, number>()\n\n  // Helper function to ensure a node exists in the graph\n  function ensureNode(id: string) {\n    if (!graph.has(id)) {\n      graph.set(id, new Set())\n      inDegree.set(id, 0)\n    }\n  }\n\n  // Initialize graph and in-degree for all items\n  for (const item of itemsWithPriority) {\n    const id = item.priority.id\n    ensureNode(id)\n  }\n\n  // Helper function to add an edge to the graph\n  function addEdge(fromId: string, toId: string) {\n    if (!graph.has(fromId) || !graph.has(toId)) return\n    graph.get(fromId)?.add(toId)\n    inDegree.set(toId, (inDegree.get(toId) ?? 0) + 1)\n  }\n\n  // Add edges based on references\n  for (const item of itemsWithPriority) {\n    const id = item.priority.id\n    const visited = new Set<string>()\n    let ref = item.priority.reference\n\n    while (ref) {\n      const refId = ref.priority.id\n      ensureNode(refId)\n\n      // Check for cyclic reference\n      if (visited.has(refId)) {\n        throw new Error('Circular dependency detected in priorities')\n      }\n      visited.add(refId)\n\n      if (ref.importance === 'higher') {\n        // Reference must come before current item\n        addEdge(id, refId)\n      } else {\n        // Current item must come before reference\n        addEdge(refId, id)\n      }\n\n      ref = ref.priority.reference\n    }\n  }\n\n  const queue: string[] = []\n\n  // Find all nodes with no incoming edges\n  for (const [id, degree] of inDegree) {\n    if (degree === 0) {\n      queue.push(id)\n    }\n  }\n\n  const result: T[] = []\n\n  // Perform topological sort\n  while (queue.length > 0) {\n    const currentId = queue.shift()!\n    const currentItem = itemsByPriorityId.get(currentId)\n    if (currentItem) {\n      result.push(currentItem)\n    }\n\n    // Decrease in-degree of neighbors\n    for (const neighborId of graph.get(currentId) ?? []) {\n      const newDegree = (inDegree.get(neighborId) ?? 0) - 1\n      inDegree.set(neighborId, newDegree)\n      if (newDegree === 0) {\n        queue.push(neighborId)\n      }\n    }\n  }\n\n  // Add any remaining items that weren't processed\n  for (const item of itemsWithPriority) {\n    if (!result.includes(item)) {\n      result.push(item)\n    }\n  }\n\n  // Append items without priority at the end in their original order\n  return [...result, ...itemsWithoutPriority]\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {Converter} from '../converters/converter.types'\nimport type {EventPosition} from '../internal-utils/event-position'\nimport {slateRangeToSelection} from '../internal-utils/slate-utils'\nimport type {EditorSelection, PortableTextSlateEditor} from '../types/editor'\nimport type {HasTag} from './editor-machine'\nimport type {EditorSchema} from './editor-schema'\nimport {getActiveAnnotations} from './get-active-annotations'\nimport {getActiveDecorators} from './get-active-decorators'\n\n/**\n * @public\n */\nexport type EditorContext = {\n  converters: Array<Converter>\n  keyGenerator: () => string\n  readOnly: boolean\n  schema: EditorSchema\n  selection: EditorSelection\n  value: Array<PortableTextBlock>\n}\n\n/**\n * @public\n */\nexport type EditorSnapshot = {\n  context: EditorContext\n  /**\n   * @beta\n   * Do not rely on this externally\n   */\n  beta: {\n    activeAnnotations: Array<string>\n    activeDecorators: Array<string>\n    hasTag: HasTag\n    internalDrag:\n      | {\n          origin: Pick<EventPosition, 'selection'>\n        }\n      | undefined\n  }\n}\n\nexport function createEditorSnapshot({\n  converters,\n  editor,\n  keyGenerator,\n  readOnly,\n  schema,\n  hasTag,\n  internalDrag,\n}: {\n  converters: Array<Converter>\n  editor: PortableTextSlateEditor\n  keyGenerator: () => string\n  readOnly: boolean\n  schema: EditorSchema\n  hasTag: HasTag\n  internalDrag:\n    | {\n        origin: Pick<EventPosition, 'selection'>\n      }\n    | undefined\n}) {\n  const selection = editor.selection\n    ? slateRangeToSelection({\n        schema,\n        editor,\n        range: editor.selection,\n      })\n    : null\n\n  const context = {\n    converters,\n    keyGenerator,\n    readOnly,\n    schema,\n    selection,\n    value: editor.value,\n  } satisfies EditorContext\n\n  return {\n    context,\n    beta: {\n      activeAnnotations: getActiveAnnotations({\n        markState: editor.markState,\n        schema,\n      }),\n      activeDecorators: getActiveDecorators({\n        decoratorState: editor.decoratorState,\n        markState: editor.markState,\n        schema,\n      }),\n      hasTag,\n      internalDrag,\n    },\n  } satisfies EditorSnapshot\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {Transforms} from 'slate'\nimport {ReactEditor} from 'slate-react'\nimport {\n  assertEvent,\n  assign,\n  emit,\n  enqueueActions,\n  setup,\n  type ActorRefFrom,\n} from 'xstate'\nimport type {BehaviorConfig} from '../behaviors/behavior.config'\nimport {coreBehaviorsConfig} from '../behaviors/behavior.core'\nimport {performEvent} from '../behaviors/behavior.perform-event'\nimport type {BehaviorEvent} from '../behaviors/behavior.types.event'\nimport type {Converter} from '../converters/converter.types'\nimport {debugWithName} from '../internal-utils/debug'\nimport type {EventPosition} from '../internal-utils/event-position'\nimport {sortByPriority} from '../priority/priority.sort'\nimport type {NamespaceEvent, OmitFromUnion} from '../type-utils'\nimport type {\n  EditorSelection,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\nimport {createEditorSnapshot} from './editor-snapshot'\nimport type {\n  EditorEmittedEvent,\n  MutationEvent,\n  PatchEvent,\n} from './relay-machine'\n\nexport * from 'xstate/guards'\n\nconst debug = debugWithName('editor machine')\n\n/**\n * @public\n */\nexport type PatchesEvent = {\n  type: 'patches'\n  patches: Array<Patch>\n  snapshot: Array<PortableTextBlock> | undefined\n}\n\n/**\n * @public\n */\nexport type ExternalEditorEvent =\n  | {\n      type: 'update readOnly'\n      readOnly: boolean\n    }\n  | {\n      type: 'update maxBlocks'\n      maxBlocks: number | undefined\n    }\n  | PatchesEvent\n\ntype InternalPatchEvent = NamespaceEvent<PatchEvent, 'internal'> & {\n  operationId?: string\n  value: Array<PortableTextBlock>\n}\n\n/**\n * @internal\n */\nexport type EditorActor = ActorRefFrom<typeof editorMachine>\nexport type HasTag = ReturnType<EditorActor['getSnapshot']>['hasTag']\n\n/**\n * @internal\n */\nexport type InternalEditorEvent =\n  | ExternalEditorEvent\n  | {\n      type: 'add behavior'\n      behaviorConfig: BehaviorConfig\n    }\n  | {\n      type: 'remove behavior'\n      behaviorConfig: BehaviorConfig\n    }\n  | {\n      type: 'blur'\n      editor: PortableTextSlateEditor\n    }\n  | {\n      type: 'focus'\n      editor: PortableTextSlateEditor\n    }\n  | {\n      type: 'normalizing'\n    }\n  | {\n      type: 'update selection'\n      selection: EditorSelection\n    }\n  | {\n      type: 'done normalizing'\n    }\n  | {\n      type: 'done syncing value'\n    }\n  | {\n      type: 'syncing value'\n    }\n  | {\n      type: 'behavior event'\n      behaviorEvent: BehaviorEvent\n      editor: PortableTextSlateEditor\n      nativeEvent?: {preventDefault: () => void}\n    }\n  | MutationEvent\n  | InternalPatchEvent\n  | {\n      type: 'dragstart'\n      origin: Pick<EventPosition, 'selection'>\n      ghost?: HTMLElement\n    }\n  | {type: 'dragend'}\n  | {type: 'drop'}\n\n/**\n * @internal\n */\nexport type InternalEditorEmittedEvent =\n  | OmitFromUnion<EditorEmittedEvent, 'type', 'patch'>\n  | InternalPatchEvent\n  | PatchesEvent\n\n/**\n * @internal\n */\nexport const editorMachine = setup({\n  types: {\n    context: {} as {\n      behaviors: Set<BehaviorConfig>\n      converters: Set<Converter>\n      getLegacySchema: () => PortableTextMemberSchemaTypes\n      keyGenerator: () => string\n      pendingEvents: Array<InternalPatchEvent | MutationEvent>\n      pendingIncomingPatchesEvents: Array<PatchesEvent>\n      schema: EditorSchema\n      initialReadOnly: boolean\n      maxBlocks: number | undefined\n      selection: EditorSelection\n      initialValue: Array<PortableTextBlock> | undefined\n      internalDrag?: {\n        ghost?: HTMLElement\n        origin: Pick<EventPosition, 'selection'>\n      }\n      slateEditor?: PortableTextSlateEditor\n    },\n    events: {} as InternalEditorEvent,\n    emitted: {} as InternalEditorEmittedEvent,\n    input: {} as {\n      converters?: Array<Converter>\n      getLegacySchema: () => PortableTextMemberSchemaTypes\n      keyGenerator: () => string\n      maxBlocks?: number\n      readOnly?: boolean\n      schema: EditorSchema\n      initialValue?: Array<PortableTextBlock>\n    },\n    tags: {} as 'dragging internally',\n  },\n  actions: {\n    'add behavior to context': assign({\n      behaviors: ({context, event}) => {\n        assertEvent(event, 'add behavior')\n\n        return new Set([...context.behaviors, event.behaviorConfig])\n      },\n    }),\n    'remove behavior from context': assign({\n      behaviors: ({context, event}) => {\n        assertEvent(event, 'remove behavior')\n\n        context.behaviors.delete(event.behaviorConfig)\n\n        return new Set([...context.behaviors])\n      },\n    }),\n    'emit patch event': enqueueActions(({event, enqueue}) => {\n      assertEvent(event, 'internal.patch')\n\n      enqueue.emit(event)\n    }),\n    'emit mutation event': emit(({event}) => {\n      assertEvent(event, 'mutation')\n      return event\n    }),\n    'emit read only': emit({type: 'read only'}),\n    'emit editable': emit({type: 'editable'}),\n    'defer event': assign({\n      pendingEvents: ({context, event}) => {\n        assertEvent(event, ['internal.patch', 'mutation'])\n        return [...context.pendingEvents, event]\n      },\n    }),\n    'emit pending events': enqueueActions(({context, enqueue}) => {\n      for (const event of context.pendingEvents) {\n        enqueue.emit(event)\n      }\n    }),\n    'emit ready': emit({type: 'ready'}),\n    'clear pending events': assign({\n      pendingEvents: [],\n    }),\n    'defer incoming patches': assign({\n      pendingIncomingPatchesEvents: ({context, event}) => {\n        return event.type === 'patches'\n          ? [...context.pendingIncomingPatchesEvents, event]\n          : context.pendingIncomingPatchesEvents\n      },\n    }),\n    'emit pending incoming patches': enqueueActions(({context, enqueue}) => {\n      for (const event of context.pendingIncomingPatchesEvents) {\n        enqueue.emit(event)\n      }\n    }),\n    'clear pending incoming patches': assign({\n      pendingIncomingPatchesEvents: [],\n    }),\n    'handle blur': ({event}) => {\n      assertEvent(event, 'blur')\n\n      try {\n        ReactEditor.blur(event.editor)\n      } catch (error) {\n        console.error(new Error(`Failed to blur editor: ${error.message}`))\n      }\n    },\n    'handle focus': ({context}) => {\n      if (!context.slateEditor) {\n        console.error('No Slate editor found to focus')\n        return\n      }\n\n      try {\n        const currentSelection = context.slateEditor.selection\n        ReactEditor.focus(context.slateEditor)\n        if (currentSelection) {\n          Transforms.select(context.slateEditor, currentSelection)\n        }\n      } catch (error) {\n        console.error(new Error(`Failed to focus editor: ${error.message}`))\n      }\n    },\n    'handle behavior event': ({context, event, self}) => {\n      assertEvent(event, ['behavior event'])\n\n      try {\n        const behaviors = sortByPriority([\n          ...context.behaviors.values(),\n          ...coreBehaviorsConfig,\n        ]).map((config) => config.behavior)\n\n        performEvent({\n          mode: 'raise',\n          behaviors,\n          remainingEventBehaviors: behaviors,\n          event: event.behaviorEvent,\n          editor: event.editor,\n          keyGenerator: context.keyGenerator,\n          schema: context.schema,\n          getSnapshot: () =>\n            createEditorSnapshot({\n              converters: [...context.converters],\n              editor: event.editor,\n              keyGenerator: context.keyGenerator,\n              readOnly: self.getSnapshot().matches({'edit mode': 'read only'}),\n              schema: context.schema,\n              hasTag: (tag) => self.getSnapshot().hasTag(tag),\n              internalDrag: context.internalDrag,\n            }),\n          nativeEvent: event.nativeEvent,\n        })\n      } catch (error) {\n        console.error(\n          new Error(\n            `Raising \"${event.behaviorEvent.type}\" failed due to: ${error.message}`,\n          ),\n        )\n      }\n    },\n  },\n  guards: {\n    'slate is busy': ({context}) => {\n      if (!context.slateEditor) {\n        return false\n      }\n\n      return context.slateEditor.operations.length > 0\n    },\n  },\n}).createMachine({\n  id: 'editor',\n  context: ({input}) => ({\n    behaviors: new Set([]),\n    converters: new Set(input.converters ?? []),\n    getLegacySchema: input.getLegacySchema,\n    keyGenerator: input.keyGenerator,\n    pendingEvents: [],\n    pendingIncomingPatchesEvents: [],\n    schema: input.schema,\n    selection: null,\n    initialReadOnly: input.readOnly ?? false,\n    maxBlocks: input.maxBlocks,\n    initialValue: input.initialValue,\n  }),\n  on: {\n    'add behavior': {actions: 'add behavior to context'},\n    'remove behavior': {actions: 'remove behavior from context'},\n    'update maxBlocks': {\n      actions: assign({maxBlocks: ({event}) => event.maxBlocks}),\n    },\n    'update selection': {\n      actions: [\n        assign({selection: ({event}) => event.selection}),\n        emit(({event}) => ({...event, type: 'selection'})),\n      ],\n    },\n  },\n  type: 'parallel',\n  states: {\n    'edit mode': {\n      initial: 'read only',\n      states: {\n        'read only': {\n          initial: 'determine initial edit mode',\n          on: {\n            'behavior event': {\n              actions: 'handle behavior event',\n              guard: ({event}) =>\n                event.behaviorEvent.type === 'clipboard.copy' ||\n                event.behaviorEvent.type === 'mouse.click' ||\n                event.behaviorEvent.type === 'serialize' ||\n                event.behaviorEvent.type === 'serialization.failure' ||\n                event.behaviorEvent.type === 'serialization.success' ||\n                event.behaviorEvent.type === 'select',\n            },\n          },\n          states: {\n            'determine initial edit mode': {\n              entry: [\n                () => {\n                  debug(\n                    'entry: edit mode->read only->determine initial edit mode',\n                  )\n                },\n              ],\n              exit: [\n                () => {\n                  debug(\n                    'exit: edit mode->read only->determine initial edit mode',\n                  )\n                },\n              ],\n              on: {\n                'done syncing value': [\n                  {\n                    target: '#editor.edit mode.read only.read only',\n                    guard: ({context}) => context.initialReadOnly,\n                  },\n                  {\n                    target: '#editor.edit mode.editable',\n                  },\n                ],\n              },\n            },\n            'read only': {\n              entry: [\n                () => {\n                  debug('entry: edit mode->read only->read only')\n                },\n              ],\n              exit: [\n                () => {\n                  debug('exit: edit mode->read only->read only')\n                },\n              ],\n              on: {\n                'update readOnly': {\n                  guard: ({event}) => !event.readOnly,\n                  target: '#editor.edit mode.editable',\n                  actions: ['emit editable'],\n                },\n              },\n            },\n          },\n        },\n        'editable': {\n          on: {\n            'update readOnly': {\n              guard: ({event}) => event.readOnly,\n              target: '#editor.edit mode.read only.read only',\n              actions: ['emit read only'],\n            },\n            'behavior event': {\n              actions: 'handle behavior event',\n            },\n            'blur': {\n              actions: 'handle blur',\n            },\n            'focus': {\n              target: '.focusing',\n              actions: [assign({slateEditor: ({event}) => event.editor})],\n            },\n          },\n          initial: 'idle',\n          states: {\n            'idle': {\n              entry: [\n                () => {\n                  debug('entry: edit mode->editable->idle')\n                },\n              ],\n              exit: [\n                () => {\n                  debug('exit: edit mode->editable-idle')\n                },\n              ],\n              on: {\n                dragstart: {\n                  actions: [\n                    assign({\n                      internalDrag: ({event}) => ({\n                        ghost: event.ghost,\n                        origin: event.origin,\n                      }),\n                    }),\n                  ],\n                  target: 'dragging internally',\n                },\n              },\n            },\n            'focusing': {\n              initial: 'checking if busy',\n              states: {\n                'checking if busy': {\n                  entry: [\n                    () => {\n                      debug(\n                        'entry: edit mode->editable->focusing->checking if busy',\n                      )\n                    },\n                  ],\n                  exit: [\n                    () => {\n                      debug(\n                        'exit: edit mode->editable->focusing->checking if busy',\n                      )\n                    },\n                  ],\n                  always: [\n                    {\n                      guard: 'slate is busy',\n                      target: 'busy',\n                    },\n                    {\n                      target: '#editor.edit mode.editable.idle',\n                      actions: ['handle focus'],\n                    },\n                  ],\n                },\n                'busy': {\n                  entry: [\n                    () => {\n                      debug('entry: edit mode->editable->focusing-busy')\n                    },\n                  ],\n                  exit: [\n                    () => {\n                      debug('exit: edit mode->editable->focusing->busy')\n                    },\n                  ],\n                  after: {\n                    10: {\n                      target: 'checking if busy',\n                    },\n                  },\n                },\n              },\n            },\n            'dragging internally': {\n              entry: [\n                () => {\n                  debug('entry: edit mode->editable->dragging internally')\n                },\n              ],\n              exit: [\n                () => {\n                  debug('exit: edit mode->editable->dragging internally')\n                },\n                ({context}) => {\n                  if (context.internalDrag?.ghost) {\n                    try {\n                      context.internalDrag.ghost.parentNode?.removeChild(\n                        context.internalDrag.ghost,\n                      )\n                    } catch (error) {\n                      console.error(\n                        new Error(\n                          `Removing the internal drag ghost failed due to: ${error.message}`,\n                        ),\n                      )\n                    }\n                  }\n                },\n                assign({internalDrag: undefined}),\n              ],\n              tags: ['dragging internally'],\n              on: {\n                dragend: {target: 'idle'},\n                drop: {target: 'idle'},\n              },\n            },\n          },\n        },\n      },\n    },\n    'setup': {\n      initial: 'setting up',\n      states: {\n        'setting up': {\n          entry: [\n            () => {\n              debug('entry: setup->setting up')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: setup->setting up')\n            },\n            'emit ready',\n            'emit pending incoming patches',\n            'clear pending incoming patches',\n          ],\n          on: {\n            'internal.patch': {\n              actions: 'defer event',\n            },\n            'mutation': {\n              actions: 'defer event',\n            },\n            'done syncing value': {\n              target: 'set up',\n            },\n            'patches': {\n              actions: ['defer incoming patches'],\n            },\n          },\n        },\n        'set up': {\n          type: 'parallel',\n          states: {\n            'value sync': {\n              initial: 'idle',\n              states: {\n                'idle': {\n                  entry: [\n                    () => {\n                      debug('entry: setup->set up->value sync->idle')\n                    },\n                  ],\n                  exit: [\n                    () => {\n                      debug('exit: setup->set up->value sync->idle')\n                    },\n                  ],\n                  on: {\n                    'patches': {\n                      actions: [emit(({event}) => event)],\n                    },\n                    'syncing value': {\n                      target: 'syncing value',\n                    },\n                  },\n                },\n                'syncing value': {\n                  entry: [\n                    () => {\n                      debug('entry: setup->set up->value sync->syncing value')\n                    },\n                  ],\n                  exit: [\n                    () => {\n                      debug('exit: setup->set up->value sync->syncing value')\n                    },\n                    'emit pending incoming patches',\n                    'clear pending incoming patches',\n                  ],\n                  on: {\n                    'patches': {\n                      actions: ['defer incoming patches'],\n                    },\n                    'done syncing value': {\n                      target: 'idle',\n                    },\n                  },\n                },\n              },\n            },\n            'writing': {\n              initial: 'pristine',\n              states: {\n                pristine: {\n                  initial: 'idle',\n                  states: {\n                    idle: {\n                      entry: [\n                        () => {\n                          debug('entry: setup->set up->writing->pristine->idle')\n                        },\n                      ],\n                      exit: [\n                        () => {\n                          debug('exit: setup->set up->writing->pristine->idle')\n                        },\n                      ],\n                      on: {\n                        'normalizing': {\n                          target: 'normalizing',\n                        },\n                        'internal.patch': {\n                          actions: 'defer event',\n                          target: '#editor.setup.set up.writing.dirty',\n                        },\n                        'mutation': {\n                          actions: 'defer event',\n                          target: '#editor.setup.set up.writing.dirty',\n                        },\n                      },\n                    },\n                    normalizing: {\n                      entry: [\n                        () => {\n                          debug(\n                            'entry: setup->set up->writing->pristine->normalizing',\n                          )\n                        },\n                      ],\n                      exit: [\n                        () => {\n                          debug(\n                            'exit: setup->set up->writing->pristine->normalizing',\n                          )\n                        },\n                      ],\n                      on: {\n                        'done normalizing': {\n                          target: 'idle',\n                        },\n                        'internal.patch': {\n                          actions: 'defer event',\n                        },\n                        'mutation': {\n                          actions: 'defer event',\n                        },\n                      },\n                    },\n                  },\n                },\n                dirty: {\n                  entry: [\n                    () => {\n                      debug('entry: setup->set up->writing->dirty')\n                    },\n                    'emit pending events',\n                    'clear pending events',\n                  ],\n                  exit: [\n                    () => {\n                      debug('exit: setup->set up->writing->dirty')\n                    },\n                  ],\n                  on: {\n                    'internal.patch': {\n                      actions: 'emit patch event',\n                    },\n                    'mutation': {\n                      actions: 'emit mutation event',\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n})\n","import type {\n  ArraySchemaType,\n  BlockSchemaType,\n  ObjectSchemaType,\n  PortableTextBlock,\n  SchemaType,\n  SpanSchemaType,\n} from '@sanity/types'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\n\nexport function createLegacySchema(\n  portableTextType: ArraySchemaType<PortableTextBlock>,\n): PortableTextMemberSchemaTypes {\n  if (!portableTextType) {\n    throw new Error(\"Parameter 'portabletextType' missing (required)\")\n  }\n  const blockType = portableTextType.of?.find(findBlockType) as\n    | BlockSchemaType\n    | undefined\n  if (!blockType) {\n    throw new Error('Block type is not defined in this schema (required)')\n  }\n  const childrenField = blockType.fields?.find(\n    (field) => field.name === 'children',\n  ) as {type: ArraySchemaType} | undefined\n  if (!childrenField) {\n    throw new Error('Children field for block type found in schema (required)')\n  }\n  const ofType = childrenField.type.of\n  if (!ofType) {\n    throw new Error(\n      'Valid types for block children not found in schema (required)',\n    )\n  }\n  const spanType = ofType.find((memberType) => memberType.name === 'span') as\n    | ObjectSchemaType\n    | undefined\n  if (!spanType) {\n    throw new Error('Span type not found in schema (required)')\n  }\n  const inlineObjectTypes = (ofType.filter(\n    (memberType) => memberType.name !== 'span',\n  ) || []) as ObjectSchemaType[]\n  const blockObjectTypes = (portableTextType.of?.filter(\n    (field) => field.name !== blockType.name,\n  ) || []) as ObjectSchemaType[]\n  return {\n    styles: resolveEnabledStyles(blockType),\n    decorators: resolveEnabledDecorators(spanType),\n    lists: resolveEnabledListItems(blockType),\n    block: blockType,\n    span: spanType,\n    portableText: portableTextType,\n    inlineObjects: inlineObjectTypes,\n    blockObjects: blockObjectTypes,\n    annotations: (spanType as SpanSchemaType).annotations,\n  }\n}\n\nfunction resolveEnabledStyles(blockType: ObjectSchemaType) {\n  const styleField = blockType.fields?.find(\n    (btField) => btField.name === 'style',\n  )\n  if (!styleField) {\n    throw new Error(\n      \"A field with name 'style' is not defined in the block type (required).\",\n    )\n  }\n  const textStyles =\n    styleField.type.options?.list &&\n    styleField.type.options.list?.filter(\n      (style: {value: string}) => style.value,\n    )\n  if (!textStyles || textStyles.length === 0) {\n    throw new Error(\n      'The style fields need at least one style ' +\n        \"defined. I.e: {title: 'Normal', value: 'normal'}.\",\n    )\n  }\n  return textStyles\n}\n\nfunction resolveEnabledDecorators(spanType: ObjectSchemaType) {\n  return (spanType as any).decorators\n}\n\nfunction resolveEnabledListItems(blockType: ObjectSchemaType) {\n  const listField = blockType.fields?.find(\n    (btField) => btField.name === 'listItem',\n  )\n  if (!listField) {\n    throw new Error(\n      \"A field with name 'listItem' is not defined in the block type (required).\",\n    )\n  }\n  const listItems =\n    listField.type.options?.list &&\n    listField.type.options.list.filter((list: {value: string}) => list.value)\n  if (!listItems) {\n    throw new Error('The list field need at least to be an empty array')\n  }\n  return listItems\n}\n\nfunction findBlockType(type: SchemaType): BlockSchemaType | null {\n  if (type.type) {\n    return findBlockType(type.type)\n  }\n\n  if (type.name === 'block') {\n    return type as BlockSchemaType\n  }\n\n  return null\n}\n","import {Schema as SanitySchema} from '@sanity/schema'\nimport {defineField, defineType, type ObjectSchemaType} from '@sanity/types'\nimport startCase from 'lodash.startcase'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {defaultKeyGenerator} from './key-generator'\nimport {createLegacySchema} from './legacy-schema'\n\n/**\n * @public\n */\nexport type BaseDefinition = {\n  name: string\n  title?: string\n}\n\nexport type FieldDefinition = {\n  name: string\n  type: 'string' | 'number' | 'boolean' | 'array' | 'object'\n}\n\n/**\n * @public\n */\nexport type SchemaDefinition<\n  TBaseDefinition extends BaseDefinition = BaseDefinition,\n> = {\n  decorators?: ReadonlyArray<TBaseDefinition>\n  blockObjects?: ReadonlyArray<\n    TBaseDefinition & {fields?: ReadonlyArray<FieldDefinition>}\n  >\n  inlineObjects?: ReadonlyArray<\n    TBaseDefinition & {fields?: ReadonlyArray<FieldDefinition>}\n  >\n  annotations?: ReadonlyArray<\n    TBaseDefinition & {fields?: ReadonlyArray<FieldDefinition>}\n  >\n  lists?: ReadonlyArray<TBaseDefinition>\n  styles?: ReadonlyArray<TBaseDefinition>\n}\n\n/**\n * @public\n * A helper wrapper that adds editor support, such as autocomplete and type checking, for a schema definition.\n * @example\n * ```ts\n * import { defineSchema } from '@portabletext/editor'\n *\n * const schemaDefinition = defineSchema({\n *  decorators: [{name: 'strong'}, {name: 'em'}, {name: 'underline'}],\n *  annotations: [{name: 'link'}],\n *  styles: [\n *    {name: 'normal'},\n *    {name: 'h1'},\n *    {name: 'h2'},\n *    {name: 'h3'},\n *    {name: 'blockquote'},\n *  ],\n *  lists: [],\n *  inlineObjects: [],\n *  blockObjects: [],\n * }\n * ```\n */\nexport function defineSchema<const TSchemaDefinition extends SchemaDefinition>(\n  definition: TSchemaDefinition,\n): TSchemaDefinition {\n  return definition\n}\n\nconst temporaryImageName = `tmp-${defaultKeyGenerator()}-image`\nconst temporaryUrlName = `tmp-${defaultKeyGenerator()}-url`\n\nconst temporaryObjectNames: Record<string, string> = {\n  image: temporaryImageName,\n  url: temporaryUrlName,\n}\n\nconst objectNames: Record<string, string> = {\n  [temporaryImageName]: 'image',\n  [temporaryUrlName]: 'url',\n}\n\nconst defaultObjectTitles: Record<string, string> = {\n  image: 'Image',\n  url: 'URL',\n}\n\n/**\n * @public\n */\nexport type EditorSchema = {\n  annotations: ReadonlyArray<\n    BaseDefinition & {\n      fields: ReadonlyArray<{name: string; type: string}>\n    }\n  >\n  block: {\n    name: string\n  }\n  blockObjects: ReadonlyArray<\n    BaseDefinition & {\n      fields: ReadonlyArray<{name: string; type: string}>\n    }\n  >\n  decorators: ReadonlyArray<\n    BaseDefinition & {\n      /**\n       * @deprecated\n       * Use `name` instead\n       */\n      value: string\n    }\n  >\n  inlineObjects: ReadonlyArray<\n    BaseDefinition & {\n      fields: ReadonlyArray<{name: string; type: string}>\n    }\n  >\n  span: {\n    name: string\n  }\n  styles: ReadonlyArray<\n    BaseDefinition & {\n      /**\n       * @deprecated\n       * Use `name` instead\n       */\n      value: string\n    }\n  >\n  lists: ReadonlyArray<\n    BaseDefinition & {\n      /**\n       * @deprecated\n       * Use `name` instead\n       */\n      value: string\n    }\n  >\n}\n\nexport function legacySchemaToEditorSchema(\n  schema: PortableTextMemberSchemaTypes,\n): EditorSchema {\n  return {\n    annotations: schema.annotations.map((annotation) => ({\n      name: annotation.name,\n      fields: annotation.fields.map((field) => ({\n        name: field.name,\n        type: field.type.jsonType,\n      })),\n      title: annotation.title,\n    })),\n    block: {\n      name: schema.block.name,\n    },\n    blockObjects: schema.blockObjects.map((blockObject) => ({\n      name: blockObject.name,\n      fields: blockObject.fields.map((field) => ({\n        name: field.name,\n        type: field.type.jsonType,\n      })),\n      title: blockObject.title,\n    })),\n    decorators: schema.decorators.map((decorator) => ({\n      name: decorator.value,\n      title: decorator.title,\n      value: decorator.value,\n    })),\n    inlineObjects: schema.inlineObjects.map((inlineObject) => ({\n      name: inlineObject.name,\n      fields: inlineObject.fields.map((field) => ({\n        name: field.name,\n        type: field.type.jsonType,\n      })),\n      title: inlineObject.title,\n    })),\n    span: {\n      name: schema.span.name,\n    },\n    styles: schema.styles.map((style) => ({\n      name: style.value,\n      title: style.title,\n      value: style.value,\n    })),\n    lists: schema.lists.map((list) => ({\n      name: list.value,\n      title: list.title,\n      value: list.value,\n    })),\n  }\n}\n\nexport function compileSchemaDefinition<\n  TSchemaDefinition extends SchemaDefinition,\n>(definition: TSchemaDefinition): EditorSchema {\n  return legacySchemaToEditorSchema(\n    compileSchemaDefinitionToLegacySchema(definition),\n  )\n}\n\nexport function compileSchemaDefinitionToLegacySchema<\n  TSchemaDefinition extends SchemaDefinition,\n>(definition?: TSchemaDefinition): PortableTextMemberSchemaTypes {\n  const blockObjects =\n    definition?.blockObjects?.map((blockObject) =>\n      defineType({\n        type: 'object',\n        // Very naive way to work around `SanitySchema.compile` adding default\n        // fields to objects with certain names.\n        name: temporaryObjectNames[blockObject.name] ?? blockObject.name,\n        title:\n          blockObject.title === undefined\n            ? // This avoids the default title which is a title case of the object name\n              defaultObjectTitles[blockObject.name]\n            : blockObject.title,\n        fields:\n          blockObject.fields?.map((field) => ({\n            name: field.name,\n            type: field.type,\n          })) ?? [],\n      }),\n    ) ?? []\n\n  const inlineObjects =\n    definition?.inlineObjects?.map((inlineObject) =>\n      defineType({\n        type: 'object',\n        // Very naive way to work around `SanitySchema.compile` adding default\n        // fields to objects with certain names.\n        name: temporaryObjectNames[inlineObject.name] ?? inlineObject.name,\n\n        title:\n          inlineObject.title === undefined\n            ? // This avoids the default title which is a title case of the object name\n              defaultObjectTitles[inlineObject.name]\n            : inlineObject.title,\n        fields:\n          inlineObject.fields?.map((field) => ({\n            name: field.name,\n            type: field.type,\n          })) ?? [],\n      }),\n    ) ?? []\n\n  const portableTextSchema = defineField({\n    type: 'array',\n    name: 'portable-text',\n    of: [\n      ...blockObjects.map((blockObject) => ({type: blockObject.name})),\n      {\n        type: 'block',\n        name: 'block',\n        of: inlineObjects.map((inlineObject) => ({type: inlineObject.name})),\n        marks: {\n          decorators:\n            definition?.decorators?.map((decorator) => ({\n              title: decorator.title ?? startCase(decorator.name),\n              value: decorator.name,\n            })) ?? [],\n          annotations:\n            definition?.annotations?.map((annotation) => ({\n              name: annotation.name,\n              type: 'object',\n              title: annotation.title,\n              fields:\n                annotation.fields?.map((field) => ({\n                  name: field.name,\n                  type: field.type,\n                })) ?? [],\n            })) ?? [],\n        },\n        lists:\n          definition?.lists?.map((list) => ({\n            value: list.name,\n            title: list.title ?? startCase(list.name),\n          })) ?? [],\n        styles:\n          definition?.styles?.map((style) => ({\n            value: style.name,\n            title: style.title ?? startCase(style.name),\n          })) ?? [],\n      },\n    ],\n  })\n\n  const schema = SanitySchema.compile({\n    types: [portableTextSchema, ...blockObjects, ...inlineObjects],\n  }).get('portable-text')\n\n  const pteSchema = createLegacySchema(schema)\n\n  return {\n    ...pteSchema,\n    blockObjects: pteSchema.blockObjects.map((blockObject) =>\n      objectNames[blockObject.name] !== undefined\n        ? ({\n            ...blockObject,\n            name: objectNames[blockObject.name],\n            type: {\n              ...blockObject.type,\n              name: objectNames[blockObject.name],\n            },\n          } as ObjectSchemaType)\n        : blockObject,\n    ),\n    inlineObjects: pteSchema.inlineObjects.map((inlineObject) =>\n      objectNames[inlineObject.name] !== undefined\n        ? ({\n            ...inlineObject,\n            name: objectNames[inlineObject.name],\n          } as ObjectSchemaType)\n        : inlineObject,\n    ),\n  } satisfies PortableTextMemberSchemaTypes\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {Editor} from 'slate'\nimport type {ActorRefFrom} from 'xstate'\nimport {\n  and,\n  assertEvent,\n  assign,\n  emit,\n  enqueueActions,\n  fromCallback,\n  not,\n  setup,\n  stateIn,\n  type AnyEventObject,\n} from 'xstate'\nimport {debugWithName} from '../internal-utils/debug'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\nimport type {PatchEvent} from './relay-machine'\n\nconst debug = debugWithName('mutation-machine')\n\nexport type MutationActor = ActorRefFrom<typeof mutationMachine>\n\n/**\n * Makes sure editor mutation events are debounced\n */\nexport const mutationMachine = setup({\n  types: {\n    context: {} as {\n      pendingMutations: Array<{\n        operationId?: string\n        value: Array<PortableTextBlock> | undefined\n        patches: Array<Patch>\n      }>\n      pendingPatchEvents: Array<PatchEvent>\n      readOnly: boolean\n      schema: EditorSchema\n      slateEditor: PortableTextSlateEditor\n    },\n    events: {} as\n      | {\n          type: 'patch'\n          patch: Patch\n          operationId?: string\n          value: Array<PortableTextBlock>\n        }\n      | {\n          type: 'typing'\n        }\n      | {\n          type: 'not typing'\n        }\n      | {\n          type: 'update readOnly'\n          readOnly: boolean\n        },\n    input: {} as {\n      readOnly: boolean\n      schema: EditorSchema\n      slateEditor: PortableTextSlateEditor\n    },\n    emitted: {} as\n      | {\n          type: 'has pending mutations'\n        }\n      | {\n          type: 'mutation'\n          patches: Array<Patch>\n          snapshot: Array<PortableTextBlock> | undefined\n        }\n      | PatchEvent,\n  },\n  actions: {\n    'assign readOnly': assign({\n      readOnly: ({context, event}) =>\n        event.type === 'update readOnly' ? event.readOnly : context.readOnly,\n    }),\n    'emit patch': enqueueActions(({event, enqueue}) => {\n      if (event.type === 'patch') {\n        enqueue.emit({type: 'patch', patch: event.patch})\n      }\n    }),\n    'emit has pending mutations': emit({type: 'has pending mutations'}),\n    'emit mutations': enqueueActions(({context, enqueue}) => {\n      for (const bulk of context.pendingMutations) {\n        enqueue.emit({\n          type: 'mutation',\n          patches: bulk.patches,\n          snapshot: bulk.value,\n        })\n      }\n    }),\n    'clear pending mutations': assign({\n      pendingMutations: [],\n    }),\n    'defer mutation': assign({\n      pendingMutations: ({context, event}) => {\n        assertEvent(event, 'patch')\n\n        if (context.pendingMutations.length === 0) {\n          return [\n            {\n              operationId: event.operationId,\n              value: event.value,\n              patches: [event.patch],\n            },\n          ]\n        }\n\n        const lastBulk = context.pendingMutations.at(-1)\n\n        if (lastBulk && lastBulk.operationId === event.operationId) {\n          return context.pendingMutations.slice(0, -1).concat({\n            value: event.value,\n            operationId: lastBulk.operationId,\n            patches: [...lastBulk.patches, event.patch],\n          })\n        }\n\n        return context.pendingMutations.concat({\n          value: event.value,\n          operationId: event.operationId,\n          patches: [event.patch],\n        })\n      },\n    }),\n    'clear pending patch events': assign({\n      pendingPatchEvents: [],\n    }),\n    'defer patch': assign({\n      pendingPatchEvents: ({context, event}) =>\n        event.type === 'patch'\n          ? [...context.pendingPatchEvents, event]\n          : context.pendingPatchEvents,\n    }),\n    'emit pending patch events': enqueueActions(({context, enqueue}) => {\n      for (const event of context.pendingPatchEvents) {\n        enqueue.emit(event)\n      }\n    }),\n  },\n  actors: {\n    'type listener': fromCallback<\n      AnyEventObject,\n      {slateEditor: PortableTextSlateEditor},\n      {type: 'typing'} | {type: 'not typing'}\n    >(({input, sendBack}) => {\n      const originalApply = input.slateEditor.apply\n\n      input.slateEditor.apply = (op) => {\n        if (op.type === 'insert_text' || op.type === 'remove_text') {\n          sendBack({type: 'typing'})\n        } else {\n          sendBack({type: 'not typing'})\n        }\n        originalApply(op)\n      }\n\n      return () => {\n        input.slateEditor.apply = originalApply\n      }\n    }),\n  },\n  guards: {\n    'is read-only': ({context}) => context.readOnly,\n    'is typing': stateIn({typing: 'typing'}),\n    'no pending mutations': ({context}) =>\n      context.pendingMutations.length === 0,\n    'slate is normalizing': ({context}) =>\n      Editor.isNormalizing(context.slateEditor),\n  },\n  delays: {\n    'mutation debounce': process.env.NODE_ENV === 'test' ? 250 : 0,\n    'type debounce': process.env.NODE_ENV === 'test' ? 0 : 250,\n  },\n}).createMachine({\n  id: 'mutation',\n  context: ({input}) => ({\n    pendingMutations: [],\n    pendingPatchEvents: [],\n    readOnly: input.readOnly,\n    schema: input.schema,\n    slateEditor: input.slateEditor,\n  }),\n  on: {\n    'update readOnly': {\n      actions: ['assign readOnly'],\n    },\n  },\n  type: 'parallel',\n  states: {\n    typing: {\n      initial: 'idle',\n      invoke: {\n        src: 'type listener',\n        input: ({context}) => ({slateEditor: context.slateEditor}),\n      },\n      states: {\n        idle: {\n          entry: [\n            () => {\n              debug('entry: typing->idle')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: typing->idle')\n            },\n          ],\n          on: {\n            typing: {\n              target: 'typing',\n            },\n          },\n        },\n        typing: {\n          entry: [\n            () => {\n              debug('entry: typing->typing')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: typing->typing')\n            },\n          ],\n          after: {\n            'type debounce': {\n              target: 'idle',\n            },\n          },\n          on: {\n            'not typing': {\n              target: 'idle',\n            },\n            'typing': {\n              target: 'typing',\n              reenter: true,\n            },\n          },\n        },\n      },\n    },\n    mutations: {\n      initial: 'idle',\n      states: {\n        'idle': {\n          entry: [\n            () => {\n              debug('entry: mutations->idle')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: mutations->idle')\n            },\n          ],\n          on: {\n            patch: {\n              actions: [\n                'emit patch',\n                'defer mutation',\n                'emit has pending mutations',\n              ],\n              target: 'emitting mutations',\n            },\n          },\n        },\n        'emitting mutations': {\n          entry: [\n            () => {\n              debug('entry: mutations->emitting mutations')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: mutations->emitting mutations')\n            },\n          ],\n          after: {\n            'mutation debounce': [\n              {\n                guard: 'is read-only',\n                target: 'read-only',\n              },\n              {\n                guard: and([not('is typing'), 'slate is normalizing']),\n                target: 'idle',\n                actions: ['emit mutations', 'clear pending mutations'],\n              },\n              {\n                target: 'emitting mutations',\n                reenter: true,\n              },\n            ],\n          },\n          on: {\n            patch: {\n              target: 'emitting mutations',\n              actions: ['emit patch', 'defer mutation'],\n              reenter: true,\n            },\n          },\n        },\n        'read-only': {\n          entry: [\n            () => {\n              debug('entry: mutations->read-only')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: mutations->read-only')\n            },\n          ],\n          always: [\n            {\n              guard: not('is read-only'),\n              target: 'emitting mutations',\n              actions: [\n                'emit pending patch events',\n                'clear pending patch events',\n              ],\n            },\n          ],\n          on: {\n            patch: {\n              actions: ['defer patch', 'defer mutation'],\n            },\n          },\n        },\n      },\n    },\n  },\n})\n","import {\n  isPortableTextSpan,\n  type Path,\n  type PortableTextBlock,\n  type PortableTextChild,\n  type PortableTextObject,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {\n  Editor,\n  Node,\n  Range,\n  Element as SlateElement,\n  Text,\n  Transforms,\n} from 'slate'\nimport type {DOMNode} from 'slate-dom'\nimport {ReactEditor} from 'slate-react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {toSlateRange} from '../../internal-utils/ranges'\nimport {\n  isListItemActive,\n  isStyleActive,\n  slateRangeToSelection,\n} from '../../internal-utils/slate-utils'\nimport {fromSlateValue, toSlateValue} from '../../internal-utils/values'\nimport {\n  KEY_TO_VALUE_ELEMENT,\n  SLATE_TO_PORTABLE_TEXT_RANGE,\n} from '../../internal-utils/weakMaps'\nimport {addAnnotationOperationImplementation} from '../../operations/behavior.operation.annotation.add'\nimport type {\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorSelection,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {getEditorSnapshot} from '../editor-selector'\n\nconst debug = debugWithName('API:editable')\n\nexport function createEditableAPI(\n  editor: PortableTextSlateEditor,\n  editorActor: EditorActor,\n) {\n  const types = editorActor.getSnapshot().context.schema\n\n  const editableApi: EditableAPI = {\n    focus: (): void => {\n      editorActor.send({\n        type: 'focus',\n        editor,\n      })\n    },\n    blur: (): void => {\n      editorActor.send({\n        type: 'blur',\n        editor,\n      })\n    },\n    toggleMark: (mark: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'decorator.toggle',\n          decorator: mark,\n        },\n        editor,\n      })\n    },\n    toggleList: (listItem: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'list item.toggle',\n          listItem,\n        },\n        editor,\n      })\n    },\n    toggleBlockStyle: (style: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'style.toggle',\n          style,\n        },\n        editor,\n      })\n    },\n    isMarkActive: (mark: string): boolean => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: editor,\n      })\n\n      return snapshot.beta.activeDecorators.includes(mark)\n    },\n    marks: (): string[] => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: editor,\n      })\n\n      return [\n        ...snapshot.beta.activeAnnotations,\n        ...snapshot.beta.activeDecorators,\n      ]\n    },\n    undo: (): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.undo',\n        },\n        editor,\n      })\n    },\n    redo: (): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.redo',\n        },\n        editor,\n      })\n    },\n    select: (selection: EditorSelection): void => {\n      const slateSelection = toSlateRange(selection, editor)\n      if (slateSelection) {\n        Transforms.select(editor, slateSelection)\n      } else {\n        Transforms.deselect(editor)\n      }\n      editor.onChange()\n    },\n    focusBlock: (): PortableTextBlock | undefined => {\n      if (editor.selection) {\n        const block = Node.descendant(\n          editor,\n          editor.selection.focus.path.slice(0, 1),\n        )\n        if (block) {\n          return fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0]\n        }\n      }\n      return undefined\n    },\n    focusChild: (): PortableTextChild | undefined => {\n      if (editor.selection) {\n        const block = Node.descendant(\n          editor,\n          editor.selection.focus.path.slice(0, 1),\n        )\n        if (block && editor.isTextBlock(block)) {\n          const ptBlock = fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0] as PortableTextTextBlock\n          return ptBlock.children[editor.selection.focus.path[1]]\n        }\n      }\n      return undefined\n    },\n    insertChild: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n      value?: {[prop: string]: any},\n    ): Path => {\n      if (type.name !== types.span.name) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'insert.inline object',\n            inlineObject: {\n              name: type.name,\n              value,\n            },\n          },\n          editor,\n        })\n\n        return editor.selection\n          ? (slateRangeToSelection({\n              schema: editorActor.getSnapshot().context.schema,\n              editor,\n              range: editor.selection,\n            })?.focus.path ?? [])\n          : []\n      }\n\n      if (!editor.selection) {\n        throw new Error('The editor has no selection')\n      }\n      const [focusBlock] = Array.from(\n        Editor.nodes(editor, {\n          at: editor.selection.focus.path.slice(0, 1),\n          match: (n) => n._type === types.block.name,\n        }),\n      )[0] || [undefined]\n      if (!focusBlock) {\n        throw new Error('No focused text block')\n      }\n      if (\n        type.name !== types.span.name &&\n        !types.inlineObjects.some((t) => t.name === type.name)\n      ) {\n        throw new Error(\n          'This type cannot be inserted as a child to a text block',\n        )\n      }\n      const block = toSlateValue(\n        [\n          {\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n            _type: types.block.name,\n            children: [\n              {\n                _key: editorActor.getSnapshot().context.keyGenerator(),\n                _type: type.name,\n                ...(value ? value : {}),\n              },\n            ],\n          },\n        ],\n        {schemaTypes: editorActor.getSnapshot().context.schema},\n      )[0] as unknown as SlateElement\n      const child = block.children[0]\n      const focusChildPath = editor.selection.focus.path.slice(0, 2)\n      const isSpanNode = child._type === types.span.name\n      const focusNode = Node.get(editor, focusChildPath)\n\n      // If we are inserting a span, and currently have focus on an inline object,\n      // move the selection to the next span (guaranteed by normalizing rules) before inserting it.\n      if (isSpanNode && focusNode._type !== types.span.name) {\n        debug(\n          'Inserting span child next to inline object child, moving selection + 1',\n        )\n        editor.move({distance: 1, unit: 'character'})\n      }\n\n      Transforms.insertNodes(editor, child, {\n        select: true,\n        at: editor.selection,\n      })\n      editor.onChange()\n\n      return editor.selection\n        ? (slateRangeToSelection({\n            schema: editorActor.getSnapshot().context.schema,\n            editor,\n            range: editor.selection,\n          })?.focus.path ?? [])\n        : []\n    },\n    insertBlock: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n      value?: {[prop: string]: any},\n    ): Path => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.block',\n          block: {\n            _type: type.name,\n            ...(value ? value : {}),\n          },\n          placement: 'auto',\n        },\n        editor,\n      })\n\n      return editor.selection\n        ? (slateRangeToSelection({\n            schema: editorActor.getSnapshot().context.schema,\n            editor,\n            range: editor.selection,\n          })?.focus.path ?? [])\n        : []\n    },\n    hasBlockStyle: (style: string): boolean => {\n      try {\n        return isStyleActive({editor, style})\n      } catch {\n        // This is fine.\n        return false\n      }\n    },\n    hasListStyle: (listItem: string): boolean => {\n      try {\n        return isListItemActive({editor, listItem})\n      } catch {\n        // This is fine.\n        return false\n      }\n    },\n    isVoid: (element: PortableTextBlock | PortableTextChild) => {\n      return ![types.block.name, types.span.name].includes(element._type)\n    },\n    findByPath: (\n      path: Path,\n    ): [\n      PortableTextBlock | PortableTextChild | undefined,\n      Path | undefined,\n    ] => {\n      const slatePath = toSlateRange(\n        {focus: {path, offset: 0}, anchor: {path, offset: 0}},\n        editor,\n      )\n      if (slatePath) {\n        const [block, blockPath] = Editor.node(\n          editor,\n          slatePath.focus.path.slice(0, 1),\n        )\n        if (block && blockPath && typeof block._key === 'string') {\n          if (path.length === 1 && slatePath.focus.path.length === 1) {\n            return [\n              fromSlateValue([block], types.block.name)[0],\n              [{_key: block._key}],\n            ]\n          }\n          const ptBlock = fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0]\n          if (editor.isTextBlock(ptBlock)) {\n            const ptChild = ptBlock.children[slatePath.focus.path[1]]\n            if (ptChild) {\n              return [\n                ptChild,\n                [{_key: block._key}, 'children', {_key: ptChild._key}],\n              ]\n            }\n          }\n        }\n      }\n      return [undefined, undefined]\n    },\n    findDOMNode: (\n      element: PortableTextBlock | PortableTextChild,\n    ): DOMNode | undefined => {\n      let node: DOMNode | undefined\n      try {\n        const [item] = Array.from(\n          Editor.nodes(editor, {\n            at: [],\n            match: (n) => n._key === element._key,\n          }) || [],\n        )[0] || [undefined]\n        node = ReactEditor.toDOMNode(editor, item)\n      } catch {\n        // Nothing\n      }\n      return node\n    },\n    activeAnnotations: (): PortableTextObject[] => {\n      if (!editor.selection || editor.selection.focus.path.length < 2) {\n        return []\n      }\n      try {\n        const activeAnnotations: PortableTextObject[] = []\n        const spans = Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) =>\n            Text.isText(node) &&\n            node.marks !== undefined &&\n            Array.isArray(node.marks) &&\n            node.marks.length > 0,\n        })\n        for (const [span, path] of spans) {\n          const [block] = Editor.node(editor, path, {depth: 1})\n          if (editor.isTextBlock(block)) {\n            block.markDefs?.forEach((def) => {\n              if (\n                Text.isText(span) &&\n                span.marks &&\n                Array.isArray(span.marks) &&\n                span.marks.includes(def._key)\n              ) {\n                activeAnnotations.push(def)\n              }\n            })\n          }\n        }\n        return activeAnnotations\n      } catch {\n        return []\n      }\n    },\n    isAnnotationActive: (\n      annotationType: PortableTextObject['_type'],\n    ): boolean => {\n      return isAnnotationActive({editor, annotation: {name: annotationType}})\n    },\n    addAnnotation: (type, value) => {\n      let paths: ReturnType<EditableAPI['addAnnotation']> = undefined\n\n      Editor.withoutNormalizing(editor, () => {\n        paths = addAnnotationOperationImplementation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: types,\n          },\n          operation: {\n            type: 'annotation.add',\n            annotation: {name: type.name, value: value ?? {}},\n            editor,\n          },\n        })\n      })\n      editor.onChange()\n\n      return paths\n    },\n    delete: (\n      selection: EditorSelection,\n      options?: EditableAPIDeleteOptions,\n    ): void => {\n      if (selection) {\n        const range = toSlateRange(selection, editor)\n        const hasRange =\n          range && range.anchor.path.length > 0 && range.focus.path.length > 0\n        if (!hasRange) {\n          throw new Error('Invalid range')\n        }\n        if (range) {\n          if (!options?.mode || options?.mode === 'selected') {\n            debug(`Deleting content in selection`)\n            Transforms.delete(editor, {\n              at: range,\n              hanging: true,\n              voids: true,\n            })\n            editor.onChange()\n            return\n          }\n          if (options?.mode === 'blocks') {\n            debug(`Deleting blocks touched by selection`)\n            Transforms.removeNodes(editor, {\n              at: range,\n              voids: true,\n              match: (node) => {\n                return (\n                  editor.isTextBlock(node) ||\n                  (!editor.isTextBlock(node) && SlateElement.isElement(node))\n                )\n              },\n            })\n          }\n          if (options?.mode === 'children') {\n            debug(`Deleting children touched by selection`)\n            Transforms.removeNodes(editor, {\n              at: range,\n              voids: true,\n              match: (node) => {\n                return (\n                  node._type === types.span.name || // Text children\n                  (!editor.isTextBlock(node) && SlateElement.isElement(node)) // inline blocks\n                )\n              },\n            })\n          }\n          // If the editor was emptied, insert a placeholder block\n          // directly into the editor's children. We don't want to do this\n          // through a Transform (because that would trigger a change event\n          // that would insert the placeholder into the actual value\n          // which should remain empty)\n          if (editor.children.length === 0) {\n            editor.children = [editor.pteCreateTextBlock({decorators: []})]\n          }\n          editor.onChange()\n        }\n      }\n    },\n    removeAnnotation: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n    ): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'annotation.remove',\n          annotation: {name: type.name},\n        },\n        editor,\n      })\n    },\n    getSelection: (): EditorSelection | null => {\n      let ptRange: EditorSelection = null\n      if (editor.selection) {\n        const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n        if (existing) {\n          return existing\n        }\n        ptRange = slateRangeToSelection({\n          schema: editorActor.getSnapshot().context.schema,\n          editor,\n          range: editor.selection,\n        })\n        SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n      }\n      return ptRange\n    },\n    getValue: () => {\n      return fromSlateValue(\n        editor.children,\n        types.block.name,\n        KEY_TO_VALUE_ELEMENT.get(editor),\n      )\n    },\n    isCollapsedSelection: () => {\n      return !!editor.selection && Range.isCollapsed(editor.selection)\n    },\n    isExpandedSelection: () => {\n      return !!editor.selection && Range.isExpanded(editor.selection)\n    },\n    insertBreak: () => {\n      editor.insertBreak()\n      editor.onChange()\n    },\n    getFragment: () => {\n      return fromSlateValue(editor.getFragment(), types.block.name)\n    },\n    isSelectionsOverlapping: (\n      selectionA: EditorSelection,\n      selectionB: EditorSelection,\n    ) => {\n      // Convert the selections to Slate ranges\n      const rangeA = toSlateRange(selectionA, editor)\n      const rangeB = toSlateRange(selectionB, editor)\n\n      // Make sure the ranges are valid\n      const isValidRanges = Range.isRange(rangeA) && Range.isRange(rangeB)\n\n      // Check if the ranges are overlapping\n      const isOverlapping = isValidRanges && Range.includes(rangeA, rangeB)\n\n      return isOverlapping\n    },\n  }\n\n  return editableApi\n}\n\nfunction isAnnotationActive({\n  editor,\n  annotation,\n}: {\n  editor: PortableTextSlateEditor\n  annotation: {\n    name: string\n  }\n}) {\n  if (!editor.selection || editor.selection.focus.path.length < 2) {\n    return false\n  }\n\n  try {\n    const spans = [\n      ...Editor.nodes(editor, {\n        at: editor.selection,\n        match: (node) => Text.isText(node),\n      }),\n    ]\n\n    if (spans.length === 0) {\n      return false\n    }\n\n    if (\n      spans.some(\n        ([span]) =>\n          !isPortableTextSpan(span) || !span.marks || span.marks?.length === 0,\n      )\n    )\n      return false\n\n    const selectionMarkDefs = spans.reduce((accMarkDefs, [, path]) => {\n      const [block] = Editor.node(editor, path, {depth: 1})\n      if (editor.isTextBlock(block) && block.markDefs) {\n        return [...accMarkDefs, ...block.markDefs]\n      }\n      return accMarkDefs\n    }, [] as PortableTextObject[])\n\n    return spans.every(([span]) => {\n      if (!isPortableTextSpan(span)) return false\n\n      const spanMarkDefs = span.marks?.map(\n        (markKey) =>\n          selectionMarkDefs.find((def) => def?._key === markKey)?._type,\n      )\n\n      return spanMarkDefs?.includes(annotation.name)\n    })\n  } catch {\n    return false\n  }\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport type {FocusEvent} from 'react'\nimport {emit, setup, type ActorRefFrom} from 'xstate'\nimport type {EditorSelection, InvalidValueResolution} from '../types/editor'\n\n/**\n * @public\n */\nexport type EditorEmittedEvent =\n  | {\n      type: 'blurred'\n      event: FocusEvent<HTMLDivElement, Element>\n    }\n  | {\n      /**\n       * @deprecated\n       */\n      type: 'done loading'\n    }\n  | {\n      type: 'editable'\n    }\n  | ErrorEvent\n  | {\n      type: 'focused'\n      event: FocusEvent<HTMLDivElement, Element>\n    }\n  | {\n      type: 'invalid value'\n      resolution: InvalidValueResolution | null\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      /**\n       * @deprecated\n       */\n      type: 'loading'\n    }\n  | MutationEvent\n  | PatchEvent\n  | {\n      type: 'read only'\n    }\n  | {\n      type: 'ready'\n    }\n  | {\n      type: 'selection'\n      selection: EditorSelection\n    }\n  | {\n      type: 'value changed'\n      value: Array<PortableTextBlock> | undefined\n    }\n\n/**\n * @deprecated The event is no longer emitted\n */\ntype ErrorEvent = {\n  type: 'error'\n  name: string\n  description: string\n  data: unknown\n}\n\nexport type InternalEditorEmittedEvent = EditorEmittedEvent | UnsetEvent\n\n/**\n * @public\n */\nexport type MutationEvent = {\n  type: 'mutation'\n  patches: Array<Patch>\n  /**\n   * @deprecated Use `value` instead\n   */\n  snapshot: Array<PortableTextBlock> | undefined\n  value: Array<PortableTextBlock> | undefined\n}\n\nexport type PatchEvent = {\n  type: 'patch'\n  patch: Patch\n}\n\nexport type UnsetEvent = {\n  /**\n   * @deprecated Use `'patch'` events instead\n   */\n  type: 'unset'\n  previousValue: Array<PortableTextBlock>\n}\n\nexport type RelayActor = ActorRefFrom<typeof relayMachine>\n\nexport const relayMachine = setup({\n  types: {\n    events: {} as InternalEditorEmittedEvent,\n    emitted: {} as InternalEditorEmittedEvent,\n  },\n}).createMachine({\n  id: 'relay',\n  on: {\n    '*': {\n      actions: emit(({event}) => event),\n    },\n  },\n})\n","import {insert, set, setIfMissing, unset} from '@portabletext/patches'\nimport type {\n  PortableTextBlock,\n  PortableTextSpan,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {flatten, isPlainObject, uniq} from 'lodash'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {InvalidValueResolution} from '../types/editor'\nimport {isTextBlock} from './parse-blocks'\n\nexport interface Validation {\n  valid: boolean\n  resolution: InvalidValueResolution | null\n  value: PortableTextBlock[] | undefined\n}\n\nexport function validateValue(\n  value: PortableTextBlock[] | undefined,\n  types: EditorSchema,\n  keyGenerator: () => string,\n): Validation {\n  let resolution: InvalidValueResolution | null = null\n  let valid = true\n  const validChildTypes = [\n    types.span.name,\n    ...types.inlineObjects.map((t) => t.name),\n  ]\n  const validBlockTypes = [\n    types.block.name,\n    ...types.blockObjects.map((t) => t.name),\n  ]\n\n  // Undefined is allowed\n  if (value === undefined) {\n    return {valid: true, resolution: null, value}\n  }\n  // Only lengthy arrays are allowed in the editor.\n  if (!Array.isArray(value) || value.length === 0) {\n    return {\n      valid: false,\n      resolution: {\n        patches: [unset([])],\n        description:\n          'Editor value must be an array of Portable Text blocks, or undefined.',\n        action: 'Unset the value',\n        item: value,\n\n        i18n: {\n          description:\n            'inputs.portable-text.invalid-value.not-an-array.description',\n          action: 'inputs.portable-text.invalid-value.not-an-array.action',\n        },\n      },\n      value,\n    }\n  }\n  if (\n    value.some((blk: PortableTextBlock, index: number): boolean => {\n      // Is the block an object?\n      if (!isPlainObject(blk)) {\n        resolution = {\n          patches: [unset([index])],\n          description: `Block must be an object, got ${String(blk)}`,\n          action: `Unset invalid item`,\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.not-an-object.description',\n            action: 'inputs.portable-text.invalid-value.not-an-object.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has a _key prop\n      if (!blk._key || typeof blk._key !== 'string') {\n        resolution = {\n          patches: [set({...blk, _key: keyGenerator()}, [index])],\n          description: `Block at index ${index} is missing required _key.`,\n          action: 'Set the block with a random _key value',\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.missing-key.description',\n            action: 'inputs.portable-text.invalid-value.missing-key.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has valid _type\n      if (!blk._type || !validBlockTypes.includes(blk._type)) {\n        // Special case where block type is set to default 'block', but the block type is named something else according to the schema.\n        if (blk._type === 'block') {\n          const currentBlockTypeName = types.block.name\n          resolution = {\n            patches: [\n              set({...blk, _type: currentBlockTypeName}, [{_key: blk._key}]),\n            ],\n            description: `Block with _key '${blk._key}' has invalid type name '${blk._type}'. According to the schema, the block type name is '${currentBlockTypeName}'`,\n            action: `Use type '${currentBlockTypeName}'`,\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.incorrect-block-type.description',\n              action:\n                'inputs.portable-text.invalid-value.incorrect-block-type.action',\n              values: {key: blk._key, expectedTypeName: currentBlockTypeName},\n            },\n          }\n          return true\n        }\n\n        // If the block has no `_type`, but aside from that is a valid Portable Text block\n        if (\n          !blk._type &&\n          isTextBlock({schema: types}, {...blk, _type: types.block.name})\n        ) {\n          resolution = {\n            patches: [\n              set({...blk, _type: types.block.name}, [{_key: blk._key}]),\n            ],\n            description: `Block with _key '${blk._key}' is missing a type name. According to the schema, the block type name is '${types.block.name}'`,\n            action: `Use type '${types.block.name}'`,\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-block-type.description',\n              action:\n                'inputs.portable-text.invalid-value.missing-block-type.action',\n              values: {key: blk._key, expectedTypeName: types.block.name},\n            },\n          }\n          return true\n        }\n\n        if (!blk._type) {\n          resolution = {\n            patches: [unset([{_key: blk._key}])],\n            description: `Block with _key '${blk._key}' is missing an _type property`,\n            action: 'Remove the block',\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-type.description',\n              action: 'inputs.portable-text.invalid-value.missing-type.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n\n        resolution = {\n          patches: [unset([{_key: blk._key}])],\n          description: `Block with _key '${blk._key}' has invalid _type '${blk._type}'`,\n          action: 'Remove the block',\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.disallowed-type.description',\n            action: 'inputs.portable-text.invalid-value.disallowed-type.action',\n            values: {key: blk._key, typeName: blk._type},\n          },\n        }\n        return true\n      }\n\n      // Test regular text blocks\n      if (blk._type === types.block.name) {\n        const textBlock = blk as PortableTextTextBlock\n        // Test that it has a valid children property (array)\n        if (textBlock.children && !Array.isArray(textBlock.children)) {\n          resolution = {\n            patches: [set({children: []}, [{_key: textBlock._key}])],\n            description: `Text block with _key '${textBlock._key}' has a invalid required property 'children'.`,\n            action: 'Reset the children property',\n            item: textBlock,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-or-invalid-children.description',\n              action:\n                'inputs.portable-text.invalid-value.missing-or-invalid-children.action',\n              values: {key: textBlock._key},\n            },\n          }\n          return true\n        }\n        // Test that children is set and lengthy\n        if (\n          textBlock.children === undefined ||\n          (Array.isArray(textBlock.children) && textBlock.children.length === 0)\n        ) {\n          const newSpan = {\n            _type: types.span.name,\n            _key: keyGenerator(),\n            text: '',\n            marks: [],\n          }\n          resolution = {\n            autoResolve: true,\n            patches: [\n              setIfMissing([], [{_key: blk._key}, 'children']),\n              insert([newSpan], 'after', [{_key: blk._key}, 'children', 0]),\n            ],\n            description: `Children for text block with _key '${blk._key}' is empty.`,\n            action: 'Insert an empty text',\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.empty-children.description',\n              action:\n                'inputs.portable-text.invalid-value.empty-children.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n\n        const allUsedMarks = uniq(\n          flatten(\n            textBlock.children\n              .filter((cld) => cld._type === types.span.name)\n              .map((cld) => cld.marks || []),\n          ) as string[],\n        )\n\n        // Test that all markDefs are in use (remove orphaned markDefs)\n        if (Array.isArray(blk.markDefs) && blk.markDefs.length > 0) {\n          const unusedMarkDefs: string[] = uniq(\n            blk.markDefs\n              .map((def) => def._key)\n              .filter((key) => !allUsedMarks.includes(key)),\n          )\n          if (unusedMarkDefs.length > 0) {\n            resolution = {\n              autoResolve: true,\n              patches: unusedMarkDefs.map((markDefKey) =>\n                unset([{_key: blk._key}, 'markDefs', {_key: markDefKey}]),\n              ),\n              description: `Block contains orphaned data (unused mark definitions): ${unusedMarkDefs.join(\n                ', ',\n              )}.`,\n              action: 'Remove unused mark definition item',\n              item: blk,\n              i18n: {\n                description:\n                  'inputs.portable-text.invalid-value.orphaned-mark-defs.description',\n                action:\n                  'inputs.portable-text.invalid-value.orphaned-mark-defs.action',\n                values: {\n                  key: blk._key,\n                  unusedMarkDefs: unusedMarkDefs.map((m) => m.toString()),\n                },\n              },\n            }\n            return true\n          }\n        }\n\n        // Test that every annotation mark used has a definition\n        const annotationMarks = allUsedMarks.filter(\n          (mark) => !types.decorators.map((dec) => dec.name).includes(mark),\n        )\n        const orphanedMarks = annotationMarks.filter(\n          (mark) =>\n            textBlock.markDefs === undefined ||\n            !textBlock.markDefs.find((def) => def._key === mark),\n        )\n        if (orphanedMarks.length > 0) {\n          const spanChildren = textBlock.children.filter(\n            (cld) =>\n              cld._type === types.span.name &&\n              Array.isArray(cld.marks) &&\n              cld.marks.some((mark) => orphanedMarks.includes(mark)),\n          ) as PortableTextSpan[]\n          if (spanChildren) {\n            const orphaned = orphanedMarks.join(', ')\n            resolution = {\n              autoResolve: true,\n              patches: spanChildren.map((child) => {\n                return set(\n                  (child.marks || []).filter(\n                    (cMrk) => !orphanedMarks.includes(cMrk),\n                  ),\n                  [{_key: blk._key}, 'children', {_key: child._key}, 'marks'],\n                )\n              }),\n              description: `Block with _key '${blk._key}' contains marks (${orphaned}) not supported by the current content model.`,\n              action: 'Remove invalid marks',\n              item: blk,\n\n              i18n: {\n                description:\n                  'inputs.portable-text.invalid-value.orphaned-marks.description',\n                action:\n                  'inputs.portable-text.invalid-value.orphaned-marks.action',\n                values: {\n                  key: blk._key,\n                  orphanedMarks: orphanedMarks.map((m) => m.toString()),\n                },\n              },\n            }\n            return true\n          }\n        }\n\n        // Test every child\n        if (\n          textBlock.children.some((child, cIndex: number) => {\n            if (!isPlainObject(child)) {\n              resolution = {\n                patches: [unset([{_key: blk._key}, 'children', cIndex])],\n                description: `Child at index '${cIndex}' in block with key '${blk._key}' is not an object.`,\n                action: 'Remove the item',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.non-object-child.description',\n                  action:\n                    'inputs.portable-text.invalid-value.non-object-child.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n\n            if (!child._key || typeof child._key !== 'string') {\n              const newChild = {...child, _key: keyGenerator()}\n              resolution = {\n                autoResolve: true,\n                patches: [\n                  set(newChild, [{_key: blk._key}, 'children', cIndex]),\n                ],\n                description: `Child at index ${cIndex} is missing required _key in block with _key ${blk._key}.`,\n                action: 'Set a new random _key on the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.missing-child-key.description',\n                  action:\n                    'inputs.portable-text.invalid-value.missing-child-key.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n\n            // Verify that children have valid types\n            if (!child._type) {\n              resolution = {\n                patches: [\n                  unset([{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' is missing '_type' property.`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.missing-child-type.description',\n                  action:\n                    'inputs.portable-text.invalid-value.missing-child-type.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n\n            if (!validChildTypes.includes(child._type)) {\n              resolution = {\n                patches: [\n                  unset([{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has invalid '_type' property (${child._type}).`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.disallowed-child-type.description',\n                  action:\n                    'inputs.portable-text.invalid-value.disallowed-child-type.action',\n                  values: {\n                    key: blk._key,\n                    childKey: child._key,\n                    childType: child._type,\n                  },\n                },\n              }\n              return true\n            }\n\n            // Verify that spans have .text property that is a string\n            if (\n              child._type === types.span.name &&\n              typeof child.text !== 'string'\n            ) {\n              resolution = {\n                patches: [\n                  set({...child, text: ''}, [\n                    {_key: blk._key},\n                    'children',\n                    {_key: child._key},\n                  ]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has missing or invalid text property!`,\n                action: `Write an empty text property to the object`,\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.invalid-span-text.description',\n                  action:\n                    'inputs.portable-text.invalid-value.invalid-span-text.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n            return false\n          })\n        ) {\n          valid = false\n        }\n      }\n      return false\n    })\n  ) {\n    valid = false\n  }\n  return {valid, resolution, value}\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {Editor, Text, Transforms, type Descendant, type Node} from 'slate'\nimport {\n  and,\n  assertEvent,\n  assign,\n  emit,\n  fromCallback,\n  not,\n  raise,\n  setup,\n  type AnyEventObject,\n  type CallbackLogicFunction,\n} from 'xstate'\nimport type {ActorRefFrom} from 'xstate'\nimport {debugWithName} from '../internal-utils/debug'\nimport {validateValue} from '../internal-utils/validateValue'\nimport {toSlateValue, VOID_CHILD_KEY} from '../internal-utils/values'\nimport {\n  isChangingRemotely,\n  withRemoteChanges,\n} from '../internal-utils/withChanges'\nimport {withoutPatching} from '../internal-utils/withoutPatching'\nimport type {PickFromUnion} from '../type-utils'\nimport type {\n  InvalidValueResolution,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\nimport {withoutSaving} from './plugins/createWithUndoRedo'\n\nconst debug = debugWithName('sync machine')\n\ntype SyncValueEvent =\n  | {\n      type: 'patch'\n      patch: Patch\n    }\n  | {\n      type: 'invalid value'\n      resolution: InvalidValueResolution | null\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'value changed'\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'done syncing'\n      value: Array<PortableTextBlock> | undefined\n    }\n\nconst syncValueCallback: CallbackLogicFunction<\n  AnyEventObject,\n  SyncValueEvent,\n  {\n    context: {\n      keyGenerator: () => string\n      previousValue: Array<PortableTextBlock> | undefined\n      readOnly: boolean\n      schema: EditorSchema\n    }\n    slateEditor: PortableTextSlateEditor\n    streamBlocks: boolean\n    value: Array<PortableTextBlock> | undefined\n  }\n> = ({sendBack, input}) => {\n  updateValue({\n    context: input.context,\n    sendBack,\n    slateEditor: input.slateEditor,\n    value: input.value,\n    streamBlocks: input.streamBlocks,\n  })\n}\n\nconst syncValueLogic = fromCallback(syncValueCallback)\n\nexport type SyncActor = ActorRefFrom<typeof syncMachine>\n\n/**\n * Sync value with the editor state\n *\n * Normally nothing here should apply, and the editor and the real world are perfectly aligned.\n *\n * Inconsistencies could happen though, so we need to check the editor state when the value changes.\n *\n * For performance reasons, it makes sense to also do the content validation here, as we already\n * iterate over the value and can validate only the new content that is actually changed.\n *\n * @internal\n */\nexport const syncMachine = setup({\n  types: {\n    context: {} as {\n      initialValue: Array<PortableTextBlock> | undefined\n      initialValueSynced: boolean\n      isProcessingLocalChanges: boolean\n      keyGenerator: () => string\n      schema: EditorSchema\n      readOnly: boolean\n      slateEditor: PortableTextSlateEditor\n      pendingValue: Array<PortableTextBlock> | undefined\n      previousValue: Array<PortableTextBlock> | undefined\n    },\n    input: {} as {\n      initialValue: Array<PortableTextBlock> | undefined\n      keyGenerator: () => string\n      schema: EditorSchema\n      readOnly: boolean\n      slateEditor: PortableTextSlateEditor\n    },\n    events: {} as\n      | {\n          type: 'has pending mutations'\n        }\n      | {\n          type: 'mutation'\n        }\n      | {\n          type: 'update value'\n          value: Array<PortableTextBlock> | undefined\n        }\n      | {\n          type: 'update readOnly'\n          readOnly: boolean\n        }\n      | SyncValueEvent,\n    emitted: {} as\n      | PickFromUnion<\n          SyncValueEvent,\n          'type',\n          'invalid value' | 'patch' | 'value changed'\n        >\n      | {type: 'done syncing value'}\n      | {type: 'syncing value'},\n  },\n  actions: {\n    'assign initial value synced': assign({\n      initialValueSynced: true,\n    }),\n    'assign readOnly': assign({\n      readOnly: ({event}) => {\n        assertEvent(event, 'update readOnly')\n        return event.readOnly\n      },\n    }),\n    'assign pending value': assign({\n      pendingValue: ({event}) => {\n        assertEvent(event, 'update value')\n        return event.value\n      },\n    }),\n    'clear pending value': assign({\n      pendingValue: undefined,\n    }),\n    'assign previous value': assign({\n      previousValue: ({event}) => {\n        assertEvent(event, 'done syncing')\n        return event.value\n      },\n    }),\n    'emit done syncing value': emit({\n      type: 'done syncing value',\n    }),\n    'emit syncing value': emit({\n      type: 'syncing value',\n    }),\n  },\n  guards: {\n    'initial value synced': ({context}) => context.initialValueSynced,\n    'is busy': ({context}) => {\n      const editable = !context.readOnly\n      const isProcessingLocalChanges = context.isProcessingLocalChanges\n      const isChanging = isChangingRemotely(context.slateEditor) ?? false\n      const isBusy = editable && (isProcessingLocalChanges || isChanging)\n\n      debug('isBusy', {isBusy, editable, isProcessingLocalChanges, isChanging})\n\n      return isBusy\n    },\n    'is empty value': ({event}) => {\n      return event.type === 'update value' && event.value === undefined\n    },\n    'is empty array': ({event}) => {\n      return (\n        event.type === 'update value' &&\n        Array.isArray(event.value) &&\n        event.value.length === 0\n      )\n    },\n    'is new value': ({context, event}) => {\n      return (\n        event.type === 'update value' && context.previousValue !== event.value\n      )\n    },\n    'value changed while syncing': ({context, event}) => {\n      assertEvent(event, 'done syncing')\n      return context.pendingValue !== event.value\n    },\n    'pending value equals previous value': ({context}) => {\n      return isEqual(context.pendingValue, context.previousValue)\n    },\n  },\n  actors: {\n    'sync value': syncValueLogic,\n  },\n}).createMachine({\n  id: 'sync',\n  context: ({input}) => ({\n    initialValue: input.initialValue,\n    initialValueSynced: false,\n    isProcessingLocalChanges: false,\n    keyGenerator: input.keyGenerator,\n    schema: input.schema,\n    readOnly: input.readOnly,\n    slateEditor: input.slateEditor,\n    pendingValue: undefined,\n    previousValue: undefined,\n  }),\n  entry: [\n    raise(({context}) => {\n      return {type: 'update value', value: context.initialValue}\n    }),\n  ],\n  on: {\n    'has pending mutations': {\n      actions: assign({\n        isProcessingLocalChanges: true,\n      }),\n    },\n    'mutation': {\n      actions: assign({\n        isProcessingLocalChanges: false,\n      }),\n    },\n    'update readOnly': {\n      actions: ['assign readOnly'],\n    },\n  },\n  initial: 'idle',\n  states: {\n    idle: {\n      entry: [\n        () => {\n          debug('entry: syncing->idle')\n        },\n      ],\n      exit: [\n        () => {\n          debug('exit: syncing->idle')\n        },\n      ],\n      on: {\n        'update value': [\n          {\n            guard: and(['is empty value', not('initial value synced')]),\n            actions: ['assign initial value synced', 'emit done syncing value'],\n          },\n          {\n            guard: and(['is empty array', not('initial value synced')]),\n            actions: [\n              'assign initial value synced',\n              emit({type: 'value changed', value: []}),\n              'emit done syncing value',\n            ],\n          },\n          {\n            guard: and(['is busy', 'is new value']),\n            target: 'busy',\n            actions: ['assign pending value'],\n          },\n          {\n            guard: 'is new value',\n            target: 'syncing',\n            actions: ['assign pending value'],\n          },\n          {\n            guard: not('initial value synced'),\n            actions: [\n              () => {\n                debug('no new value – setting initial value as synced')\n              },\n              'assign initial value synced',\n              'emit done syncing value',\n            ],\n          },\n          {\n            actions: [\n              () => {\n                debug('no new value and initial value already synced')\n              },\n            ],\n          },\n        ],\n      },\n    },\n    busy: {\n      entry: [\n        () => {\n          debug('entry: syncing->busy')\n        },\n      ],\n      exit: [\n        () => {\n          debug('exit: syncing->busy')\n        },\n      ],\n      after: {\n        1000: [\n          {\n            guard: 'is busy',\n            target: '.',\n            reenter: true,\n            actions: [\n              () => {\n                debug('reenter: syncing->busy')\n              },\n            ],\n          },\n          {\n            target: 'syncing',\n          },\n        ],\n      },\n      on: {\n        'update value': [\n          {\n            guard: 'is new value',\n            actions: ['assign pending value'],\n          },\n        ],\n      },\n    },\n    syncing: {\n      entry: [\n        () => {\n          debug('entry: syncing->syncing')\n        },\n        'emit syncing value',\n      ],\n      exit: [\n        () => {\n          debug('exit: syncing->syncing')\n        },\n        'emit done syncing value',\n      ],\n      invoke: {\n        src: 'sync value',\n        id: 'sync value',\n        input: ({context}) => {\n          return {\n            context: {\n              keyGenerator: context.keyGenerator,\n              previousValue: context.previousValue,\n              readOnly: context.readOnly,\n              schema: context.schema,\n            },\n            slateEditor: context.slateEditor,\n            streamBlocks: !context.initialValueSynced,\n            value: context.pendingValue,\n          }\n        },\n      },\n      on: {\n        'update value': {\n          guard: 'is new value',\n          actions: ['assign pending value'],\n        },\n        'patch': {\n          actions: [emit(({event}) => event)],\n        },\n        'invalid value': {\n          actions: [emit(({event}) => event)],\n        },\n        'value changed': {\n          actions: [emit(({event}) => event)],\n        },\n        'done syncing': [\n          {\n            guard: 'value changed while syncing',\n            actions: ['assign previous value', 'assign initial value synced'],\n            target: 'syncing',\n            reenter: true,\n          },\n          {\n            target: 'idle',\n            actions: [\n              'clear pending value',\n              'assign previous value',\n              'assign initial value synced',\n            ],\n          },\n        ],\n      },\n    },\n  },\n})\n\nasync function updateValue({\n  context,\n  sendBack,\n  slateEditor,\n  streamBlocks,\n  value,\n}: {\n  context: {\n    keyGenerator: () => string\n    previousValue: Array<PortableTextBlock> | undefined\n    readOnly: boolean\n    schema: EditorSchema\n  }\n  sendBack: (event: SyncValueEvent) => void\n  slateEditor: PortableTextSlateEditor\n  streamBlocks: boolean\n  value: PortableTextBlock[] | undefined\n}) {\n  let doneSyncing = false\n  let isChanged = false\n  let isValid = true\n\n  const hadSelection = !!slateEditor.selection\n\n  // If empty value, remove everything in the editor and insert a placeholder block\n  if (!value || value.length === 0) {\n    debug('Value is empty')\n    Editor.withoutNormalizing(slateEditor, () => {\n      withoutSaving(slateEditor, () => {\n        withoutPatching(slateEditor, () => {\n          if (doneSyncing) {\n            return\n          }\n\n          if (hadSelection) {\n            Transforms.deselect(slateEditor)\n          }\n          const childrenLength = slateEditor.children.length\n          slateEditor.children.forEach((_, index) => {\n            Transforms.removeNodes(slateEditor, {\n              at: [childrenLength - 1 - index],\n            })\n          })\n          Transforms.insertNodes(\n            slateEditor,\n            slateEditor.pteCreateTextBlock({decorators: []}),\n            {at: [0]},\n          )\n          // Add a new selection in the top of the document\n          if (hadSelection) {\n            Transforms.select(slateEditor, [0, 0])\n          }\n        })\n      })\n    })\n    isChanged = true\n  }\n  // Remove, replace or add nodes according to what is changed.\n  if (value && value.length > 0) {\n    const slateValueFromProps = toSlateValue(value, {\n      schemaTypes: context.schema,\n    })\n\n    if (streamBlocks) {\n      await new Promise<void>((resolve) => {\n        Editor.withoutNormalizing(slateEditor, () => {\n          withRemoteChanges(slateEditor, () => {\n            withoutPatching(slateEditor, () => {\n              if (doneSyncing) {\n                resolve()\n                return\n              }\n\n              isChanged = removeExtraBlocks({\n                slateEditor,\n                slateValueFromProps,\n              })\n\n              const processBlocks = async () => {\n                for await (const [\n                  currentBlock,\n                  currentBlockIndex,\n                ] of getStreamedBlocks({\n                  slateValue: slateValueFromProps,\n                })) {\n                  const {blockChanged, blockValid} = syncBlock({\n                    context,\n                    sendBack,\n                    block: currentBlock,\n                    index: currentBlockIndex,\n                    slateEditor,\n                    value,\n                  })\n\n                  isChanged = blockChanged || isChanged\n                  isValid = isValid && blockValid\n                }\n\n                resolve()\n              }\n\n              processBlocks()\n            })\n          })\n        })\n      })\n    } else {\n      Editor.withoutNormalizing(slateEditor, () => {\n        withRemoteChanges(slateEditor, () => {\n          withoutPatching(slateEditor, () => {\n            if (doneSyncing) {\n              return\n            }\n\n            isChanged = removeExtraBlocks({\n              slateEditor,\n              slateValueFromProps,\n            })\n\n            let index = 0\n\n            for (const currentBlock of slateValueFromProps) {\n              const {blockChanged, blockValid} = syncBlock({\n                context,\n                sendBack,\n                block: currentBlock,\n                index,\n                slateEditor,\n                value,\n              })\n\n              isChanged = blockChanged || isChanged\n              isValid = isValid && blockValid\n              index++\n            }\n          })\n        })\n      })\n    }\n  }\n\n  if (!isValid) {\n    debug('Invalid value, returning')\n    doneSyncing = true\n    sendBack({type: 'done syncing', value})\n    return\n  }\n\n  if (isChanged) {\n    debug('Server value changed, syncing editor')\n    try {\n      slateEditor.onChange()\n    } catch (err) {\n      console.error(err)\n      sendBack({\n        type: 'invalid value',\n        resolution: null,\n        value,\n      })\n      doneSyncing = true\n      sendBack({type: 'done syncing', value})\n      return\n    }\n    if (hadSelection && !slateEditor.selection) {\n      Transforms.select(slateEditor, {\n        anchor: {path: [0, 0], offset: 0},\n        focus: {path: [0, 0], offset: 0},\n      })\n      slateEditor.onChange()\n    }\n    sendBack({type: 'value changed', value})\n  } else {\n    debug('Server value and editor value is equal, no need to sync.')\n  }\n\n  doneSyncing = true\n  sendBack({type: 'done syncing', value})\n}\n\nfunction removeExtraBlocks({\n  slateEditor,\n  slateValueFromProps,\n}: {\n  slateEditor: PortableTextSlateEditor\n  slateValueFromProps: Array<Descendant>\n}) {\n  let isChanged = false\n  const childrenLength = slateEditor.children.length\n\n  // Remove blocks that have become superfluous\n  if (slateValueFromProps.length < childrenLength) {\n    for (let i = childrenLength - 1; i > slateValueFromProps.length - 1; i--) {\n      Transforms.removeNodes(slateEditor, {\n        at: [i],\n      })\n    }\n    isChanged = true\n  }\n  return isChanged\n}\n\nasync function* getStreamedBlocks({\n  slateValue,\n}: {\n  slateValue: Array<Descendant>\n}) {\n  let index = 0\n  for await (const block of slateValue) {\n    if (index % 10 === 0) {\n      await new Promise<void>((resolve) => setTimeout(resolve, 0))\n    }\n    yield [block, index] as const\n    index++\n  }\n}\n\nfunction syncBlock({\n  context,\n  sendBack,\n  block,\n  index,\n  slateEditor,\n  value,\n}: {\n  context: {\n    keyGenerator: () => string\n    previousValue: Array<PortableTextBlock> | undefined\n    readOnly: boolean\n    schema: EditorSchema\n  }\n  sendBack: (event: SyncValueEvent) => void\n  block: Descendant\n  index: number\n  slateEditor: PortableTextSlateEditor\n  value: Array<PortableTextBlock>\n}) {\n  let blockChanged = false\n  let blockValid = true\n  const currentBlock = block\n  const currentBlockIndex = index\n  const oldBlock = slateEditor.children[currentBlockIndex]\n  const hasChanges = oldBlock && !isEqual(currentBlock, oldBlock)\n\n  Editor.withoutNormalizing(slateEditor, () => {\n    withRemoteChanges(slateEditor, () => {\n      withoutPatching(slateEditor, () => {\n        if (hasChanges && blockValid) {\n          const validationValue = [value[currentBlockIndex]]\n          const validation = validateValue(\n            validationValue,\n            context.schema,\n            context.keyGenerator,\n          )\n          // Resolve validations that can be resolved automatically, without involving the user (but only if the value was changed)\n          if (\n            !validation.valid &&\n            validation.resolution?.autoResolve &&\n            validation.resolution?.patches.length > 0\n          ) {\n            // Only apply auto resolution if the value has been populated before and is different from the last one.\n            if (\n              !context.readOnly &&\n              context.previousValue &&\n              context.previousValue !== value\n            ) {\n              // Give a console warning about the fact that it did an auto resolution\n              console.warn(\n                `${validation.resolution.action} for block with _key '${validationValue[0]._key}'. ${validation.resolution?.description}`,\n              )\n              validation.resolution.patches.forEach((patch) => {\n                sendBack({type: 'patch', patch})\n              })\n            }\n          }\n          if (validation.valid || validation.resolution?.autoResolve) {\n            if (oldBlock._key === currentBlock._key) {\n              if (debug.enabled) debug('Updating block', oldBlock, currentBlock)\n              _updateBlock(\n                slateEditor,\n                currentBlock,\n                oldBlock,\n                currentBlockIndex,\n              )\n            } else {\n              if (debug.enabled)\n                debug('Replacing block', oldBlock, currentBlock)\n              _replaceBlock(slateEditor, currentBlock, currentBlockIndex)\n            }\n            blockChanged = true\n          } else {\n            sendBack({\n              type: 'invalid value',\n              resolution: validation.resolution,\n              value,\n            })\n            blockValid = false\n          }\n        }\n\n        if (!oldBlock && blockValid) {\n          const validationValue = [value[currentBlockIndex]]\n          const validation = validateValue(\n            validationValue,\n            context.schema,\n            context.keyGenerator,\n          )\n          if (debug.enabled)\n            debug(\n              'Validating and inserting new block in the end of the value',\n              currentBlock,\n            )\n          if (validation.valid || validation.resolution?.autoResolve) {\n            Transforms.insertNodes(slateEditor, currentBlock, {\n              at: [currentBlockIndex],\n            })\n          } else {\n            debug('Invalid', validation)\n            sendBack({\n              type: 'invalid value',\n              resolution: validation.resolution,\n              value,\n            })\n            blockValid = false\n          }\n        }\n      })\n    })\n  })\n\n  return {blockChanged, blockValid}\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _replaceBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // While replacing the block and the current selection focus is on the replaced block,\n  // temporarily deselect the editor then optimistically try to restore the selection afterwards.\n  const currentSelection = slateEditor.selection\n  const selectionFocusOnBlock =\n    currentSelection && currentSelection.focus.path[0] === currentBlockIndex\n  if (selectionFocusOnBlock) {\n    Transforms.deselect(slateEditor)\n  }\n  Transforms.removeNodes(slateEditor, {at: [currentBlockIndex]})\n  Transforms.insertNodes(slateEditor, currentBlock, {at: [currentBlockIndex]})\n  slateEditor.onChange()\n  if (selectionFocusOnBlock) {\n    Transforms.select(slateEditor, currentSelection)\n  }\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _updateBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  oldBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // Update the root props on the block\n  Transforms.setNodes(slateEditor, currentBlock as Partial<Node>, {\n    at: [currentBlockIndex],\n  })\n  // Text block's need to have their children updated as well (setNode does not target a node's children)\n  if (\n    slateEditor.isTextBlock(currentBlock) &&\n    slateEditor.isTextBlock(oldBlock)\n  ) {\n    const oldBlockChildrenLength = oldBlock.children.length\n    if (currentBlock.children.length < oldBlockChildrenLength) {\n      // Remove any children that have become superfluous\n      Array.from(\n        Array(oldBlockChildrenLength - currentBlock.children.length),\n      ).forEach((_, index) => {\n        const childIndex = oldBlockChildrenLength - 1 - index\n        if (childIndex > 0) {\n          debug('Removing child')\n          Transforms.removeNodes(slateEditor, {\n            at: [currentBlockIndex, childIndex],\n          })\n        }\n      })\n    }\n    currentBlock.children.forEach(\n      (currentBlockChild, currentBlockChildIndex) => {\n        const oldBlockChild = oldBlock.children[currentBlockChildIndex]\n        const isChildChanged = !isEqual(currentBlockChild, oldBlockChild)\n        const isTextChanged = !isEqual(\n          currentBlockChild.text,\n          oldBlockChild?.text,\n        )\n        const path = [currentBlockIndex, currentBlockChildIndex]\n        if (isChildChanged) {\n          // Update if this is the same child\n          if (currentBlockChild._key === oldBlockChild?._key) {\n            debug('Updating changed child', currentBlockChild, oldBlockChild)\n            Transforms.setNodes(\n              slateEditor,\n              currentBlockChild as Partial<Node>,\n              {\n                at: path,\n              },\n            )\n            const isSpanNode =\n              Text.isText(currentBlockChild) &&\n              currentBlockChild._type === 'span' &&\n              Text.isText(oldBlockChild) &&\n              oldBlockChild._type === 'span'\n            if (isSpanNode && isTextChanged) {\n              if (oldBlockChild.text.length > 0) {\n                Transforms.delete(slateEditor, {\n                  at: {\n                    focus: {path, offset: 0},\n                    anchor: {path, offset: oldBlockChild.text.length},\n                  },\n                })\n              }\n              Transforms.insertText(slateEditor, currentBlockChild.text, {\n                at: path,\n              })\n              slateEditor.onChange()\n            } else if (!isSpanNode) {\n              // If it's a inline block, also update the void text node key\n              debug('Updating changed inline object child', currentBlockChild)\n              Transforms.setNodes(\n                slateEditor,\n                {_key: VOID_CHILD_KEY},\n                {\n                  at: [...path, 0],\n                  voids: true,\n                },\n              )\n            }\n            // Replace the child if _key's are different\n          } else if (oldBlockChild) {\n            debug('Replacing child', currentBlockChild)\n            Transforms.removeNodes(slateEditor, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            slateEditor.onChange()\n            // Insert it if it didn't exist before\n          } else if (!oldBlockChild) {\n            debug('Inserting new child', currentBlockChild)\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            slateEditor.onChange()\n          }\n        }\n      },\n    )\n  }\n}\n","import {createActor} from 'xstate'\nimport {createCoreConverters} from '../converters/converters.core'\nimport type {Editor, EditorConfig} from '../editor'\nimport {debugWithName} from '../internal-utils/debug'\nimport {compileType} from '../internal-utils/schema'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport {corePriority} from '../priority/priority.core'\nimport {createEditorPriority} from '../priority/priority.types'\nimport type {EditableAPI, PortableTextSlateEditor} from '../types/editor'\nimport {createSlateEditor, type SlateEditor} from './create-slate-editor'\nimport type {EditorActor} from './editor-machine'\nimport {editorMachine} from './editor-machine'\nimport {\n  compileSchemaDefinitionToLegacySchema,\n  legacySchemaToEditorSchema,\n} from './editor-schema'\nimport {getEditorSnapshot} from './editor-selector'\nimport {defaultKeyGenerator} from './key-generator'\nimport {createLegacySchema} from './legacy-schema'\nimport {mutationMachine, type MutationActor} from './mutation-machine'\nimport {createEditableAPI} from './plugins/createWithEditableAPI'\nimport {relayMachine, type RelayActor} from './relay-machine'\nimport {syncMachine, type SyncActor} from './sync-machine'\n\nconst debug = debugWithName('setup')\n\nexport type InternalEditor = Editor & {\n  _internal: {\n    editable: EditableAPI\n    editorActor: EditorActor\n    slateEditor: SlateEditor\n  }\n}\n\nexport function createInternalEditor(config: EditorConfig): {\n  actors: {\n    editorActor: EditorActor\n    mutationActor: MutationActor\n    relayActor: RelayActor\n    syncActor: SyncActor\n  }\n  editor: InternalEditor\n  subscriptions: Array<() => () => void>\n} {\n  debug('Creating new Editor instance')\n\n  const subscriptions: Array<() => () => void> = []\n  const editorActor = createActor(editorMachine, {\n    input: editorConfigToMachineInput(config),\n  })\n  const relayActor = createActor(relayMachine)\n  const slateEditor = createSlateEditor({\n    editorActor,\n    relayActor,\n    subscriptions,\n  })\n  const editable = createEditableAPI(slateEditor.instance, editorActor)\n  const {mutationActor, syncActor} = createActors({\n    editorActor,\n    relayActor,\n    slateEditor: slateEditor.instance,\n    subscriptions,\n  })\n\n  const editor = {\n    getSnapshot: () =>\n      getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: slateEditor.instance,\n      }),\n    registerBehavior: (behaviorConfig) => {\n      const priority = createEditorPriority({\n        name: 'custom',\n        reference: {\n          priority: corePriority,\n          importance: 'higher',\n        },\n      })\n      const behaviorConfigWithPriority = {\n        ...behaviorConfig,\n        priority,\n      }\n\n      editorActor.send({\n        type: 'add behavior',\n        behaviorConfig: behaviorConfigWithPriority,\n      })\n\n      return () => {\n        editorActor.send({\n          type: 'remove behavior',\n          behaviorConfig: behaviorConfigWithPriority,\n        })\n      }\n    },\n    send: (event) => {\n      switch (event.type) {\n        case 'update value':\n          syncActor.send(event)\n          break\n\n        case 'update readOnly':\n        case 'patches':\n        case 'update maxBlocks':\n          editorActor.send(event)\n          break\n\n        case 'blur':\n          editorActor.send({\n            type: 'blur',\n            editor: slateEditor.instance,\n          })\n          break\n\n        case 'focus':\n          editorActor.send({\n            type: 'focus',\n            editor: slateEditor.instance,\n          })\n          break\n\n        case 'insert.block object':\n          editorActor.send({\n            type: 'behavior event',\n            behaviorEvent: {\n              type: 'insert.block',\n              block: {\n                _type: event.blockObject.name,\n                ...(event.blockObject.value ?? {}),\n              },\n              placement: event.placement,\n            },\n            editor: slateEditor.instance,\n          })\n          break\n\n        default:\n          editorActor.send({\n            type: 'behavior event',\n            behaviorEvent: event,\n            editor: slateEditor.instance,\n          })\n      }\n    },\n    on: (event, listener) => {\n      const subscription = relayActor.on(event, (event) => {\n        switch (event.type) {\n          case 'blurred':\n          case 'done loading':\n          case 'editable':\n          case 'focused':\n          case 'invalid value':\n          case 'loading':\n          case 'mutation':\n          case 'patch':\n          case 'read only':\n          case 'ready':\n          case 'selection':\n          case 'value changed':\n            listener(event)\n            break\n        }\n      })\n\n      return subscription\n    },\n    _internal: {\n      editable,\n      editorActor,\n      slateEditor,\n    },\n  } satisfies InternalEditor\n\n  return {\n    actors: {\n      editorActor,\n      mutationActor,\n      relayActor,\n      syncActor,\n    },\n    editor,\n    subscriptions,\n  }\n}\n\nfunction editorConfigToMachineInput(config: EditorConfig) {\n  const {legacySchema, schema} = compileSchemasFromEditorConfig(config)\n\n  return {\n    converters: createCoreConverters(legacySchema),\n    getLegacySchema: () => legacySchema,\n    keyGenerator: config.keyGenerator ?? defaultKeyGenerator,\n    maxBlocks: config.maxBlocks,\n    readOnly: config.readOnly,\n    schema,\n    initialValue: config.initialValue,\n  } as const\n}\n\nfunction compileSchemasFromEditorConfig(config: EditorConfig) {\n  const legacySchema = config.schemaDefinition\n    ? compileSchemaDefinitionToLegacySchema(config.schemaDefinition)\n    : createLegacySchema(\n        config.schema.hasOwnProperty('jsonType')\n          ? config.schema\n          : compileType(config.schema),\n      )\n  const schema = legacySchemaToEditorSchema(legacySchema)\n\n  return {\n    legacySchema,\n    schema,\n  }\n}\n\nfunction createActors(config: {\n  editorActor: EditorActor\n  relayActor: RelayActor\n  slateEditor: PortableTextSlateEditor\n  subscriptions: Array<() => () => void>\n}): {\n  mutationActor: MutationActor\n  syncActor: SyncActor\n} {\n  debug('Creating new Actors')\n\n  const mutationActor = createActor(mutationMachine, {\n    input: {\n      readOnly: config.editorActor\n        .getSnapshot()\n        .matches({'edit mode': 'read only'}),\n      schema: config.editorActor.getSnapshot().context.schema,\n      slateEditor: config.slateEditor,\n    },\n  })\n\n  const syncActor = createActor(syncMachine, {\n    input: {\n      initialValue: config.editorActor.getSnapshot().context.initialValue,\n      keyGenerator: config.editorActor.getSnapshot().context.keyGenerator,\n      readOnly: config.editorActor\n        .getSnapshot()\n        .matches({'edit mode': 'read only'}),\n      schema: config.editorActor.getSnapshot().context.schema,\n      slateEditor: config.slateEditor,\n    },\n  })\n\n  config.subscriptions.push(() => {\n    const subscription = mutationActor.on('*', (event) => {\n      if (event.type === 'has pending mutations') {\n        syncActor.send({type: 'has pending mutations'})\n      }\n      if (event.type === 'mutation') {\n        syncActor.send({type: 'mutation'})\n        config.editorActor.send({\n          type: 'mutation',\n          patches: event.patches,\n          snapshot: event.snapshot,\n          value: event.snapshot,\n        })\n      }\n      if (event.type === 'patch') {\n        config.relayActor.send(event)\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  })\n\n  config.subscriptions.push(() => {\n    const subscription = syncActor.on('*', (event) => {\n      switch (event.type) {\n        case 'invalid value':\n          config.relayActor.send(event)\n          break\n        case 'value changed':\n          config.relayActor.send(event)\n          break\n        case 'patch':\n          config.editorActor.send({\n            ...event,\n            type: 'internal.patch',\n            value: fromSlateValue(\n              config.slateEditor.children,\n              config.editorActor.getSnapshot().context.schema.block.name,\n              KEY_TO_VALUE_ELEMENT.get(config.slateEditor),\n            ),\n          })\n          break\n\n        default:\n          config.editorActor.send(event)\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  })\n\n  config.subscriptions.push(() => {\n    const subscription = config.editorActor.subscribe((snapshot) => {\n      if (snapshot.matches({'edit mode': 'read only'})) {\n        mutationActor.send({type: 'update readOnly', readOnly: true})\n        syncActor.send({type: 'update readOnly', readOnly: true})\n      } else {\n        mutationActor.send({type: 'update readOnly', readOnly: false})\n        syncActor.send({type: 'update readOnly', readOnly: false})\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  })\n\n  config.subscriptions.push(() => {\n    const subscription = config.editorActor.on('*', (event) => {\n      switch (event.type) {\n        case 'editable':\n        case 'mutation':\n        case 'ready':\n        case 'read only':\n        case 'selection':\n          config.relayActor.send(event)\n          break\n        case 'internal.patch':\n          mutationActor.send({...event, type: 'patch'})\n          break\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  })\n\n  return {\n    mutationActor,\n    syncActor,\n  }\n}\n","import {\n  createContext,\n  startTransition,\n  useContext,\n  useEffect,\n  useState,\n} from 'react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport type {EditorSelection} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * A React context for sharing the editor selection.\n */\nconst PortableTextEditorSelectionContext =\n  createContext<EditorSelection | null>(null)\n\n/**\n * @deprecated Use `useEditorSelector` to get the current editor selection.\n * @public\n * Get the current editor selection from the React context.\n */\nexport const usePortableTextEditorSelection = (): EditorSelection => {\n  const selection = useContext(PortableTextEditorSelectionContext)\n\n  if (selection === undefined) {\n    throw new Error(\n      `The \\`usePortableTextEditorSelection\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n  return selection\n}\nconst debug = debugWithName('component:PortableTextEditor:SelectionProvider')\nconst debugVerbose = debug.enabled && false\n\n/**\n * @internal\n */\nexport function PortableTextEditorSelectionProvider(\n  props: React.PropsWithChildren<{\n    editorActor: EditorActor\n  }>,\n) {\n  const [selection, setSelection] = useState<EditorSelection>(null)\n\n  // Subscribe to, and handle changes from the editor\n  useEffect(() => {\n    debug('Subscribing to selection changes')\n    const subscription = props.editorActor.on('selection', (event) => {\n      // Set the selection state in a transition, we don't need the state immediately.\n      startTransition(() => {\n        if (debugVerbose) debug('Setting selection')\n        setSelection(event.selection)\n      })\n    })\n\n    return () => {\n      debug('Unsubscribing to selection changes')\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor])\n\n  return (\n    <PortableTextEditorSelectionContext.Provider value={selection}>\n      {props.children}\n    </PortableTextEditorSelectionContext.Provider>\n  )\n}\n","import {createContext} from 'react'\nimport type {RelayActor} from './relay-machine'\n\nexport const RelayActorContext = createContext<RelayActor>({} as RelayActor)\n","import {useEffect} from 'react'\nimport {useEffectEvent} from 'use-effect-event'\nimport type {EditorChange} from '../types/editor'\nimport type {InternalEditorEmittedEvent, RelayActor} from './relay-machine'\n\nexport function RouteEventsToChanges(props: {\n  relayActor: RelayActor\n  onChange: (change: EditorChange) => void\n}) {\n  // We want to ensure that _when_ `props.onChange` is called, it uses the current value.\n  // But we don't want to have the `useEffect` run setup + teardown + setup every time the prop might change, as that's unnecessary.\n  // So we use our own polyfill that lets us use an upcoming React hook that solves this exact problem.\n  // https://19.react.dev/learn/separating-events-from-effects#declaring-an-effect-event\n  const handleChange = useEffectEvent((change: EditorChange) =>\n    props.onChange(change),\n  )\n\n  useEffect(() => {\n    const sub = props.relayActor.on('*', (event) => {\n      const change = eventToChange(event)\n\n      if (change) {\n        handleChange(change)\n      }\n    })\n    return () => {\n      sub.unsubscribe()\n    }\n  }, [props.relayActor])\n\n  return null\n}\n\nexport function eventToChange(\n  event: InternalEditorEmittedEvent,\n): EditorChange | undefined {\n  switch (event.type) {\n    case 'blurred': {\n      return {type: 'blur', event: event.event}\n    }\n    case 'patch':\n      return event\n    case 'loading': {\n      return {type: 'loading', isLoading: true}\n    }\n    case 'done loading': {\n      return {type: 'loading', isLoading: false}\n    }\n    case 'focused': {\n      return {type: 'focus', event: event.event}\n    }\n    case 'value changed': {\n      return {type: 'value', value: event.value}\n    }\n    case 'invalid value': {\n      return {\n        type: 'invalidValue',\n        resolution: event.resolution,\n        value: event.value,\n      }\n    }\n    case 'mutation': {\n      return event\n    }\n    case 'ready': {\n      return event\n    }\n    case 'selection': {\n      return event\n    }\n    case 'unset': {\n      return event\n    }\n  }\n}\n","import type {\n  ArrayDefinition,\n  ArraySchemaType,\n  Path,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n} from '@sanity/types'\nimport {\n  Component,\n  useEffect,\n  type MutableRefObject,\n  type PropsWithChildren,\n} from 'react'\nimport {Subject} from 'rxjs'\nimport {Slate} from 'slate-react'\nimport {debugWithName} from '../internal-utils/debug'\nimport {stopActor} from '../internal-utils/stop-actor'\nimport type {AddedAnnotationPaths} from '../operations/behavior.operation.annotation.add'\nimport type {\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorChange,\n  EditorChanges,\n  EditorSelection,\n  PatchObservable,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\nimport {createInternalEditor, type InternalEditor} from './create-editor'\nimport {EditorActorContext} from './editor-actor-context'\nimport type {EditorActor} from './editor-machine'\nimport {PortableTextEditorContext} from './hooks/usePortableTextEditor'\nimport {PortableTextEditorSelectionProvider} from './hooks/usePortableTextEditorSelection'\nimport type {MutationActor} from './mutation-machine'\nimport {RelayActorContext} from './relay-actor-context'\nimport type {RelayActor} from './relay-machine'\nimport {eventToChange} from './route-events-to-changes'\nimport type {SyncActor} from './sync-machine'\n\nconst debug = debugWithName('component:PortableTextEditor')\n\n/**\n * Props for the PortableTextEditor component\n *\n * @public\n * @deprecated Use `EditorProvider` instead\n */\nexport type PortableTextEditorProps<\n  TEditor extends InternalEditor | undefined = undefined,\n> = PropsWithChildren<\n  TEditor extends InternalEditor\n    ? {\n        /**\n         * @internal\n         */\n        editor: TEditor\n      }\n    : {\n        editor?: undefined\n\n        /**\n         * Function that gets called when the editor changes the value\n         */\n        onChange: (change: EditorChange) => void\n\n        /**\n         * Schema type for the portable text field\n         */\n        schemaType: ArraySchemaType<PortableTextBlock> | ArrayDefinition\n\n        /**\n         * Maximum number of blocks to allow within the editor\n         */\n        maxBlocks?: number | string\n\n        /**\n         * Function used to generate keys for array items (`_key`)\n         */\n        keyGenerator?: () => string\n\n        /**\n         * Observable of local and remote patches for the edited value.\n         */\n        patches$?: PatchObservable\n\n        /**\n         * Backward compatibility (renamed to patches$).\n         */\n        incomingPatches$?: PatchObservable\n\n        /**\n         * Whether or not the editor should be in read-only mode\n         */\n        readOnly?: boolean\n\n        /**\n         * The current value of the portable text field\n         */\n        value?: PortableTextBlock[]\n\n        /**\n         * A ref to the editor instance\n         */\n        editorRef?: MutableRefObject<PortableTextEditor | null>\n      }\n>\n\n/**\n * The main Portable Text Editor component.\n * @public\n * @deprecated Use `EditorProvider` instead\n */\nexport class PortableTextEditor extends Component<\n  PortableTextEditorProps<InternalEditor | undefined>\n> {\n  public static displayName = 'PortableTextEditor'\n  /**\n   * An observable of all the editor changes.\n   */\n  public change$: EditorChanges = new Subject()\n  /**\n   * A lookup table for all the relevant schema types for this portable text type.\n   */\n  public schemaTypes: PortableTextMemberSchemaTypes\n  /**\n   * The editor instance\n   */\n  private editor: InternalEditor\n  /*\n   * The editor API (currently implemented with Slate).\n   */\n  private editable: EditableAPI\n\n  private actors?: {\n    editorActor: EditorActor\n    mutationActor: MutationActor\n    relayActor: RelayActor\n    syncActor: SyncActor\n  }\n\n  private subscriptions: Array<() => () => void> = []\n  private unsubscribers: Array<() => void> = []\n\n  constructor(props: PortableTextEditorProps) {\n    super(props)\n\n    if (props.editor) {\n      this.editor = props.editor as InternalEditor\n      this.schemaTypes = this.editor._internal.editorActor\n        .getSnapshot()\n        .context.getLegacySchema()\n    } else {\n      const {actors, editor, subscriptions} = createInternalEditor({\n        initialValue: props.value,\n        keyGenerator: props.keyGenerator,\n        maxBlocks:\n          props.maxBlocks === undefined\n            ? undefined\n            : Number.parseInt(props.maxBlocks.toString(), 10),\n        readOnly: props.readOnly,\n        schema: props.schemaType,\n      })\n\n      this.subscriptions = subscriptions\n      this.actors = actors\n\n      this.editor = editor\n      this.schemaTypes = actors.editorActor\n        .getSnapshot()\n        .context.getLegacySchema()\n    }\n\n    this.editable = this.editor._internal.editable\n  }\n\n  componentDidMount(): void {\n    if (!this.actors) {\n      return\n    }\n\n    for (const subscription of this.subscriptions) {\n      this.unsubscribers.push(subscription())\n    }\n\n    const relayActorSubscription = this.actors.relayActor.on('*', (event) => {\n      const change = eventToChange(event)\n\n      if (!change) {\n        return\n      }\n\n      if (!this.props.editor) {\n        this.props.onChange(change)\n      }\n\n      this.change$.next(change)\n    })\n\n    this.unsubscribers.push(relayActorSubscription.unsubscribe)\n\n    this.actors.editorActor.start()\n    this.actors.mutationActor.start()\n    this.actors.relayActor.start()\n    this.actors.syncActor.start()\n  }\n\n  componentDidUpdate(prevProps: PortableTextEditorProps) {\n    // Set up the schema type lookup table again if the source schema type changes\n    if (\n      !this.props.editor &&\n      !prevProps.editor &&\n      this.props.schemaType !== prevProps.schemaType\n    ) {\n      console.warn('Updating schema type is no longer supported')\n    }\n\n    if (!this.props.editor && !prevProps.editor) {\n      if (this.props.readOnly !== prevProps.readOnly) {\n        this.editor._internal.editorActor.send({\n          type: 'update readOnly',\n          readOnly: this.props.readOnly ?? false,\n        })\n      }\n\n      if (this.props.maxBlocks !== prevProps.maxBlocks) {\n        this.editor._internal.editorActor.send({\n          type: 'update maxBlocks',\n          maxBlocks:\n            this.props.maxBlocks === undefined\n              ? undefined\n              : Number.parseInt(this.props.maxBlocks.toString(), 10),\n        })\n      }\n\n      if (this.props.value !== prevProps.value) {\n        this.editor.send({\n          type: 'update value',\n          value: this.props.value,\n        })\n      }\n\n      if (\n        this.props.editorRef !== prevProps.editorRef &&\n        this.props.editorRef\n      ) {\n        this.props.editorRef.current = this\n      }\n    }\n  }\n\n  componentWillUnmount(): void {\n    for (const unsubscribe of this.unsubscribers) {\n      unsubscribe()\n    }\n\n    if (this.actors) {\n      stopActor(this.actors.editorActor)\n      stopActor(this.actors.mutationActor)\n      stopActor(this.actors.relayActor)\n      stopActor(this.actors.syncActor)\n    }\n  }\n\n  public setEditable = (editable: EditableAPI) => {\n    this.editor._internal.editable = {\n      ...this.editor._internal.editable,\n      ...editable,\n    }\n  }\n\n  render() {\n    const legacyPatches = !this.props.editor\n      ? (this.props.incomingPatches$ ?? this.props.patches$)\n      : undefined\n\n    return (\n      <>\n        {legacyPatches ? (\n          <RoutePatchesObservableToEditorActor\n            editorActor={this.editor._internal.editorActor}\n            patches$={legacyPatches}\n          />\n        ) : null}\n        <EditorActorContext.Provider value={this.editor._internal.editorActor}>\n          <RelayActorContext.Provider value={this.actors!.relayActor}>\n            <Slate\n              editor={this.editor._internal.slateEditor.instance}\n              initialValue={this.editor._internal.slateEditor.initialValue}\n            >\n              <PortableTextEditorContext.Provider value={this}>\n                <PortableTextEditorSelectionProvider\n                  editorActor={this.editor._internal.editorActor}\n                >\n                  {this.props.children}\n                </PortableTextEditorSelectionProvider>\n              </PortableTextEditorContext.Provider>\n            </Slate>\n          </RelayActorContext.Provider>\n        </EditorActorContext.Provider>\n      </>\n    )\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.getActiveAnnotations)\n   * ```\n   */\n  static activeAnnotations = (\n    editor: PortableTextEditor,\n  ): PortableTextObject[] => {\n    return editor && editor.editable ? editor.editable.activeAnnotations() : []\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveAnnotation(...))\n   * ```\n   */\n  static isAnnotationActive = (\n    editor: PortableTextEditor,\n    annotationType: PortableTextObject['_type'],\n  ): boolean => {\n    return editor && editor.editable\n      ? editor.editable.isAnnotationActive(annotationType)\n      : false\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'annotation.add',\n   *  annotation: {\n   *    name: '...',\n   *    value: {...},\n   *  }\n   * })\n   * ```\n   */\n  static addAnnotation = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): AddedAnnotationPaths | undefined =>\n    editor.editable?.addAnnotation(type, value)\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'blur',\n   * })\n   * ```\n   */\n  static blur = (editor: PortableTextEditor): void => {\n    debug('Host blurred')\n    editor.editable?.blur()\n  }\n\n  static delete = (\n    editor: PortableTextEditor,\n    selection: EditorSelection,\n    options?: EditableAPIDeleteOptions,\n  ) => editor.editable?.delete(selection, options)\n\n  static findDOMNode = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild,\n  ) => {\n    return editor.editable?.findDOMNode(element)\n  }\n\n  static findByPath = (editor: PortableTextEditor, path: Path) => {\n    return editor.editable?.findByPath(path) || []\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'focus',\n   * })\n   * ```\n   */\n  static focus = (editor: PortableTextEditor): void => {\n    debug('Host requesting focus')\n    editor.editable?.focus()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const focusBlock = useEditorSelector(editor, selectors.getFocusBlock)\n   * ```\n   */\n  static focusBlock = (editor: PortableTextEditor) => {\n    return editor.editable?.focusBlock()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const focusChild = useEditorSelector(editor, selectors.getFocusChild)\n   * ```\n   */\n  static focusChild = (\n    editor: PortableTextEditor,\n  ): PortableTextChild | undefined => {\n    return editor.editable?.focusChild()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const selection = useEditorSelector(editor, selectors.getSelection)\n   * ```\n   */\n  static getSelection = (editor: PortableTextEditor) => {\n    return editor.editable ? editor.editable.getSelection() : null\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const value = useEditorSelector(editor, selectors.getValue)\n   * ```\n   */\n  static getValue = (editor: PortableTextEditor) => {\n    return editor.editable?.getValue()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveStyle(...))\n   * ```\n   */\n  static hasBlockStyle = (editor: PortableTextEditor, blockStyle: string) => {\n    return editor.editable?.hasBlockStyle(blockStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveListItem(...))\n   * ```\n   */\n  static hasListStyle = (editor: PortableTextEditor, listStyle: string) => {\n    return editor.editable?.hasListStyle(listStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isSelectionCollapsed = useEditorSelector(editor, selectors.isSelectionCollapsed)\n   * ```\n   */\n  static isCollapsedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isCollapsedSelection()\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isSelectionExpanded = useEditorSelector(editor, selectors.isSelectionExpanded)\n   * ```\n   */\n  static isExpandedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isExpandedSelection()\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveDecorator(...))\n   * ```\n   */\n  static isMarkActive = (editor: PortableTextEditor, mark: string) =>\n    editor.editable?.isMarkActive(mark)\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.span',\n   *  text: '...',\n   *  annotations: [{name: '...', value: {...}}],\n   *  decorators: ['...'],\n   * })\n   * editor.send({\n   *  type: 'insert.inline object',\n   *  inlineObject: {\n   *    name: '...',\n   *    value: {...},\n   *  },\n   * })\n   * ```\n   */\n  static insertChild = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    debug(`Host inserting child`)\n    return editor.editable?.insertChild(type, value)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.block object',\n   *  blockObject: {\n   *    name: '...',\n   *    value: {...},\n   *  },\n   *  placement: 'auto' | 'after' | 'before',\n   * })\n   * ```\n   */\n  static insertBlock = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    return editor.editable?.insertBlock(type, value)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.break',\n   * })\n   * ```\n   */\n  static insertBreak = (editor: PortableTextEditor): void => {\n    return editor.editable?.insertBreak()\n  }\n\n  static isVoid = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild,\n  ) => {\n    return editor.editable?.isVoid(element)\n  }\n\n  static isObjectPath = (_editor: PortableTextEditor, path: Path): boolean => {\n    if (!path || !Array.isArray(path)) return false\n    const isChildObjectEditPath = path.length > 3 && path[1] === 'children'\n    const isBlockObjectEditPath = path.length > 1 && path[1] !== 'children'\n    return isBlockObjectEditPath || isChildObjectEditPath\n  }\n\n  static marks = (editor: PortableTextEditor) => {\n    return editor.editable?.marks()\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'select',\n   *  selection: {...},\n   * })\n   * ```\n   */\n  static select = (\n    editor: PortableTextEditor,\n    selection: EditorSelection | null,\n  ) => {\n    debug(`Host setting selection`, selection)\n    editor.editable?.select(selection)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'annotation.remove',\n   *  annotation: {\n   *    name: '...',\n   *  },\n   * })\n   * ```\n   */\n  static removeAnnotation = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n  ) => editor.editable?.removeAnnotation(type)\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'style.toggle',\n   *  style: '...',\n   * })\n   * ```\n   */\n  static toggleBlockStyle = (\n    editor: PortableTextEditor,\n    blockStyle: string,\n  ) => {\n    debug(`Host is toggling block style`)\n    return editor.editable?.toggleBlockStyle(blockStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'list item.toggle',\n   *  listItem: '...',\n   * })\n   * ```\n   */\n  static toggleList = (editor: PortableTextEditor, listStyle: string): void => {\n    return editor.editable?.toggleList(listStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'decorator.toggle',\n   *  decorator: '...',\n   * })\n   * ```\n   */\n  static toggleMark = (editor: PortableTextEditor, mark: string): void => {\n    debug(`Host toggling mark`, mark)\n    editor.editable?.toggleMark(mark)\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const selectedSlice = useEditorSelector(editor, selectors.getSelectedSlice)\n   * ```\n   */\n  static getFragment = (\n    editor: PortableTextEditor,\n  ): PortableTextBlock[] | undefined => {\n    return editor.editable?.getFragment()\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *   type: 'history.undo',\n   * })\n   * ```\n   */\n  static undo = (editor: PortableTextEditor): void => {\n    debug('Host undoing')\n    editor.editable?.undo()\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *   type: 'history.redo',\n   * })\n   * ```\n   */\n  static redo = (editor: PortableTextEditor): void => {\n    debug('Host redoing')\n    editor.editable?.redo()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isOverlapping = useEditorSelector(editor, selectors.isOverlappingSelection(selectionB))\n   * ```\n   */\n  static isSelectionsOverlapping = (\n    editor: PortableTextEditor,\n    selectionA: EditorSelection,\n    selectionB: EditorSelection,\n  ) => {\n    return editor.editable?.isSelectionsOverlapping(selectionA, selectionB)\n  }\n}\n\nfunction RoutePatchesObservableToEditorActor(props: {\n  editorActor: EditorActor\n  patches$: PatchObservable\n}) {\n  useEffect(() => {\n    const subscription = props.patches$.subscribe((payload) => {\n      props.editorActor.send({\n        type: 'patches',\n        ...payload,\n      })\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor, props.patches$])\n\n  return null\n}\n","import {useSelector} from '@xstate/react'\nimport {isEqual, uniq} from 'lodash'\nimport {\n  startTransition,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  type ReactElement,\n} from 'react'\nimport {useSelected, useSlateStatic, type RenderLeafProps} from 'slate-react'\nimport type {\n  RenderAnnotationFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\nimport {usePortableTextEditor} from '../hooks/usePortableTextEditor'\nimport {PortableTextEditor} from '../PortableTextEditor'\n\nexport interface RenderSpanProps extends RenderLeafProps {\n  children: ReactElement<any>\n  renderAnnotation?: RenderAnnotationFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  readOnly: boolean\n}\n\nexport function RenderSpan(props: RenderSpanProps) {\n  const slateEditor = useSlateStatic()\n  const editorActor = useContext(EditorActorContext)\n  const legacySchema = useSelector(editorActor, (s) =>\n    s.context.getLegacySchema(),\n  )\n  const spanRef = useRef<HTMLElement>(null)\n  const portableTextEditor = usePortableTextEditor()\n  const blockSelected = useSelected()\n  const [focused, setFocused] = useState(false)\n  const [selected, setSelected] = useState(false)\n\n  const parent = props.children.props.parent\n  const block = parent && slateEditor.isTextBlock(parent) ? parent : undefined\n\n  const path = useMemo(\n    () =>\n      block\n        ? [{_key: block._key}, 'children', {_key: props.leaf._key}]\n        : undefined,\n    [block, props.leaf._key],\n  )\n\n  const decoratorSchemaTypes = editorActor\n    .getSnapshot()\n    .context.schema.decorators.map((decorator) => decorator.name)\n\n  const decorators = uniq(\n    (props.leaf.marks ?? []).filter((mark) =>\n      decoratorSchemaTypes.includes(mark),\n    ),\n  )\n\n  const annotationMarkDefs = (props.leaf.marks ?? []).flatMap((mark) => {\n    if (decoratorSchemaTypes.includes(mark)) {\n      return []\n    }\n\n    const markDef = block?.markDefs?.find((markDef) => markDef._key === mark)\n\n    if (markDef) {\n      return [markDef]\n    }\n\n    return []\n  })\n\n  const shouldTrackSelectionAndFocus =\n    annotationMarkDefs.length > 0 && blockSelected\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      setFocused(false)\n      return\n    }\n\n    const sel = PortableTextEditor.getSelection(portableTextEditor)\n\n    if (\n      sel &&\n      isEqual(sel.focus.path, path) &&\n      PortableTextEditor.isCollapsedSelection(portableTextEditor)\n    ) {\n      startTransition(() => {\n        setFocused(true)\n      })\n    }\n  }, [shouldTrackSelectionAndFocus, path, portableTextEditor])\n\n  // Function to check if this leaf is currently inside the user's text selection\n  const setSelectedFromRange = useCallback(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return\n    }\n\n    const winSelection = window.getSelection()\n\n    if (!winSelection) {\n      setSelected(false)\n      return\n    }\n\n    if (winSelection && winSelection.rangeCount > 0) {\n      const range = winSelection.getRangeAt(0)\n\n      if (spanRef.current && range.intersectsNode(spanRef.current)) {\n        setSelected(true)\n      } else {\n        setSelected(false)\n      }\n    } else {\n      setSelected(false)\n    }\n  }, [shouldTrackSelectionAndFocus])\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return undefined\n    }\n\n    const onBlur = editorActor.on('blurred', () => {\n      setFocused(false)\n      setSelected(false)\n    })\n\n    const onFocus = editorActor.on('focused', () => {\n      const sel = PortableTextEditor.getSelection(portableTextEditor)\n\n      if (\n        sel &&\n        isEqual(sel.focus.path, path) &&\n        PortableTextEditor.isCollapsedSelection(portableTextEditor)\n      ) {\n        setFocused(true)\n      }\n\n      setSelectedFromRange()\n    })\n\n    const onSelection = editorActor.on('selection', (event) => {\n      if (\n        event.selection &&\n        isEqual(event.selection.focus.path, path) &&\n        PortableTextEditor.isCollapsedSelection(portableTextEditor)\n      ) {\n        setFocused(true)\n      } else {\n        setFocused(false)\n      }\n      setSelectedFromRange()\n    })\n\n    return () => {\n      onBlur.unsubscribe()\n      onFocus.unsubscribe()\n      onSelection.unsubscribe()\n    }\n  }, [\n    editorActor,\n    path,\n    portableTextEditor,\n    setSelectedFromRange,\n    shouldTrackSelectionAndFocus,\n  ])\n\n  useEffect(() => setSelectedFromRange(), [setSelectedFromRange])\n\n  let children = props.children\n\n  /**\n   * Support `renderDecorator` render function for each Decorator\n   */\n  for (const mark of decorators) {\n    const legacyDecoratorSchemaType = legacySchema.decorators.find(\n      (dec) => dec.value === mark,\n    )\n\n    if (path && legacyDecoratorSchemaType && props.renderDecorator) {\n      children = props.renderDecorator({\n        children: children,\n        editorElementRef: spanRef,\n        focused,\n        path,\n        selected,\n        schemaType: legacyDecoratorSchemaType,\n        value: mark,\n        type: legacyDecoratorSchemaType,\n      })\n    }\n  }\n\n  /**\n   * Support `renderAnnotation` render function for each Annotation\n   */\n  for (const annotationMarkDef of annotationMarkDefs) {\n    const legacyAnnotationSchemaType = legacySchema.annotations.find(\n      (t) => t.name === annotationMarkDef._type,\n    )\n    if (legacyAnnotationSchemaType) {\n      if (block && path && props.renderAnnotation) {\n        children = (\n          <span ref={spanRef}>\n            {props.renderAnnotation({\n              block,\n              children: children,\n              editorElementRef: spanRef,\n              focused,\n              path,\n              selected,\n              schemaType: legacyAnnotationSchemaType,\n              value: annotationMarkDef,\n              type: legacyAnnotationSchemaType,\n            })}\n          </span>\n        )\n      } else {\n        children = <span ref={spanRef}>{children}</span>\n      }\n    }\n  }\n\n  /**\n   * Support `renderChild` render function for the Span itself\n   */\n  if (block && path && props.renderChild) {\n    const child = block.children.find(\n      (_child) => _child._key === props.leaf._key,\n    ) // Ensure object equality\n\n    if (child) {\n      children = props.renderChild({\n        annotations: annotationMarkDefs,\n        children: children,\n        editorElementRef: spanRef,\n        focused,\n        path,\n        schemaType: legacySchema.span,\n        selected,\n        value: child,\n        type: legacySchema.span,\n      })\n    }\n  }\n\n  return (\n    <span {...props.attributes} ref={spanRef}>\n      {children}\n    </span>\n  )\n}\n","import {useSelector} from '@xstate/react'\nimport {useContext, type CSSProperties} from 'react'\nimport type {Text} from 'slate'\nimport type {RenderLeafProps} from 'slate-react'\nimport type {\n  RangeDecoration,\n  RenderAnnotationFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n  RenderPlaceholderFunction,\n} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\nimport {RenderSpan} from './render-span'\n\nconst PLACEHOLDER_STYLE: CSSProperties = {\n  position: 'absolute',\n  userSelect: 'none',\n  pointerEvents: 'none',\n  left: 0,\n  right: 0,\n}\n\nexport function RenderLeaf(\n  props: RenderLeafProps & {\n    leaf: Text & {placeholder?: boolean; rangeDecoration?: RangeDecoration}\n    readOnly: boolean\n    renderAnnotation?: RenderAnnotationFunction\n    renderChild?: RenderChildFunction\n    renderDecorator?: RenderDecoratorFunction\n    renderPlaceholder?: RenderPlaceholderFunction\n  },\n) {\n  const editorActor = useContext(EditorActorContext)\n  const schema = useSelector(editorActor, (s) => s.context.schema)\n\n  if (props.leaf._type !== schema.span.name) {\n    return props.children\n  }\n\n  let renderedSpan = <RenderSpan {...props} />\n\n  if (\n    props.renderPlaceholder &&\n    props.leaf.placeholder &&\n    props.text.text === ''\n  ) {\n    return (\n      <>\n        <span style={PLACEHOLDER_STYLE} contentEditable={false}>\n          {props.renderPlaceholder()}\n        </span>\n        {renderedSpan}\n      </>\n    )\n  }\n\n  const rangeDecoration = props.leaf.rangeDecoration\n\n  if (rangeDecoration) {\n    renderedSpan = rangeDecoration.component({children: renderedSpan})\n  }\n\n  return renderedSpan\n}\n","import type {Editable} from 'slate-react'\n\nexport type RenderTextProps = Parameters<\n  NonNullable<React.ComponentProps<typeof Editable>['renderText']>\n>[0]\n\nexport function RenderText(props: RenderTextProps) {\n  return (\n    <span\n      {...props.attributes}\n      data-child-key={props.text._key}\n      data-child-name={props.text._type}\n      data-child-type=\"span\"\n    >\n      {props.children}\n    </span>\n  )\n}\n","import type {KeyboardEvent} from 'react'\nimport type {ReactEditor} from 'slate-react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {isHotkey} from '../../internal-utils/is-hotkey'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {HotkeyOptions} from '../../types/options'\nimport type {EditorActor} from '../editor-machine'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('plugin:withHotKeys')\n\n/**\n * This plugin takes care of all hotkeys in the editor\n *\n */\nexport function createWithHotkeys(\n  editorActor: EditorActor,\n  portableTextEditor: PortableTextEditor,\n  hotkeysFromOptions?: HotkeyOptions,\n): (editor: PortableTextSlateEditor & ReactEditor) => any {\n  const reservedHotkeys = ['enter', 'tab', 'shift', 'delete', 'end']\n  const activeHotkeys = hotkeysFromOptions ?? {}\n  return function withHotKeys(editor: PortableTextSlateEditor & ReactEditor) {\n    editor.pteWithHotKeys = (event: KeyboardEvent<HTMLDivElement>): void => {\n      // Wire up custom marks hotkeys\n      Object.keys(activeHotkeys).forEach((cat) => {\n        if (cat === 'marks') {\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              event.preventDefault()\n              const possibleMark = activeHotkeys[cat]\n              if (possibleMark) {\n                const mark = possibleMark[hotkey]\n                debug(`HotKey ${hotkey} to toggle ${mark}`)\n                editorActor.send({\n                  type: 'behavior event',\n                  behaviorEvent: {\n                    type: 'decorator.toggle',\n                    decorator: mark,\n                  },\n                  editor,\n                })\n              }\n            }\n          }\n        }\n        if (cat === 'custom') {\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              const possibleCommand = activeHotkeys[cat]\n              if (possibleCommand) {\n                const command = possibleCommand[hotkey]\n                command(event, portableTextEditor)\n              }\n            }\n          }\n        }\n      })\n    }\n    return editor\n  }\n}\n","import {isEqual} from 'lodash'\nimport {\n  Element,\n  Path,\n  Range,\n  type BaseRange,\n  type NodeEntry,\n  type Operation,\n} from 'slate'\nimport {\n  and,\n  assign,\n  fromCallback,\n  setup,\n  type ActorRefFrom,\n  type AnyEventObject,\n  type CallbackLogicFunction,\n} from 'xstate'\nimport {moveRangeByOperation, toSlateRange} from '../internal-utils/ranges'\nimport {slateRangeToSelection} from '../internal-utils/slate-utils'\nimport {isEqualToEmptyEditor} from '../internal-utils/values'\nimport type {PortableTextSlateEditor, RangeDecoration} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\n\nconst slateOperationCallback: CallbackLogicFunction<\n  AnyEventObject,\n  {type: 'slate operation'; operation: Operation},\n  {slateEditor: PortableTextSlateEditor}\n> = ({input, sendBack}) => {\n  const originalApply = input.slateEditor.apply\n\n  input.slateEditor.apply = (op) => {\n    if (op.type !== 'set_selection') {\n      sendBack({type: 'slate operation', operation: op})\n    }\n\n    originalApply(op)\n  }\n\n  return () => {\n    input.slateEditor.apply = originalApply\n  }\n}\n\ntype DecoratedRange = BaseRange & {rangeDecoration: RangeDecoration}\n\nexport const rangeDecorationsMachine = setup({\n  types: {\n    context: {} as {\n      decoratedRanges: Array<DecoratedRange>\n      pendingRangeDecorations: Array<RangeDecoration>\n      skipSetup: boolean\n      readOnly: boolean\n      schema: EditorSchema\n      slateEditor: PortableTextSlateEditor\n      updateCount: number\n    },\n    input: {} as {\n      rangeDecorations: Array<RangeDecoration>\n      readOnly: boolean\n      schema: EditorSchema\n      skipSetup: boolean\n      slateEditor: PortableTextSlateEditor\n    },\n    events: {} as\n      | {\n          type: 'ready'\n        }\n      | {\n          type: 'range decorations updated'\n          rangeDecorations: Array<RangeDecoration>\n        }\n      | {\n          type: 'slate operation'\n          operation: Operation\n        }\n      | {\n          type: 'update read only'\n          readOnly: boolean\n        },\n  },\n  actions: {\n    'update pending range decorations': assign({\n      pendingRangeDecorations: ({context, event}) => {\n        if (event.type !== 'range decorations updated') {\n          return context.pendingRangeDecorations\n        }\n\n        return event.rangeDecorations\n      },\n    }),\n    'set up initial range decorations': assign({\n      decoratedRanges: ({context}) => {\n        const rangeDecorationState: Array<DecoratedRange> = []\n\n        for (const rangeDecoration of context.pendingRangeDecorations) {\n          const slateRange = toSlateRange(\n            rangeDecoration.selection,\n            context.slateEditor,\n          )\n\n          if (!Range.isRange(slateRange)) {\n            rangeDecoration.onMoved?.({\n              newSelection: null,\n              rangeDecoration,\n              origin: 'local',\n            })\n            continue\n          }\n\n          rangeDecorationState.push({\n            rangeDecoration,\n            ...slateRange,\n          })\n        }\n\n        return rangeDecorationState\n      },\n    }),\n    'update range decorations': assign({\n      decoratedRanges: ({context, event}) => {\n        if (event.type !== 'range decorations updated') {\n          return context.decoratedRanges\n        }\n\n        const rangeDecorationState: Array<DecoratedRange> = []\n\n        for (const rangeDecoration of event.rangeDecorations) {\n          const slateRange = toSlateRange(\n            rangeDecoration.selection,\n            context.slateEditor,\n          )\n\n          if (!Range.isRange(slateRange)) {\n            rangeDecoration.onMoved?.({\n              newSelection: null,\n              rangeDecoration,\n              origin: 'local',\n            })\n            continue\n          }\n\n          rangeDecorationState.push({\n            rangeDecoration,\n            ...slateRange,\n          })\n        }\n\n        return rangeDecorationState\n      },\n    }),\n    'move range decorations': assign({\n      decoratedRanges: ({context, event}) => {\n        if (event.type !== 'slate operation') {\n          return context.decoratedRanges\n        }\n\n        const rangeDecorationState: Array<DecoratedRange> = []\n\n        for (const decoratedRange of context.decoratedRanges) {\n          const slateRange = toSlateRange(\n            decoratedRange.rangeDecoration.selection,\n            context.slateEditor,\n          )\n\n          if (!Range.isRange(slateRange)) {\n            decoratedRange.rangeDecoration.onMoved?.({\n              newSelection: null,\n              rangeDecoration: decoratedRange.rangeDecoration,\n              origin: 'local',\n            })\n            continue\n          }\n\n          let newRange: BaseRange | null | undefined\n\n          newRange = moveRangeByOperation(slateRange, event.operation)\n          if (\n            (newRange && newRange !== slateRange) ||\n            (newRange === null && slateRange)\n          ) {\n            const newRangeSelection = newRange\n              ? slateRangeToSelection({\n                  schema: context.schema,\n                  editor: context.slateEditor,\n                  range: newRange,\n                })\n              : null\n\n            decoratedRange.rangeDecoration.onMoved?.({\n              newSelection: newRangeSelection,\n              rangeDecoration: decoratedRange.rangeDecoration,\n              origin: 'local',\n            })\n          }\n\n          // If the newRange is null, it means that the range is not valid anymore and should be removed\n          // If it's undefined, it means that the slateRange is still valid and should be kept\n          if (newRange !== null) {\n            rangeDecorationState.push({\n              ...(newRange || slateRange),\n              rangeDecoration: {\n                ...decoratedRange.rangeDecoration,\n                selection: slateRangeToSelection({\n                  schema: context.schema,\n                  editor: context.slateEditor,\n                  range: newRange,\n                }),\n              },\n            })\n          }\n        }\n\n        return rangeDecorationState\n      },\n    }),\n    'assign readOnly': assign({\n      readOnly: ({context, event}) => {\n        if (event.type !== 'update read only') {\n          return context.readOnly\n        }\n\n        return event.readOnly\n      },\n    }),\n    'increment update count': assign({\n      updateCount: ({context}) => {\n        return context.updateCount + 1\n      },\n    }),\n  },\n  actors: {\n    'slate operation listener': fromCallback(slateOperationCallback),\n  },\n  guards: {\n    'has pending range decorations': ({context}) =>\n      context.pendingRangeDecorations.length > 0,\n    'has range decorations': ({context}) => context.decoratedRanges.length > 0,\n    'has different decorations': ({context, event}) => {\n      if (event.type !== 'range decorations updated') {\n        return false\n      }\n\n      const existingRangeDecorations = context.decoratedRanges.map(\n        (decoratedRange) => ({\n          anchor: decoratedRange.rangeDecoration.selection?.anchor,\n          focus: decoratedRange.rangeDecoration.selection?.focus,\n        }),\n      )\n\n      const newRangeDecorations = event.rangeDecorations.map(\n        (rangeDecoration) => ({\n          anchor: rangeDecoration.selection?.anchor,\n          focus: rangeDecoration.selection?.focus,\n        }),\n      )\n\n      const different = !isEqual(existingRangeDecorations, newRangeDecorations)\n\n      return different\n    },\n    'not read only': ({context}) => !context.readOnly,\n    'should skip setup': ({context}) => context.skipSetup,\n  },\n}).createMachine({\n  id: 'range decorations',\n  context: ({input}) => ({\n    readOnly: input.readOnly,\n    pendingRangeDecorations: input.rangeDecorations,\n    decoratedRanges: [],\n    skipSetup: input.skipSetup,\n    schema: input.schema,\n    slateEditor: input.slateEditor,\n    updateCount: 0,\n  }),\n  invoke: {\n    src: 'slate operation listener',\n    input: ({context}) => ({slateEditor: context.slateEditor}),\n  },\n  on: {\n    'update read only': {\n      actions: ['assign readOnly'],\n    },\n  },\n  initial: 'setting up',\n  states: {\n    'setting up': {\n      always: [\n        {\n          guard: and(['should skip setup', 'has pending range decorations']),\n          target: 'ready',\n          actions: [\n            'set up initial range decorations',\n            'increment update count',\n          ],\n        },\n        {\n          guard: 'should skip setup',\n          target: 'ready',\n        },\n      ],\n      on: {\n        'range decorations updated': {\n          actions: ['update pending range decorations'],\n        },\n        'ready': [\n          {\n            target: 'ready',\n            guard: 'has pending range decorations',\n            actions: [\n              'set up initial range decorations',\n              'increment update count',\n            ],\n          },\n          {\n            target: 'ready',\n          },\n        ],\n      },\n    },\n    'ready': {\n      initial: 'idle',\n      on: {\n        'range decorations updated': {\n          target: '.idle',\n          guard: 'has different decorations',\n          actions: ['update range decorations', 'increment update count'],\n        },\n      },\n      states: {\n        'idle': {\n          on: {\n            'slate operation': {\n              target: 'moving range decorations',\n              guard: and(['has range decorations', 'not read only']),\n            },\n          },\n        },\n        'moving range decorations': {\n          entry: ['move range decorations'],\n          always: {\n            target: 'idle',\n          },\n        },\n      },\n    },\n  },\n})\n\nexport function createDecorate(\n  rangeDecorationActor: ActorRefFrom<typeof rangeDecorationsMachine>,\n) {\n  return function decorate([node, path]: NodeEntry): Array<BaseRange> {\n    if (\n      isEqualToEmptyEditor(\n        rangeDecorationActor.getSnapshot().context.slateEditor.children,\n        rangeDecorationActor.getSnapshot().context.schema,\n      )\n    ) {\n      return [\n        {\n          anchor: {\n            path: [0, 0],\n            offset: 0,\n          },\n          focus: {\n            path: [0, 0],\n            offset: 0,\n          },\n          placeholder: true,\n        } as BaseRange,\n      ]\n    }\n\n    // Editor node has a path length of 0 (should never be decorated)\n    if (path.length === 0) {\n      return []\n    }\n\n    if (!Element.isElement(node) || node.children.length === 0) {\n      return []\n    }\n\n    const blockIndex = path.at(0)\n\n    if (blockIndex === undefined) {\n      return []\n    }\n\n    return rangeDecorationActor\n      .getSnapshot()\n      .context.decoratedRanges.filter((decoratedRange) => {\n        // Special case in order to only return one decoration for collapsed ranges\n        if (Range.isCollapsed(decoratedRange)) {\n          // Collapsed ranges should only be decorated if they are on a block child level (length 2)\n          return node.children.some(\n            (_, childIndex) =>\n              Path.equals(decoratedRange.anchor.path, [\n                blockIndex,\n                childIndex,\n              ]) &&\n              Path.equals(decoratedRange.focus.path, [blockIndex, childIndex]),\n          )\n        }\n\n        return (\n          Range.intersection(decoratedRange, {\n            anchor: {path, offset: 0},\n            focus: {path, offset: 0},\n          }) || Range.includes(decoratedRange, path)\n        )\n      })\n  }\n}\n","import {useActorRef, useSelector} from '@xstate/react'\nimport {noop} from 'lodash'\nimport {\n  forwardRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState,\n  type ClipboardEvent,\n  type FocusEventHandler,\n  type KeyboardEvent,\n  type MutableRefObject,\n  type TextareaHTMLAttributes,\n} from 'react'\nimport {Editor, Transforms, type Text} from 'slate'\nimport {\n  ReactEditor,\n  Editable as SlateEditable,\n  useSlate,\n  type RenderElementProps,\n  type RenderLeafProps,\n} from 'slate-react'\nimport {getCompoundClientRect} from '../internal-utils/compound-client-rect'\nimport {debugWithName} from '../internal-utils/debug'\nimport {getDragSelection} from '../internal-utils/drag-selection'\nimport {getEventPosition} from '../internal-utils/event-position'\nimport {parseBlocks} from '../internal-utils/parse-blocks'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport {normalizeSelection} from '../internal-utils/selection'\nimport {getSelectionDomNodes} from '../internal-utils/selection-elements'\nimport {slateRangeToSelection} from '../internal-utils/slate-utils'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport * as selectors from '../selectors'\nimport type {\n  EditorSelection,\n  OnCopyFn,\n  OnPasteFn,\n  RangeDecoration,\n  RenderAnnotationFunction,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n  RenderListItemFunction,\n  RenderPlaceholderFunction,\n  RenderStyleFunction,\n  ScrollSelectionIntoViewFunction,\n} from '../types/editor'\nimport type {HotkeyOptions} from '../types/options'\nimport {isSelectionCollapsed} from '../utils'\nimport {getSelectionEndPoint} from '../utils/util.get-selection-end-point'\nimport {RenderElement} from './components/render-element'\nimport {RenderLeaf} from './components/render-leaf'\nimport {RenderText, type RenderTextProps} from './components/render-text'\nimport {EditorActorContext} from './editor-actor-context'\nimport {getEditorSnapshot} from './editor-selector'\nimport {usePortableTextEditor} from './hooks/usePortableTextEditor'\nimport {createWithHotkeys} from './plugins/createWithHotKeys'\nimport {PortableTextEditor} from './PortableTextEditor'\nimport {\n  createDecorate,\n  rangeDecorationsMachine,\n} from './range-decorations-machine'\nimport {RelayActorContext} from './relay-actor-context'\n\nconst debug = debugWithName('component:Editable')\n\n/**\n * @public\n */\nexport type PortableTextEditableProps = Omit<\n  TextareaHTMLAttributes<HTMLDivElement>,\n  'onPaste' | 'onCopy' | 'onBeforeInput'\n> & {\n  hotkeys?: HotkeyOptions\n  onBeforeInput?: (event: InputEvent) => void\n  onPaste?: OnPasteFn\n  onCopy?: OnCopyFn\n  ref: MutableRefObject<HTMLDivElement | null>\n  rangeDecorations?: RangeDecoration[]\n  renderAnnotation?: RenderAnnotationFunction\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  renderListItem?: RenderListItemFunction\n  renderPlaceholder?: RenderPlaceholderFunction\n  renderStyle?: RenderStyleFunction\n  scrollSelectionIntoView?: ScrollSelectionIntoViewFunction\n  selection?: EditorSelection\n  spellCheck?: boolean\n}\n\n/**\n * @public\n *\n *\n * The core component that renders the editor. Must be placed within the {@link EditorProvider} component.\n *\n * @example\n * ```tsx\n * import { PortableTextEditable, EditorProvider } from '@portabletext/editor'\n *\n * function MyComponent() {\n *  return (\n *   <EditorProvider>\n *    <PortableTextEditable />\n *  </EditorProvider>\n *  )\n * }\n * ```\n * @group Components\n */\nexport const PortableTextEditable = forwardRef<\n  Omit<HTMLDivElement, 'as' | 'onPaste' | 'onBeforeInput'>,\n  PortableTextEditableProps\n>(function PortableTextEditable(props, forwardedRef) {\n  const {\n    hotkeys,\n    onBlur,\n    onFocus,\n    onBeforeInput,\n    onPaste,\n    onCopy,\n    onCut,\n    onClick,\n    onDragStart,\n    onDrag,\n    onDragEnd,\n    onDragEnter,\n    onDragOver,\n    onDrop,\n    onDragLeave,\n    rangeDecorations,\n    renderAnnotation,\n    renderBlock,\n    renderChild,\n    renderDecorator,\n    renderListItem,\n    renderPlaceholder,\n    renderStyle,\n    selection: propsSelection,\n    scrollSelectionIntoView,\n    spellCheck,\n    ...restProps\n  } = props\n\n  const portableTextEditor = usePortableTextEditor()\n  const ref = useRef<HTMLDivElement | null>(null)\n  const [editableElement, setEditableElement] = useState<HTMLDivElement | null>(\n    null,\n  )\n  const [hasInvalidValue, setHasInvalidValue] = useState(false)\n\n  // Forward ref to parent component\n  useImperativeHandle<HTMLDivElement | null, HTMLDivElement | null>(\n    forwardedRef,\n    () => ref.current,\n  )\n\n  const editorActor = useContext(EditorActorContext)\n  const relayActor = useContext(RelayActorContext)\n  const readOnly = useSelector(editorActor, (s) =>\n    s.matches({'edit mode': 'read only'}),\n  )\n  const slateEditor = useSlate()\n\n  const rangeDecorationsActor = useActorRef(rangeDecorationsMachine, {\n    input: {\n      rangeDecorations: rangeDecorations ?? [],\n      readOnly,\n      schema: editorActor.getSnapshot().context.schema,\n      slateEditor,\n      skipSetup: !editorActor.getSnapshot().matches({setup: 'setting up'}),\n    },\n  })\n  useSelector(rangeDecorationsActor, (s) => s.context.updateCount)\n  const decorate = useMemo(\n    () => createDecorate(rangeDecorationsActor),\n    [rangeDecorationsActor],\n  )\n\n  useEffect(() => {\n    rangeDecorationsActor.send({\n      type: 'update read only',\n      readOnly,\n    })\n  }, [rangeDecorationsActor, readOnly])\n\n  useEffect(() => {\n    rangeDecorationsActor.send({\n      type: 'range decorations updated',\n      rangeDecorations: rangeDecorations ?? [],\n    })\n  }, [rangeDecorationsActor, rangeDecorations])\n\n  // Output a minimal React editor inside Editable when in readOnly mode.\n  // NOTE: make sure all the plugins used here can be safely run over again at any point.\n  // There will be a problem if they redefine editor methods and then calling the original method within themselves.\n  useMemo(() => {\n    // React/UI-specific plugins\n    if (readOnly) {\n      return slateEditor\n    }\n    const withHotKeys = createWithHotkeys(\n      editorActor,\n      portableTextEditor,\n      hotkeys,\n    )\n\n    return withHotKeys(slateEditor)\n  }, [editorActor, hotkeys, portableTextEditor, readOnly, slateEditor])\n\n  const renderElement = useCallback(\n    (eProps: RenderElementProps) => (\n      <RenderElement\n        {...eProps}\n        readOnly={readOnly}\n        renderBlock={renderBlock}\n        renderChild={renderChild}\n        renderListItem={renderListItem}\n        renderStyle={renderStyle}\n        spellCheck={spellCheck}\n      />\n    ),\n    [\n      spellCheck,\n      readOnly,\n      renderBlock,\n      renderChild,\n      renderListItem,\n      renderStyle,\n    ],\n  )\n\n  const renderLeaf = useCallback(\n    (\n      leafProps: RenderLeafProps & {\n        leaf: Text & {placeholder?: boolean; rangeDecoration?: RangeDecoration}\n      },\n    ) => (\n      <RenderLeaf\n        {...leafProps}\n        readOnly={readOnly}\n        renderAnnotation={renderAnnotation}\n        renderChild={renderChild}\n        renderDecorator={renderDecorator}\n        renderPlaceholder={renderPlaceholder}\n      />\n    ),\n    [\n      readOnly,\n      renderAnnotation,\n      renderChild,\n      renderDecorator,\n      renderPlaceholder,\n    ],\n  )\n\n  const renderText = useCallback(\n    (props: RenderTextProps) => <RenderText {...props} />,\n    [],\n  )\n\n  const restoreSelectionFromProps = useCallback(() => {\n    if (propsSelection) {\n      debug(`Selection from props ${JSON.stringify(propsSelection)}`)\n      const normalizedSelection = normalizeSelection(\n        propsSelection,\n        fromSlateValue(\n          slateEditor.children,\n          editorActor.getSnapshot().context.schema.block.name,\n        ),\n      )\n      if (normalizedSelection !== null) {\n        debug(\n          `Normalized selection from props ${JSON.stringify(normalizedSelection)}`,\n        )\n        const slateRange = toSlateRange(normalizedSelection, slateEditor)\n        if (slateRange) {\n          Transforms.select(slateEditor, slateRange)\n          // Output selection here in those cases where the editor selection was the same, and there are no set_selection operations made.\n          // The selection is usually automatically emitted to change$ by the withPortableTextSelections plugin whenever there is a set_selection operation applied.\n          if (!slateEditor.operations.some((o) => o.type === 'set_selection')) {\n            editorActor.send({\n              type: 'update selection',\n              selection: normalizedSelection,\n            })\n          }\n          slateEditor.onChange()\n        }\n      }\n    }\n  }, [editorActor, propsSelection, slateEditor])\n\n  // Restore selection from props when the editor has been initialized properly with it's value\n  useEffect(() => {\n    const onReady = editorActor.on('ready', () => {\n      rangeDecorationsActor.send({\n        type: 'ready',\n      })\n\n      restoreSelectionFromProps()\n    })\n\n    const onInvalidValue = editorActor.on('invalid value', () => {\n      setHasInvalidValue(true)\n    })\n\n    const onValueChanged = editorActor.on('value changed', () => {\n      setHasInvalidValue(false)\n    })\n\n    return () => {\n      onReady.unsubscribe()\n      onInvalidValue.unsubscribe()\n      onValueChanged.unsubscribe()\n    }\n  }, [rangeDecorationsActor, editorActor, restoreSelectionFromProps])\n\n  // Restore selection from props when it changes\n  useEffect(() => {\n    if (propsSelection && !hasInvalidValue) {\n      restoreSelectionFromProps()\n    }\n  }, [hasInvalidValue, propsSelection, restoreSelectionFromProps])\n\n  // Handle from props onCopy function\n  const handleCopy = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): void | ReactEditor => {\n      if (onCopy) {\n        const result = onCopy(event)\n        // CopyFn may return something to avoid doing default stuff\n        if (result !== undefined) {\n          event.preventDefault()\n        }\n      } else if (event.nativeEvent.clipboardData) {\n        // Prevent Slate from handling the event\n        event.stopPropagation()\n        event.preventDefault()\n\n        const selection = slateEditor.selection\n          ? slateRangeToSelection({\n              schema: editorActor.getSnapshot().context.schema,\n              editor: slateEditor,\n              range: slateEditor.selection,\n            })\n          : undefined\n        const position = selection ? {selection} : undefined\n\n        if (!position) {\n          console.warn('Could not find position for copy event')\n          return\n        }\n\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'clipboard.copy',\n            originEvent: {\n              dataTransfer: event.nativeEvent.clipboardData,\n            },\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [onCopy, editorActor, slateEditor],\n  )\n\n  const handleCut = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>) => {\n      if (onCut) {\n        const result = onCut(event)\n        // CutFn may return something to avoid doing default stuff\n        if (result !== undefined) {\n          event.preventDefault()\n        }\n      } else if (event.nativeEvent.clipboardData) {\n        // Prevent Slate from handling the event\n        event.stopPropagation()\n        event.preventDefault()\n\n        const selection = editorActor.getSnapshot().context.selection\n        const position = selection ? {selection} : undefined\n\n        if (!position) {\n          console.warn('Could not find position for cut event')\n          return\n        }\n\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'clipboard.cut',\n            originEvent: {\n              dataTransfer: event.nativeEvent.clipboardData,\n            },\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [onCut, editorActor, slateEditor],\n  )\n\n  // Handle incoming pasting events in the editor\n  const handlePaste = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): Promise<void> | void => {\n      const value = fromSlateValue(\n        slateEditor.children,\n        editorActor.getSnapshot().context.schema.block.name,\n        KEY_TO_VALUE_ELEMENT.get(slateEditor),\n      )\n      const ptRange = slateEditor.selection\n        ? slateRangeToSelection({\n            schema: editorActor.getSnapshot().context.schema,\n            editor: slateEditor,\n            range: slateEditor.selection,\n          })\n        : null\n      const path = ptRange?.focus.path || []\n      const onPasteResult = onPaste?.({\n        event,\n        value,\n        path,\n        schemaTypes: portableTextEditor.schemaTypes,\n      })\n\n      if (onPasteResult || !slateEditor.selection) {\n        event.preventDefault()\n\n        // Resolve it as promise (can be either async promise or sync return value)\n        relayActor.send({type: 'loading'})\n\n        Promise.resolve(onPasteResult)\n          .then((result) => {\n            debug('Custom paste function from client resolved', result)\n\n            if (!result || !result.insert) {\n              debug('No result from custom paste handler, pasting normally')\n\n              const selection = editorActor.getSnapshot().context.selection\n              const position = selection ? {selection} : undefined\n\n              if (!position) {\n                console.warn('Could not find position for paste event')\n                return\n              }\n\n              editorActor.send({\n                type: 'behavior event',\n                behaviorEvent: {\n                  type: 'clipboard.paste',\n                  originEvent: {\n                    dataTransfer: event.clipboardData,\n                  },\n                  position,\n                },\n                editor: slateEditor,\n                nativeEvent: event,\n              })\n            } else if (result.insert) {\n              editorActor.send({\n                type: 'behavior event',\n                behaviorEvent: {\n                  type: 'insert.blocks',\n                  blocks: parseBlocks({\n                    context: {\n                      keyGenerator:\n                        editorActor.getSnapshot().context.keyGenerator,\n                      schema: editorActor.getSnapshot().context.schema,\n                    },\n                    blocks: result.insert,\n                    options: {\n                      refreshKeys: true,\n                      validateFields: true,\n                    },\n                  }),\n                  placement: 'auto',\n                },\n                editor: slateEditor,\n              })\n            } else {\n              console.warn(\n                'Your onPaste function returned something unexpected:',\n                result,\n              )\n            }\n          })\n          .catch((error) => {\n            console.warn(error)\n\n            return error\n          })\n          .finally(() => {\n            relayActor.send({type: 'done loading'})\n          })\n      } else if (event.nativeEvent.clipboardData) {\n        // Prevent Slate from handling the event\n        event.preventDefault()\n        event.stopPropagation()\n\n        const selection = editorActor.getSnapshot().context.selection\n        const position = selection ? {selection} : undefined\n\n        if (!position) {\n          console.warn('Could not find position for paste event')\n          return\n        }\n\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'clipboard.paste',\n            originEvent: {\n              dataTransfer: event.nativeEvent.clipboardData,\n            },\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n\n      debug('No result from custom paste handler, pasting normally')\n    },\n    [editorActor, onPaste, portableTextEditor, relayActor, slateEditor],\n  )\n\n  const handleOnFocus: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onFocus) {\n        onFocus(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        const selection = PortableTextEditor.getSelection(portableTextEditor)\n        // Create an editor selection if it does'nt exist\n        if (selection === null) {\n          Transforms.select(slateEditor, Editor.start(slateEditor, []))\n          slateEditor.onChange()\n        }\n        relayActor.send({type: 'focused', event})\n        const newSelection = PortableTextEditor.getSelection(portableTextEditor)\n        // If the selection is the same, emit it explicitly here as there is no actual onChange event triggered.\n        if (selection === newSelection) {\n          editorActor.send({\n            type: 'update selection',\n            selection,\n          })\n        }\n      }\n    },\n    [editorActor, onFocus, slateEditor, portableTextEditor, relayActor],\n  )\n\n  const handleClick = useCallback(\n    (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n      if (onClick) {\n        onClick(event)\n      }\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (position) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'mouse.click',\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [onClick, editorActor, slateEditor],\n  )\n\n  const handleOnBlur: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onBlur) {\n        onBlur(event)\n      }\n      if (!event.isPropagationStopped()) {\n        relayActor.send({type: 'blurred', event})\n      }\n    },\n    [relayActor, onBlur],\n  )\n\n  const handleOnBeforeInput = useCallback(\n    (event: InputEvent) => {\n      if (onBeforeInput) {\n        onBeforeInput(event)\n      }\n    },\n    [onBeforeInput],\n  )\n\n  // This function will handle unexpected DOM changes inside the Editable rendering,\n  // and make sure that we can maintain a stable slateEditor.selection when that happens.\n  //\n  // For example, if this Editable is rendered inside something that might re-render\n  // this component (hidden contexts) while the user is still actively changing the\n  // contentEditable, this could interfere with the intermediate DOM selection,\n  // which again could be picked up by ReactEditor's event listeners.\n  // If that range is invalid at that point, the slate.editorSelection could be\n  // set either wrong, or invalid, to which slateEditor will throw exceptions\n  // that are impossible to recover properly from or result in a wrong selection.\n  //\n  // Also the other way around, when the ReactEditor will try to create a DOM Range\n  // from the current slateEditor.selection, it may throw unrecoverable errors\n  // if the current editor.selection is invalid according to the DOM.\n  // If this is the case, default to selecting the top of the document, if the\n  // user already had a selection.\n  const validateSelection = useCallback(() => {\n    if (!slateEditor.selection) {\n      return\n    }\n    const root = ReactEditor.findDocumentOrShadowRoot(slateEditor)\n    const {activeElement} = root\n    // Return if the editor isn't the active element\n    if (ref.current !== activeElement) {\n      return\n    }\n    const window = ReactEditor.getWindow(slateEditor)\n    const domSelection = window.getSelection()\n    if (!domSelection || domSelection.rangeCount === 0) {\n      return\n    }\n    const existingDOMRange = domSelection.getRangeAt(0)\n    try {\n      const newDOMRange = ReactEditor.toDOMRange(\n        slateEditor,\n        slateEditor.selection,\n      )\n      if (\n        newDOMRange.startOffset !== existingDOMRange.startOffset ||\n        newDOMRange.endOffset !== existingDOMRange.endOffset\n      ) {\n        debug('DOM range out of sync, validating selection')\n        // Remove all ranges temporary\n        domSelection?.removeAllRanges()\n        // Set the correct range\n        domSelection.addRange(newDOMRange)\n      }\n    } catch {\n      debug(`Could not resolve selection, selecting top document`)\n      // Deselect the editor\n      Transforms.deselect(slateEditor)\n      // Select top document if there is a top block to select\n      if (slateEditor.children.length > 0) {\n        Transforms.select(slateEditor, [0, 0])\n      }\n      slateEditor.onChange()\n    }\n  }, [ref, slateEditor])\n\n  // Observe mutations (child list and subtree) to this component's DOM,\n  // and make sure the editor selection is valid when that happens.\n  useEffect(() => {\n    if (editableElement) {\n      const mutationObserver = new MutationObserver(validateSelection)\n      mutationObserver.observe(editableElement, {\n        attributeOldValue: false,\n        attributes: false,\n        characterData: false,\n        childList: true,\n        subtree: true,\n      })\n      return () => {\n        mutationObserver.disconnect()\n      }\n    }\n    return undefined\n  }, [validateSelection, editableElement])\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (props.onKeyDown) {\n        props.onKeyDown(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        slateEditor.pteWithHotKeys(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'keyboard.keydown',\n            originEvent: {\n              key: event.key,\n              code: event.code,\n              altKey: event.altKey,\n              ctrlKey: event.ctrlKey,\n              metaKey: event.metaKey,\n              shiftKey: event.shiftKey,\n            },\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [props, editorActor, slateEditor],\n  )\n\n  const handleKeyUp = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (props.onKeyUp) {\n        props.onKeyUp(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'keyboard.keyup',\n            originEvent: {\n              key: event.key,\n              code: event.code,\n              altKey: event.altKey,\n              ctrlKey: event.ctrlKey,\n              metaKey: event.metaKey,\n              shiftKey: event.shiftKey,\n            },\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [props, editorActor, slateEditor],\n  )\n\n  const scrollSelectionIntoViewToSlate = useMemo(() => {\n    // Use slate-react default scroll into view\n    if (scrollSelectionIntoView === undefined) {\n      return undefined\n    }\n    // Disable scroll into view totally\n    if (scrollSelectionIntoView === null) {\n      return noop\n    }\n    // Translate PortableTextEditor prop fn to Slate plugin fn\n    return (_editor: ReactEditor, domRange: Range) => {\n      scrollSelectionIntoView(portableTextEditor, domRange)\n    }\n  }, [portableTextEditor, scrollSelectionIntoView])\n\n  // Set the forwarded ref to be the Slate editable DOM element\n  // Also set the editable element in a state so that the MutationObserver\n  // is setup when this element is ready.\n  useEffect(() => {\n    ref.current = ReactEditor.toDOMNode(\n      slateEditor,\n      slateEditor,\n    ) as HTMLDivElement | null\n    setEditableElement(ref.current)\n  }, [slateEditor, ref])\n\n  useEffect(() => {\n    const window = ReactEditor.getWindow(slateEditor)\n\n    const onDragEnd = () => {\n      editorActor.send({type: 'dragend'})\n    }\n    const onDrop = () => {\n      editorActor.send({type: 'drop'})\n    }\n\n    window.document.addEventListener('dragend', onDragEnd)\n    window.document.addEventListener('drop', onDrop)\n\n    return () => {\n      window.document.removeEventListener('dragend', onDragEnd)\n      window.document.removeEventListener('drop', onDrop)\n    }\n  }, [slateEditor, editorActor])\n\n  const handleDragStart = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragStart?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        console.warn('Could not find position for dragstart event')\n        return\n      }\n\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: slateEditor,\n      })\n      const dragSelection = getDragSelection({\n        eventSelection: position.selection,\n        snapshot,\n      })\n\n      const selectingEntireBlocks = selectors.isSelectingEntireBlocks({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragSelection,\n        },\n      })\n\n      const dragGhost = document.createElement('div')\n\n      const draggedDomNodes = getSelectionDomNodes({\n        snapshot: {\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: dragSelection,\n          },\n        },\n        slateEditor,\n      })\n\n      if (selectingEntireBlocks) {\n        // Clone the DOM Nodes so they won't be visually clipped by scroll-containers etc.\n        const clonedBlockNodes = draggedDomNodes.blockNodes.map((node) =>\n          node.cloneNode(true),\n        )\n\n        for (const block of clonedBlockNodes) {\n          if (block instanceof HTMLElement) {\n            block.style.position = 'relative'\n          }\n          dragGhost.appendChild(block)\n        }\n\n        // A custom drag ghost element can be configured using this data attribute\n        const customGhost = dragGhost.querySelector(\n          '[data-pt-drag-ghost-element]',\n        )\n        if (customGhost) {\n          dragGhost.replaceChildren(customGhost)\n        }\n\n        // Setting the `data-dragged` attribute so the consumer can style the element while it’s dragged\n        dragGhost.setAttribute('data-dragged', '')\n\n        dragGhost.style.position = 'absolute'\n        dragGhost.style.left = '-99999px'\n        dragGhost.style.boxSizing = 'border-box'\n        document.body.appendChild(dragGhost)\n\n        if (customGhost) {\n          const customGhostRect = customGhost.getBoundingClientRect()\n          const x = event.clientX - customGhostRect.left\n          const y = event.clientY - customGhostRect.top\n          dragGhost.style.width = `${customGhostRect.width}px`\n          dragGhost.style.height = `${customGhostRect.height}px`\n          event.dataTransfer.setDragImage(dragGhost, x, y)\n        } else {\n          const blocksDomRect = getCompoundClientRect(\n            draggedDomNodes.blockNodes,\n          )\n          const x = event.clientX - blocksDomRect.left\n          const y = event.clientY - blocksDomRect.top\n          dragGhost.style.width = `${blocksDomRect.width}px`\n          dragGhost.style.height = `${blocksDomRect.height}px`\n          event.dataTransfer.setDragImage(dragGhost, x, y)\n        }\n      } else {\n        const clonedChildNodes = draggedDomNodes.childNodes.map((node) =>\n          node.cloneNode(true),\n        )\n\n        for (const child of clonedChildNodes) {\n          dragGhost.appendChild(child)\n        }\n\n        dragGhost.style.position = 'absolute'\n        dragGhost.style.left = '-99999px'\n        dragGhost.style.boxSizing = 'border-box'\n        document.body.appendChild(dragGhost)\n\n        const childrenDomRect = getCompoundClientRect(\n          draggedDomNodes.childNodes,\n        )\n        const x = event.clientX - childrenDomRect.left\n        const y = event.clientY - childrenDomRect.top\n        dragGhost.style.width = `${childrenDomRect.width}px`\n        dragGhost.style.height = `${childrenDomRect.height}px`\n\n        event.dataTransfer.setDragImage(dragGhost, x, y)\n      }\n\n      // Select drag selection\n      // If the selection is expanded then we just select the end of the\n      // selection\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'select',\n          at: isSelectionCollapsed(dragSelection)\n            ? dragSelection\n            : {\n                anchor: getSelectionEndPoint(dragSelection),\n                focus: getSelectionEndPoint(dragSelection),\n                backward: false,\n              },\n        },\n        editor: slateEditor,\n      })\n\n      editorActor.send({\n        type: 'dragstart',\n        origin: {\n          selection: dragSelection,\n        },\n        ghost: dragGhost,\n      })\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragstart',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n          position: {\n            selection: dragSelection,\n          },\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragStart, editorActor, slateEditor],\n  )\n\n  const handleDrag = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDrag?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.drag',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDrag, editorActor, slateEditor],\n  )\n\n  const handleDragEnd = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragEnd?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragend',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragEnd, editorActor, slateEditor],\n  )\n\n  const handleDragEnter = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragEnter?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragenter',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n          position,\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragEnter, editorActor, slateEditor],\n  )\n\n  const handleDragOver = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragOver?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragover',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n          position,\n        },\n        editor: slateEditor,\n        nativeEvent: event,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragOver, editorActor, slateEditor],\n  )\n\n  const handleDrop = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDrop?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        console.warn('Could not find position for drop event')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.drop',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n          position,\n        },\n        editor: slateEditor,\n        nativeEvent: event,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDrop, editorActor, slateEditor],\n  )\n\n  const handleDragLeave = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragLeave?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragleave',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragLeave, editorActor, slateEditor],\n  )\n\n  if (!portableTextEditor) {\n    return null\n  }\n\n  return hasInvalidValue ? null : (\n    <SlateEditable\n      {...restProps}\n      data-read-only={readOnly}\n      autoFocus={false}\n      className={restProps.className || 'pt-editable'}\n      decorate={decorate}\n      onBlur={handleOnBlur}\n      onCopy={handleCopy}\n      onCut={handleCut}\n      onClick={handleClick}\n      onDOMBeforeInput={handleOnBeforeInput}\n      onDragStart={handleDragStart}\n      onDrag={handleDrag}\n      onDragEnd={handleDragEnd}\n      onDragEnter={handleDragEnter}\n      onDragOver={handleDragOver}\n      onDrop={handleDrop}\n      onDragLeave={handleDragLeave}\n      onFocus={handleOnFocus}\n      onKeyDown={handleKeyDown}\n      onKeyUp={handleKeyUp}\n      onPaste={handlePaste}\n      readOnly={readOnly}\n      // We have implemented our own placeholder logic with decorations.\n      // This 'renderPlaceholder' should not be used.\n      renderPlaceholder={undefined}\n      renderElement={renderElement}\n      renderLeaf={renderLeaf}\n      renderText={renderText}\n      scrollSelectionIntoView={scrollSelectionIntoViewToSlate}\n    />\n  )\n})\n\nPortableTextEditable.displayName = 'ForwardRef(PortableTextEditable)'\n","import React from 'react'\n\ntype ConstantRef<TConstant> = {constant: TConstant}\n\nexport default function useConstant<TConstant>(\n  factory: () => TConstant,\n): TConstant {\n  const ref = React.useRef<ConstantRef<TConstant>>(null)\n\n  if (!ref.current) {\n    ref.current = {constant: factory()}\n  }\n\n  return ref.current.constant\n}\n","import type React from 'react'\nimport {useEffect} from 'react'\nimport {Slate} from 'slate-react'\nimport type {EditorConfig} from '../editor'\nimport {stopActor} from '../internal-utils/stop-actor'\nimport useConstant from '../internal-utils/use-constant'\nimport {createInternalEditor} from './create-editor'\nimport {EditorActorContext} from './editor-actor-context'\nimport {EditorContext} from './editor-context'\nimport {PortableTextEditorContext} from './hooks/usePortableTextEditor'\nimport {PortableTextEditorSelectionProvider} from './hooks/usePortableTextEditorSelection'\nimport {\n  PortableTextEditor,\n  type PortableTextEditorProps,\n} from './PortableTextEditor'\nimport {RelayActorContext} from './relay-actor-context'\nimport {RouteEventsToChanges} from './route-events-to-changes'\n\n/**\n * @public\n */\nexport type EditorProviderProps = {\n  initialConfig: EditorConfig\n  children?: React.ReactNode\n}\n\n/**\n * @public\n * The EditorProvider component is used to set up the editor context and configure the Portable Text Editor.\n * @example\n * ```tsx\n * import {EditorProvider} from '@portabletext/editor'\n *\n * function App() {\n *  return (\n *    <EditorProvider initialConfig={{ ... }} >\n *      ...\n *    </EditorProvider>\n *  )\n * }\n *\n * ```\n * @group Components\n */\nexport function EditorProvider(props: EditorProviderProps) {\n  const {internalEditor, portableTextEditor} = useConstant(() => {\n    const internalEditor = createInternalEditor(props.initialConfig)\n    const portableTextEditor = new PortableTextEditor({\n      editor: internalEditor.editor,\n    } as unknown as PortableTextEditorProps)\n\n    return {internalEditor, portableTextEditor}\n  })\n\n  useEffect(() => {\n    const unsubscribers: Array<() => void> = []\n\n    for (const subscription of internalEditor.subscriptions) {\n      unsubscribers.push(subscription())\n    }\n\n    internalEditor.actors.editorActor.start()\n    internalEditor.actors.mutationActor.start()\n    internalEditor.actors.relayActor.start()\n    internalEditor.actors.syncActor.start()\n\n    return () => {\n      for (const unsubscribe of unsubscribers) {\n        unsubscribe()\n      }\n\n      stopActor(internalEditor.actors.editorActor)\n      stopActor(internalEditor.actors.mutationActor)\n      stopActor(internalEditor.actors.relayActor)\n      stopActor(internalEditor.actors.syncActor)\n    }\n  }, [internalEditor])\n\n  return (\n    <EditorContext.Provider value={internalEditor.editor}>\n      <RouteEventsToChanges\n        relayActor={internalEditor.actors.relayActor}\n        onChange={(change) => {\n          portableTextEditor.change$.next(change)\n        }}\n      />\n      <EditorActorContext.Provider value={internalEditor.actors.editorActor}>\n        <RelayActorContext.Provider value={internalEditor.actors.relayActor}>\n          <Slate\n            editor={internalEditor.editor._internal.slateEditor.instance}\n            initialValue={\n              internalEditor.editor._internal.slateEditor.initialValue\n            }\n          >\n            <PortableTextEditorContext.Provider value={portableTextEditor}>\n              <PortableTextEditorSelectionProvider\n                editorActor={internalEditor.actors.editorActor}\n              >\n                {props.children}\n              </PortableTextEditorSelectionProvider>\n            </PortableTextEditorContext.Provider>\n          </Slate>\n        </RelayActorContext.Provider>\n      </EditorActorContext.Provider>\n    </EditorContext.Provider>\n  )\n}\n"],"names":["EditorEventListener","props","$","_c","editor","useEditor","on","useEffectEvent","t0","subscription","unsubscribe","t1","useEffect","getCompoundClientRect","nodes","length","DOMRect","elements","filter","node","Element","firstRect","at","getBoundingClientRect","left","top","right","bottom","i","rect","Math","min","max","rootName","debug","debugWithName","name","namespace","enabled","getDragSelection","eventSelection","snapshot","dragSelection","selectors","context","selection","draggingCollapsedSelection","draggedTextBlock","draggedSpan","anchor","utils","block","focus","selectedBlocks","selectionStartBlock","selectionEndBlock","selectionStartPoint","selectionEndPoint","EMPTY_MARKDEFS","VOID_CHILD_KEY","keepObjectEquality","object","keyMap","value","_key","isEqual","toSlateValue","schemaTypes","Array","isArray","map","_type","rest","textBlock","hasInlines","hasMissingStyle","style","hasMissingMarkDefs","markDefs","hasMissingChildren","children","child","cType","cKey","cRest","text","marks","__inline","isElement","styles","fromSlateValue","textBlockType","Error","_cType","v","k","t","_i","blockValue","isEqualToEmptyEditor","undefined","Text","isText","join","getFocusBlock","Editor","path","slice","getFocusSpan","isTextSpan","getSelectedSpans","from","match","getSelectionStartBlock","Range","start","getPointBlock","point","getSelectionEndBlock","end","getFocusChild","focusBlock","focusBlockPath","childIndex","focusChild","Node","getPointChild","blockPath","pointChild","getFirstBlock","firstBlockPath","getLastBlock","lastBlockPath","getNodeBlock","schema","isEditor","isBlockElement","elementToBlock","element","parent","mode","n","some","isInline","blockObjects","blockObject","isListItemActive","listItem","isTextBlock","every","isListBlock","isStyleActive","slateRangeToSelection","range","anchorBlock","anchorChild","offset","backward","isBackward","push","getEventPosition","editorActor","slateEditor","event","getSnapshot","matches","setup","getEventNode","positionBlock","getEventPositionBlock","getEventSelection","focusBlockKey","DOMEditor","hasTarget","target","toSlateNode","firstBlock","firstBlockRect","toDOMNode","pageY","lastBlock","lastBlockRef","elementRect","height","abs","getSlateRangeFromEvent","isDOMNode","window","getWindow","domRange","document","caretPositionFromPoint","position","clientX","clientY","createRange","setStart","offsetNode","setEnd","caretRangeFromPoint","console","warn","toSlateRange","exactMatch","suppressThrow","toSlatePath","isKeySegment","isVoid","childPath","findIndex","concat","moveRangeByOperation","operation","Point","transform","equals","normalizePoint","newPath","newOffset","blockKey","childKey","find","blk","cld","normalizeSelection","newAnchor","newFocus","getSelectionDomNodes","blockNodes","childNodes","blockEntries","childEntries","isBlock","blockNode","childNode","IS_PROCESSING_REMOTE_CHANGES","WeakMap","KEY_TO_SLATE_ELEMENT","KEY_TO_VALUE_ELEMENT","SLATE_TO_PORTABLE_TEXT_RANGE","EditorActorContext","createContext","DropIndicator","Symbol","for","width","borderBottom","zIndex","RenderDefaultBlockObject","userSelect","RenderDefaultInlineObject","inlineObject","defaultKeyGenerator","randomKey","getByteHexTable","table","toString","whatwgRNG","rnds8","Uint8Array","getRandomValues","reduce","str","createEditorPriority","config","id","reference","corePriority","createCoreBlockElementBehaviorsConfig","key","onSetDragPositionBlock","behavior","defineBehavior","guard","dropFocusBlock","dragOrigin","beta","internalDrag","origin","draggedBlock","actions","type","effect","priority","importance","forward","useCoreBlockElementBehaviors","useContext","t2","behaviorConfigs","behaviorConfig","send","behaviorConfig_0","RenderBlockObject","dragPositionBlock","setDragPositionBlock","useState","blockObjectRef","useRef","useSlateStatic","selected","useSelected","legacySchemaType","useSelector","s","getLegacySchema","error","focused","isCollapsed","attributes","readOnly","renderBlock","editorElementRef","schemaType","RenderInlineObject","inlineObjectRef","inlineObjects","findPath","display","renderChild","annotations","RenderTextBlock","blockRef","legacySchema","legacyBlockSchemaType","renderStyle","legacyStyleSchemaType","renderListItem","legacyListItemSchemaType","lists","list","level","spellCheck","RenderElement","_temp","parseInlineObject","keyGenerator","_temp2","options","refreshKeys","validateFields","parseTextBlock","_temp3","parseBlockObject","_temp4","t3","PortableTextEditorContext","usePortableTextEditor","forEachActor","actorRef","callback","Object","values","forEach","stopActor","persistedSnapshots","ref","observers","Set","systemSnapshot","system","stop","_snapshot","_processingStatus","converterJson","mimeType","serialize","portableTextConverter","converters","converter","originEvent","reason","deserialize","converterPortableText","blocks","sliceBlocks","data","JSON","stringify","parse","parsedBlocks","flatMap","parsedBlock","parseBlock","hasTag","createConverterTextHtml","html","toHTML","onMissingComponent","components","unknownType","htmlToBlocks","portableText","unstable_whitespaceOnPasteMode","createConverterTextPlain","span","inlineObjectType","title","blockObjectType","textToHtml","escapeHtml","split","line","replace","entityMap","String","createCoreConverters","compileType","rawType","Schema","compile","types","get","createPlaceholderBlock","getActiveAnnotations","markState","mark","decorators","decorator","includes","getActiveDecorators","decoratorState","activeDecorators","activeDecorator","insertTextOperationImplementation","activeAnnotations","focusSpan","Transforms","insertText","state","markStateDecorators","insertNodes","isPortableTextSpan","isPortableTextBlock","def","getPreviousSpan","spanPath","previousSpan","reverse","Path","isBefore","getNextSpan","nextSpan","isAfter","withRemoteChanges","fn","prev","isChangingRemotely","set","IS_UDOING","IS_REDOING","withUndoing","isUndoing","setIsUndoing","withRedoing","isRedoing","setIsRedoing","defaultCompare","a","b","useEditorSelector","selector","compare","editorActorSnapshot","getEditorSnapshot","slateEditorInstance","_internal","instance","tag","createWithPortableTextMarkModel","apply","normalizeNode","nodeEntry","nextNode","mergeNodes","voids","setNodes","orphanedAnnotations","markDefKeys","newMarkDefs","markDef","has","add","operations","op","properties","newProperties","previousSelectionIsCollapsed","newSelectionIsCollapsed","newFocusSpan","movedToNextSpan","movedToPreviousSpan","_block","depth","previousSpanAnnotations","nextSpanAnnotations","annotationsEnding","annotation","atTheEndOfAnnotation","annotationsStarting","atTheStartOfAnnotation","nextSpanDecorators","isExpanded","spanHasAnnotations","deletingFromTheEnd","deletingAllText","previousSpanHasSameAnnotation","nextSpanHasSameAnnotation","withoutNormalizing","onChange","targetBlock","targetPath","oldDefs","uniq","removeDecoratorOperationImplementation","hanging","eMark","lonelyEmptySpan","existingMarksWithoutDecorator","existingMark","cloneDiff","diff2","patch","CURRENT_UNDO_STEP","withUndoStep","current","undoStepId","getCurrentUndoStepId","SAVING","REMOTE_PATCHES","UNDO_STEP_LIMIT","isSaving","getRemotePatches","createWithUndoRedo","previousSnapshot","remotePatches","previousUndoStepId","subscriptions","sub","patches","reset","history","undos","redos","splice","time","Date","step","lastOp","overwrite","shouldOverwrite","save","currentUndoStepId","merge","shouldMerge","newStep","createSelectOperation","timestamp","shift","shouldClear","historyUndoOperationImplementation","otherPatches","item","transformedOperations","flatten","transformOperation","reversedOperations","Operation","inverse","withoutSaving","err","deselect","pop","historyRedoOperationImplementation","transformedOperation","insertBlockIndex","items","adjustBlockPath","unsetBlockIndex","operationTargetBlock","findOperationTargetBlock","parsePatch","diffPatch","adjustOffsetBy","changedOffset","utf8Start1","diffs","diff","index","diffType","DIFF_INSERT","DIFF_DELETE","DIFF_EQUAL","dType","currentFocus","currentAnchor","blockIndex","addAnnotationOperationImplementation","parsedAnnotation","parseAnnotation","paths","markDefPath","markDefPaths","annotationKey","unshift","existingSameTypeAnnotations","removeAnnotationOperationImplementation","potentialAnnotations","selectedChild","selectedChildPath","annotationToRemove","previousSpansWithSameAnnotation","nextSpansWithSameAnnotation","marksWithoutAnnotation","blockSetOperationImplementation","location","filteredProps","updatedBlock","slateBlock","blockUnsetOperationImplementation","propsToRemove","prop","updatedTextBlock","omit","propsToSet","updatedBlockObject","decoratorAddOperationImplementation","manualAnchor","blockOffset","direction","manualFocus","manualSelection","editorSelection","anchorOffset","selectionPoint","focusOffset","newValue","newSelection","offsets","trimmedSelection","newRange","splitTextNodes","isRange","existingMarks","deleteOperationImplementation","delete","deleteBackwardOperationImplementation","unit","deleteBlockOperationImplementation","removeNodes","deleteForwardOperationImplementation","insertInlineObjectOperationImplementation","parsedInlineObject","focusTextBlock","insertSpanOperationImplementation","insertBlockOperationImplementation","fragment","placement","select","insertBlock","startBlock","startBlockPath","endBlock","endBlockPath","nextPath","selectionBefore","insertFragment","currentSelection","endBlockEndPoint","adjustedSelection","next","endBlockStartPoint","moveBackwardOperationImplementation","move","distance","moveBlockOperationImplementation","to","moveNodes","moveForwardOperationImplementation","selectOperationImplementation","behaviorOperationImplementations","performOperation","message","CURRENT_OPERATION_ID","withApplyingBehaviorOperations","getCurrentOperationId","isApplyingBehaviorOperations","createWithEventListeners","maxBlocks","deleteBackward","behaviorEvent","deleteForward","insertBreak","insertData","dataTransfer","insertSoftBreak","redo","setFragmentData","undo","createWithMaxBlocks","rows","createWithObjectKeys","existingKeys","descendants","entry","debugVerbose","createApplyPatch","changed","insertPatch","unsetPatch","setPatch","diffMatchPatch","findBlockAndChildFromPath","diffMatchPatchApplyPatches","allowExceedingIndices","cleanupEfficiency","makeDiff","debugState","targetChild","targetBlockPath","targetChildPath","blocksToInsert","targetBlockIndex","normalizedIdx","editorWasEmptyBefore","childrenToInsert","targetChildIndex","childInsertPath","newText","nextRest","prevChildren","prevRest","c","cIndex","newVal","applyAll","previousSelection","_","pteCreateTextBlock","isKeyedSegment","segment","stateName","findBlockFromPath","isMatch","insertTextPatch","beforeValue","textChild","isSpan","prevBlock","prevChild","prevText","removeTextPatch","beforeBlock","prevTextChild","setNodePatch","setNode","omitBy","isUndefined","keys","keyName","val","indexOf","insertNodePatch","targetKey","insert","setIfMissing","splitNodePatch","splitBlock","oldBlock","targetValue","unset","splitSpan","targetSpans","removeNodePatch","spanToRemove","mergeNodePatch","newBlock","updatedSpan","removedSpan","moveNodePatch","childToInsert","PATCHING","withoutPatching","isPatching","createWithPatches","relayActor","previousChildren","applyPatch","bufferedPatches","handleBufferedRemotePatches","normalize","handlePatches","p","editorWasEmpty","editorIsEmpty","previousValue","operationId","createWithPlaceholderBlock","insertNode","createWithPortableTextBlockStyle","defaultStyle","SlateText","createWithPortableTextSelections","prevSelection","emitPortableTextSelection","ptRange","existing","createWithSchemaTypes","obj","createWithUtils","getMarkState","selectedSpans","marksWithoutAnnotations","spanIsEmpty","atTheBeginningOfSpan","atTheEndOfSpan","spanAnnotations","previousSpanHasAnnotations","previousSpanHasSameAnnotations","previousSpanHasSameMarks","nextSpanSharesSomeAnnotations","pluginUpdateMarkState","isEditorNode","isTextBlockNode","isTypedObject","isSpanNode","isPartialSpanNode","isObjectNode","getBlock","root","getNode","getSpan","getParent","parentPath","applyOperationToPortableText","draft","createDraft","e","finishDraft","applyOperationToPortableTextDraft","insertedNode","before","after","prevPath","previous","isAncestor","truePath","newParent","newIndex","valueBefore","valueAfter","hasOwnProperty","newTextBlockNode","newSpanNode","pluginUpdateValue","withPlugins","withObjectKeys","withSchemaTypes","withPatches","withMaxBlocks","withUndoRedo","withPortableTextMarkModel","withPortableTextBlockStyle","withPlaceholderBlock","withUtils","withPortableTextSelections","createSlateEditor","withReact","createEditor","initialValue","addAnnotationOnCollapsedSelection","caretWordSelection","raise","coreAnnotationBehaviors","IS_MAC","test","navigator","userAgent","modifiers","alt","control","meta","aliases","break","cmd","command","ctl","ctrl","del","down","esc","ins","mod","opt","option","return","space","spacebar","up","win","windows","keyCodes","isHotkey","hotkey","compareHotkey","parseHotkey","parsedHotkey","altKey","ctrlKey","metaKey","shiftKey","hotkeySegments","rawHotkeySegment","optional","endsWith","hotkeySegment","toKeyName","modifier","alias","code","TypeError","keyCode","toKeyCode","toLowerCase","toUpperCase","charCodeAt","arrowDownOnLonelyBlockObject","focusBlockObject","nextBlock","arrowUpOnLonelyBlockObject","previousBlock","breakingBlockObject","clickingAboveLonelyBlockObject","clickingBelowLonelyBlockObject","deletingEmptyTextBlockAfterBlockObject","selectionCollapsed","isEmptyTextBlock","deletingEmptyTextBlockBeforeBlockObject","coreBlockObjectBehaviors","coreDecoratorBehaviors","strongShortcut","emShortcut","underlineShortcut","codeShortcut","coreDndBehaviors","breakingAtTheEndOfTextBlock","atTheEndOfBlock","focusListItem","focusLevel","breakingAtTheStartOfTextBlock","focusDecorators","focusAnnotations","breakingEntireDocument","firstBlockStartPoint","lastBlockEndPoint","breakingEntireBlocks","startBlockStartPoint","coreInsertBreakBehaviors","MAX_LIST_LEVEL","clearListOnBackspace","unindentListOnBackspace","clearListOnEnter","focusListBlock","indentListOnTab","selectedListBlocks","selectedListBlock","unindentListOnShiftTab","coreListBehaviors","coreBehaviorsConfig","abstractAnnotationBehaviors","isActiveAnnotation","abstractDecoratorBehaviors","isActiveDecorator","blockOffsetsToSelection","abstractDeleteBehaviors","abstractInsertBehaviors","getFocusTextBlock","keyIs","lineBreak","abstractKeyboardBehaviors","abstractListItemBehaviors","selectedTextBlocks","getSelectedTextBlocks","isActiveListItem","abstractMoveBehaviors","getPreviousBlock","getNextBlock","abstractSelectBehaviors","getBlockEndPoint","getBlockStartPoint","abstractSplitBehaviors","getSelectionStartPoint","getSelectionEndPoint","blockEndPoint","newTextBlockSelection","newTextBlock","abstractStyleBehaviors","isActiveStyle","raiseDeserializationSuccessOrFailure","success","failures","getData","deserializeEvent","failure","raiseSerializationSuccessOrFailure","serializeEvents","serializeEvent","abstractBehaviors","setData","dropPosition","droppingOnDragOrigin","draggingEntireBlocks","draggedBlocks","textRuns","getTextBlockText","textRun","isSyntheticBehaviorEvent","isCustomBehaviorEvent","isNativeBehaviorEvent","isAbstractBehaviorEvent","abstractBehaviorEventTypes","nativeBehaviorEventTypes","startsWith","eventCategory","performEvent","behaviors","remainingEventBehaviors","nativeEvent","eventBehaviors","listenedNamespace","eventNamespace","preventDefault","guardSnapshot","nativeEventPrevented","defaultBehaviorOverwritten","eventBehaviorIndex","eventBehavior","shouldRun","actionSet","actionsSnapshot","action","sortByPriority","itemsWithPriority","itemsWithoutPriority","itemsByPriorityId","Map","graph","inDegree","ensureNode","addEdge","fromId","toId","visited","refId","queue","degree","result","currentId","currentItem","neighborId","newDegree","createEditorSnapshot","editorMachine","events","emitted","input","tags","assign","assertEvent","enqueueActions","enqueue","emit","pendingEvents","pendingIncomingPatchesEvents","handle blur","blur","handle focus","handle behavior event","self","guards","slate is busy","createMachine","initialReadOnly","states","initial","exit","dragstart","ghost","always","parentNode","removeChild","dragend","drop","pristine","idle","normalizing","dirty","createLegacySchema","portableTextType","blockType","of","findBlockType","childrenField","fields","field","ofType","spanType","memberType","inlineObjectTypes","blockObjectTypes","resolveEnabledStyles","resolveEnabledDecorators","resolveEnabledListItems","styleField","btField","textStyles","listField","listItems","defineSchema","definition","temporaryImageName","temporaryUrlName","temporaryObjectNames","image","url","objectNames","defaultObjectTitles","legacySchemaToEditorSchema","jsonType","compileSchemaDefinitionToLegacySchema","defineType","portableTextSchema","defineField","startCase","SanitySchema","pteSchema","mutationMachine","bulk","pendingMutations","lastBulk","pendingPatchEvents","actors","fromCallback","sendBack","originalApply","is read-only","stateIn","typing","no pending mutations","slate is normalizing","isNormalizing","delays","process","env","NODE_ENV","invoke","src","reenter","mutations","and","not","createEditableAPI","toggleMark","toggleList","toggleBlockStyle","isMarkActive","slateSelection","descendant","insertChild","focusChildPath","focusNode","hasBlockStyle","hasListStyle","findByPath","slatePath","ptBlock","ptChild","findDOMNode","ReactEditor","spans","isAnnotationActive","annotationType","addAnnotation","SlateElement","removeAnnotation","getSelection","getValue","isCollapsedSelection","isExpandedSelection","getFragment","isSelectionsOverlapping","selectionA","selectionB","rangeA","rangeB","selectionMarkDefs","accMarkDefs","markKey","relayMachine","validateValue","resolution","valid","validChildTypes","validBlockTypes","description","i18n","isPlainObject","currentBlockTypeName","expectedTypeName","typeName","newSpan","autoResolve","allUsedMarks","unusedMarkDefs","markDefKey","m","orphanedMarks","dec","spanChildren","orphaned","cMrk","newChild","childType","syncValueCallback","streamBlocks","syncValueLogic","syncMachine","initialValueSynced","pendingValue","initial value synced","is busy","editable","isProcessingLocalChanges","isChanging","isBusy","is empty value","is empty array","is new value","value changed while syncing","pending value equals previous value","busy","syncing","updateValue","doneSyncing","isChanged","isValid","hadSelection","childrenLength","slateValueFromProps","Promise","resolve","removeExtraBlocks","currentBlock","currentBlockIndex","getStreamedBlocks","slateValue","blockChanged","blockValid","syncBlock","setTimeout","hasChanges","validationValue","validation","_updateBlock","_replaceBlock","selectionFocusOnBlock","oldBlockChildrenLength","currentBlockChild","currentBlockChildIndex","oldBlockChild","isChildChanged","isTextChanged","createInternalEditor","createActor","editorConfigToMachineInput","mutationActor","syncActor","createActors","registerBehavior","behaviorConfigWithPriority","listener","compileSchemasFromEditorConfig","schemaDefinition","subscribe","PortableTextEditorSelectionContext","usePortableTextEditorSelection","PortableTextEditorSelectionProvider","setSelection","startTransition","RelayActorContext","RouteEventsToChanges","change","handleChange","change_0","eventToChange","isLoading","PortableTextEditor","Component","displayName","change$","Subject","unsubscribers","constructor","Number","parseInt","componentDidMount","relayActorSubscription","componentDidUpdate","prevProps","editorRef","componentWillUnmount","setEditable","render","legacyPatches","incomingPatches$","patches$","blockStyle","listStyle","isObjectPath","_editor","isChildObjectEditPath","RoutePatchesObservableToEditorActor","payload","RenderSpan","spanRef","portableTextEditor","blockSelected","setFocused","setSelected","useMemo","leaf","decoratorSchemaTypes","annotationMarkDefs","shouldTrackSelectionAndFocus","sel","setSelectedFromRange","useCallback","winSelection","rangeCount","getRangeAt","intersectsNode","onBlur","onFocus","onSelection","legacyDecoratorSchemaType","renderDecorator","annotationMarkDef","legacyAnnotationSchemaType","renderAnnotation","_child","PLACEHOLDER_STYLE","pointerEvents","RenderLeaf","renderedSpan","renderPlaceholder","placeholder","rangeDecoration","component","RenderText","createWithHotkeys","hotkeysFromOptions","reservedHotkeys","activeHotkeys","pteWithHotKeys","cat","possibleMark","possibleCommand","slateOperationCallback","rangeDecorationsMachine","pendingRangeDecorations","rangeDecorations","decoratedRanges","rangeDecorationState","slateRange","onMoved","decoratedRange","newRangeSelection","updateCount","has pending range decorations","has range decorations","has different decorations","existingRangeDecorations","newRangeDecorations","not read only","should skip setup","skipSetup","createDecorate","rangeDecorationActor","intersection","PortableTextEditable","forwardRef","forwardedRef","hotkeys","onBeforeInput","onPaste","onCopy","onCut","onClick","onDragStart","onDrag","onDragEnd","onDragEnter","onDragOver","onDrop","onDragLeave","propsSelection","scrollSelectionIntoView","restProps","editableElement","setEditableElement","hasInvalidValue","setHasInvalidValue","useSlate","rangeDecorationsActor","useActorRef","decorate","renderElement","eProps","renderLeaf","leafProps","renderText","restoreSelectionFromProps","normalizedSelection","o","onReady","onInvalidValue","onValueChanged","handleCopy","clipboardData","stopPropagation","handleCut","handlePaste","onPasteResult","then","parseBlocks","catch","finally","handleOnFocus","isDefaultPrevented","handleClick","isPropagationStopped","handleOnBlur","handleOnBeforeInput","validateSelection","findDocumentOrShadowRoot","activeElement","domSelection","existingDOMRange","newDOMRange","toDOMRange","startOffset","endOffset","removeAllRanges","addRange","mutationObserver","MutationObserver","observe","attributeOldValue","characterData","childList","subtree","disconnect","handleKeyDown","onKeyDown","handleKeyUp","onKeyUp","scrollSelectionIntoViewToSlate","noop","addEventListener","removeEventListener","handleDragStart","selectingEntireBlocks","dragGhost","createElement","draggedDomNodes","clonedBlockNodes","cloneNode","HTMLElement","appendChild","customGhost","querySelector","replaceChildren","setAttribute","boxSizing","body","customGhostRect","x","y","setDragImage","blocksDomRect","clonedChildNodes","childrenDomRect","isSelectionCollapsed","handleDrag","handleDragEnd","handleDragEnter","handleDragOver","handleDrop","handleDragLeave","SlateEditable","className","useConstant","factory","React","constant","EditorProvider","initialConfig","internalEditor","internalEditor_0","portableTextEditor_0","t4","t5","t6","t7","t8","t9","t10"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126],"debugId":null}},
    {"offset": {"line": 13327, "column": 0}, "map": {"version":3,"file":"selector.get-text-before.js","sources":["file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/selectors/selector.get-text-before.ts"],"sourcesContent":["import type {EditorSelector} from '../editor/editor-selector'\nimport {getBlockStartPoint} from '../utils/util.get-block-start-point'\nimport {isKeyedSegment} from '../utils/util.is-keyed-segment'\nimport {reverseSelection} from '../utils/util.reverse-selection'\nimport {getSelectionText} from './selector.get-selection-text'\n\n/**\n * @public\n */\nexport const getBlockTextBefore: EditorSelector<string> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return ''\n  }\n\n  const selection = snapshot.context.selection.backward\n    ? reverseSelection(snapshot.context.selection)\n    : snapshot.context.selection\n  const point = selection.anchor\n  const key = isKeyedSegment(point.path[0]) ? point.path[0]._key : undefined\n\n  const block = key\n    ? snapshot.context.value.find((block) => block._key === key)\n    : undefined\n\n  if (!block) {\n    return ''\n  }\n\n  const startOfBlock = getBlockStartPoint({\n    context: snapshot.context,\n    block: {\n      node: block,\n      path: [{_key: block._key}],\n    },\n  })\n\n  return getSelectionText({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: {\n        anchor: startOfBlock,\n        focus: point,\n      },\n    },\n  })\n}\n"],"names":["getBlockTextBefore","snapshot","context","selection","point","backward","reverseSelection","anchor","key","isKeyedSegment","path","_key","undefined","block","value","find","startOfBlock","getBlockStartPoint","node","getSelectionText","focus"],"mappings":";;;;;;;AASO,MAAMA,qBAA8CC,CAAa,aAAA;IAClE,IAAA,CAACA,SAASC,OAAAA,CAAQC,SAAAA,EACb,OAAA;IAMT,MAAMC,QAAAA,CAHYH,SAASC,OAAAA,CAAQC,SAAAA,CAAUE,QAAAA,sMACzCC,mBAAAA,EAAiBL,SAASC,OAAAA,CAAQC,SAAS,IAC3CF,SAASC,OAAAA,CAAQC,SAAAA,EACGI,MAAAA,EAClBC,OAAMC,mNAAAA,EAAeL,MAAMM,IAAAA,CAAK,CAAC,CAAC,IAAIN,MAAMM,IAAAA,CAAK,CAAC,CAAA,CAAEC,IAAAA,GAAOC,KAAAA,GAE3DC,QAAQL,MACVP,SAASC,OAAAA,CAAQY,KAAAA,CAAMC,IAAAA,CAAMF,CAAAA,SAAUA,OAAMF,IAAAA,KAASH,GAAG,IACzDI,KAAAA;IAEJ,IAAI,CAACC,OACI,OAAA;IAGT,MAAMG,kNAAeC,qBAAAA,EAAmB;QACtCf,SAASD,SAASC,OAAAA;QAClBW,OAAO;YACLK,MAAML;YACNH,MAAM;gBAAC;oBAACC,MAAME,MAAMF,IAAAA;gBAAK,CAAA;aAAA;QAAA;IAC3B,CACD;IAED,0NAAOQ,mBAAAA,EAAiB;QAEtBjB,SAAS;YACP,GAAGD,SAASC,OAAAA;YACZC,WAAW;gBACTI,QAAQS;gBACRI,OAAOhB;YAAAA;QACT;IACF,CACD;AACH","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 13367, "column": 0}, "map": {"version":3,"file":"util.merge-text-blocks.js","sources":["file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/utils/util.is-text-block.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/utils/util.merge-text-blocks.ts"],"sourcesContent":["import type {PortableTextTextBlock} from '@sanity/types'\nimport type {EditorContext} from '..'\nimport {isTypedObject} from '../internal-utils/asserters'\n\n/**\n * @public\n */\nexport function isTextBlock(\n  context: Pick<EditorContext, 'schema'>,\n  block: unknown,\n): block is PortableTextTextBlock {\n  return isTypedObject(block) && block._type === context.schema.block.name\n}\n","import type {PortableTextTextBlock} from '@sanity/types'\nimport type {EditorContext} from '..'\nimport {parseBlock} from '../internal-utils/parse-blocks'\nimport {isTextBlock} from './util.is-text-block'\n\n/**\n * @beta\n */\nexport function mergeTextBlocks({\n  context,\n  targetBlock,\n  incomingBlock,\n}: {\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  targetBlock: PortableTextTextBlock\n  incomingBlock: PortableTextTextBlock\n}) {\n  const parsedIncomingBlock = parseBlock({\n    context,\n    block: incomingBlock,\n    options: {refreshKeys: true, validateFields: true},\n  })\n\n  if (!parsedIncomingBlock || !isTextBlock(context, parsedIncomingBlock)) {\n    return targetBlock\n  }\n\n  return {\n    ...targetBlock,\n    children: [...targetBlock.children, ...parsedIncomingBlock.children],\n    markDefs: [\n      ...(targetBlock.markDefs ?? []),\n      ...(parsedIncomingBlock.markDefs ?? []),\n    ],\n  }\n}\n"],"names":["isTextBlock","context","block","isTypedObject","_type","schema","name","mergeTextBlocks","targetBlock","incomingBlock","parsedIncomingBlock","parseBlock","options","refreshKeys","validateFields","children","markDefs"],"mappings":";;;;;;AAOgBA,SAAAA,YACdC,OAAAA,EACAC,KAAAA,EACgC;IAChC,0MAAOC,gBAAAA,EAAcD,KAAK,KAAKA,MAAME,KAAAA,KAAUH,QAAQI,MAAAA,CAAOH,KAAAA,CAAMI,IAAAA;AACtE;ACJO,SAASC,gBAAgB,EAC9BN,OAAAA,EACAO,WAAAA,EACAC,aAAAA,EAKF,EAAG;IACD,MAAMC,yNAAsBC,aAAAA,EAAW;QACrCV;QACAC,OAAOO;QACPG,SAAS;YAACC,aAAa,CAAA;YAAMC,gBAAgB,CAAA;QAAA;IAAI,CAClD;IAED,OAAI,CAACJ,uBAAuB,CAACV,YAAYC,SAASS,mBAAmB,IAC5DF,cAGF;QACL,GAAGA,WAAAA;QACHO,UAAU,CAAC;eAAGP,YAAYO,QAAAA,EAAU;eAAGL,oBAAoBK,QAAQ;SAAA;QACnEC,UAAU,CACR;eAAIR,YAAYQ,QAAAA,IAAY,CAAA,CAAA,EAC5B;eAAIN,oBAAoBM,QAAAA,IAAY,CAAG,CAAA;SAAA;IAE3C;AACF","ignoreList":[0,1],"debugId":null}},
    {"offset": {"line": 13405, "column": 0}, "map": {"version":3,"file":"index.js","sources":["file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/plugins/plugin.behavior.tsx","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/internal-utils/get-text-to-emphasize.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/behaviors/behavior.decorator-pair.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/plugins/plugin.decorator-shortcut.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/plugins/plugin.editor-ref.tsx","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/plugins/plugin.event-listener.tsx","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/behaviors/behavior.markdown.ts","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/plugins/plugin.markdown.tsx","file:///home/delsa/Desktop/youtube-project/my-project/node_modules/%40portabletext/editor/src/plugins/plugin.one-line.tsx"],"sourcesContent":["import {useEffect} from 'react'\nimport type {Behavior} from '../behaviors'\nimport {useEditor} from '../editor/use-editor'\n\n/**\n * @beta\n */\nexport function BehaviorPlugin(props: {behaviors: Array<Behavior>}) {\n  const editor = useEditor()\n\n  useEffect(() => {\n    const unregisterBehaviors = props.behaviors.map((behavior) =>\n      editor.registerBehavior({behavior}),\n    )\n\n    return () => {\n      unregisterBehaviors.forEach((unregister) => unregister())\n    }\n  }, [editor, props.behaviors])\n\n  return null\n}\n","export function createPairRegex(char: string, amount: number) {\n  // Negative lookbehind: Ensures that the matched sequence is not preceded by the same character\n  const prePrefix = `(?<!\\\\${char})`\n\n  // Repeats the character `amount` times\n  const prefix = `\\\\${char}`.repeat(Math.max(amount, 1))\n\n  // Negative lookahead: Ensures that the opening pair (**, *, etc.) is not followed by a space\n  const postPrefix = `(?!\\\\s)`\n\n  // Captures the content inside the pair\n  const content = `([^${char}\\\\n]+?)`\n\n  // Negative lookbehind: Ensures that the content is not followed by a space\n  const preSuffix = `(?<!\\\\s)`\n\n  // Repeats the character `amount` times\n  const suffix = `\\\\${char}`.repeat(Math.max(amount, 1))\n\n  // Negative lookahead: Ensures that the matched sequence is not followed by the same character\n  const postSuffix = `(?!\\\\${char})`\n\n  return `${prePrefix}${prefix}${postPrefix}${content}${preSuffix}${suffix}${postSuffix}`\n}\n\nconst italicRegex = new RegExp(\n  `(${createPairRegex('*', 1)}|${createPairRegex('_', 1)})$`,\n)\n\nconst boldRegex = new RegExp(\n  `(${createPairRegex('*', 2)}|${createPairRegex('_', 2)})$`,\n)\n\nexport function getTextToItalic(text: string) {\n  return text.match(italicRegex)?.at(0)\n}\n\nexport function getTextToBold(text: string) {\n  return text.match(boldRegex)?.at(0)\n}\n","import type {EditorSchema} from '../editor/editor-schema'\nimport {createPairRegex} from '../internal-utils/get-text-to-emphasize'\nimport * as selectors from '../selectors'\nimport type {BlockOffset} from '../types/block-offset'\nimport * as utils from '../utils'\nimport {effect, execute} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport function createDecoratorPairBehavior(config: {\n  decorator: ({schema}: {schema: EditorSchema}) => string | undefined\n  pair: {char: string; amount: number}\n  onDecorate: (offset: BlockOffset) => void\n}) {\n  if (config.pair.amount < 1) {\n    console.warn(\n      `The amount of characters in the pair should be greater than 0`,\n    )\n  }\n\n  const pairRegex = createPairRegex(config.pair.char, config.pair.amount)\n  const regEx = new RegExp(`(${pairRegex})$`)\n\n  return defineBehavior({\n    on: 'insert.text',\n    guard: ({snapshot, event}) => {\n      if (config.pair.amount < 1) {\n        return false\n      }\n\n      const decorator = config.decorator({schema: snapshot.context.schema})\n\n      if (decorator === undefined) {\n        return false\n      }\n\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n      const selectionStartPoint = selectors.getSelectionStartPoint(snapshot)\n      const selectionStartOffset = selectionStartPoint\n        ? utils.spanSelectionPointToBlockOffset({\n            context: {\n              schema: snapshot.context.schema,\n              value: snapshot.context.value,\n            },\n            selectionPoint: selectionStartPoint,\n          })\n        : undefined\n\n      if (!focusTextBlock || !selectionStartOffset) {\n        return false\n      }\n\n      const textBefore = selectors.getBlockTextBefore(snapshot)\n      const newText = `${textBefore}${event.text}`\n      const textToDecorate = newText.match(regEx)?.at(0)\n\n      if (textToDecorate === undefined) {\n        return false\n      }\n\n      const prefixOffsets = {\n        anchor: {\n          path: focusTextBlock.path,\n          // Example: \"foo **bar**\".length - \"**bar**\".length = 4\n          offset: newText.length - textToDecorate.length,\n        },\n        focus: {\n          path: focusTextBlock.path,\n          // Example: \"foo **bar**\".length - \"**bar**\".length + \"*\".length * 2 = 6\n          offset:\n            newText.length -\n            textToDecorate.length +\n            config.pair.char.length * config.pair.amount,\n        },\n      }\n\n      const suffixOffsets = {\n        anchor: {\n          path: focusTextBlock.path,\n          // Example: \"foo **bar*|\" (10) + \"*\".length - 2 = 9\n          offset:\n            selectionStartOffset.offset +\n            event.text.length -\n            config.pair.char.length * config.pair.amount,\n        },\n        focus: {\n          path: focusTextBlock.path,\n          // Example: \"foo **bar*|\" (10) + \"*\".length = 11\n          offset: selectionStartOffset.offset + event.text.length,\n        },\n      }\n\n      // If the prefix is more than one character, then we need to check if\n      // there is an inline object inside it\n      if (prefixOffsets.focus.offset - prefixOffsets.anchor.offset > 1) {\n        const prefixSelection = utils.blockOffsetsToSelection({\n          context: snapshot.context,\n          offsets: prefixOffsets,\n        })\n        const inlineObjectBeforePrefixFocus = selectors.getPreviousInlineObject(\n          {\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: prefixSelection\n                ? {\n                    anchor: prefixSelection.focus,\n                    focus: prefixSelection.focus,\n                  }\n                : null,\n            },\n          },\n        )\n        const inlineObjectBeforePrefixFocusOffset =\n          inlineObjectBeforePrefixFocus\n            ? utils.childSelectionPointToBlockOffset({\n                context: {\n                  schema: snapshot.context.schema,\n                  value: snapshot.context.value,\n                },\n                selectionPoint: {\n                  path: inlineObjectBeforePrefixFocus.path,\n                  offset: 0,\n                },\n              })\n            : undefined\n\n        if (\n          inlineObjectBeforePrefixFocusOffset &&\n          inlineObjectBeforePrefixFocusOffset.offset >\n            prefixOffsets.anchor.offset &&\n          inlineObjectBeforePrefixFocusOffset.offset <\n            prefixOffsets.focus.offset\n        ) {\n          return false\n        }\n      }\n\n      // If the suffix is more than one character, then we need to check if\n      // there is an inline object inside it\n      if (suffixOffsets.focus.offset - suffixOffsets.anchor.offset > 1) {\n        const previousInlineObject = selectors.getPreviousInlineObject(snapshot)\n        const previousInlineObjectOffset = previousInlineObject\n          ? utils.childSelectionPointToBlockOffset({\n              context: {\n                schema: snapshot.context.schema,\n                value: snapshot.context.value,\n              },\n              selectionPoint: {\n                path: previousInlineObject.path,\n                offset: 0,\n              },\n            })\n          : undefined\n\n        if (\n          previousInlineObjectOffset &&\n          previousInlineObjectOffset.offset > suffixOffsets.anchor.offset &&\n          previousInlineObjectOffset.offset < suffixOffsets.focus.offset\n        ) {\n          return false\n        }\n      }\n\n      return {\n        prefixOffsets,\n        suffixOffsets,\n        decorator,\n      }\n    },\n    actions: [\n      // Insert the text as usual in its own undo step\n      ({event}) => [execute(event)],\n      (_, {prefixOffsets, suffixOffsets, decorator}) => [\n        // Decorate the text between the prefix and suffix\n        execute({\n          type: 'decorator.add',\n          decorator,\n          at: {\n            anchor: prefixOffsets.focus,\n            focus: suffixOffsets.anchor,\n          },\n        }),\n        // Delete the suffix\n        execute({\n          type: 'delete.text',\n          at: suffixOffsets,\n        }),\n        // Delete the prefix\n        execute({\n          type: 'delete.text',\n          at: prefixOffsets,\n        }),\n        // Toggle the decorator off so the next inserted text isn't emphasized\n        execute({\n          type: 'decorator.remove',\n          decorator,\n        }),\n        effect(() => {\n          config.onDecorate({\n            ...suffixOffsets.anchor,\n            offset:\n              suffixOffsets.anchor.offset -\n              (prefixOffsets.focus.offset - prefixOffsets.anchor.offset),\n          })\n        }),\n      ],\n    ],\n  })\n}\n","import {useActorRef} from '@xstate/react'\nimport {isEqual} from 'lodash'\nimport {\n  assign,\n  fromCallback,\n  setup,\n  type AnyEventObject,\n  type CallbackLogicFunction,\n} from 'xstate'\nimport {createDecoratorPairBehavior} from '../behaviors/behavior.decorator-pair'\nimport {effect, execute, forward} from '../behaviors/behavior.types.action'\nimport {defineBehavior} from '../behaviors/behavior.types.behavior'\nimport type {Editor} from '../editor'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport {useEditor} from '../editor/use-editor'\nimport type {BlockOffset} from '../types/block-offset'\nimport * as utils from '../utils'\n\n/**\n * @beta\n * @deprecated Install the plugin from `@portabletext/plugin-character-pair-decorator`\n */\nexport function DecoratorShortcutPlugin(config: {\n  decorator: ({schema}: {schema: EditorSchema}) => string | undefined\n  pair: {char: string; amount: number}\n}) {\n  const editor = useEditor()\n\n  useActorRef(decoratorPairMachine, {\n    input: {\n      editor,\n      decorator: config.decorator,\n      pair: config.pair,\n    },\n  })\n\n  return null\n}\n\ntype MarkdownEmphasisEvent =\n  | {\n      type: 'emphasis.add'\n      blockOffset: BlockOffset\n    }\n  | {\n      type: 'selection'\n      blockOffsets?: {\n        anchor: BlockOffset\n        focus: BlockOffset\n      }\n    }\n  | {\n      type: 'delete.backward'\n    }\n\nconst emphasisListener: CallbackLogicFunction<\n  AnyEventObject,\n  MarkdownEmphasisEvent,\n  {\n    decorator: ({schema}: {schema: EditorSchema}) => string | undefined\n    editor: Editor\n    pair: {char: string; amount: number}\n  }\n> = ({sendBack, input}) => {\n  const unregister = input.editor.registerBehavior({\n    behavior: createDecoratorPairBehavior({\n      decorator: input.decorator,\n      pair: input.pair,\n      onDecorate: (offset) => {\n        sendBack({type: 'emphasis.add', blockOffset: offset})\n      },\n    }),\n  })\n\n  return unregister\n}\n\nconst selectionListenerCallback: CallbackLogicFunction<\n  AnyEventObject,\n  MarkdownEmphasisEvent,\n  {editor: Editor}\n> = ({sendBack, input}) => {\n  const unregister = input.editor.registerBehavior({\n    behavior: defineBehavior({\n      on: 'select',\n      guard: ({snapshot, event}) => {\n        if (!event.at) {\n          return {blockOffsets: undefined}\n        }\n\n        const anchor = utils.spanSelectionPointToBlockOffset({\n          context: snapshot.context,\n          selectionPoint: event.at.anchor,\n        })\n        const focus = utils.spanSelectionPointToBlockOffset({\n          context: snapshot.context,\n          selectionPoint: event.at.focus,\n        })\n\n        if (!anchor || !focus) {\n          return {blockOffsets: undefined}\n        }\n\n        return {\n          blockOffsets: {\n            anchor,\n            focus,\n          },\n        }\n      },\n      actions: [\n        ({event}, {blockOffsets}) => [\n          {\n            type: 'effect',\n            effect: () => {\n              sendBack({type: 'selection', blockOffsets})\n            },\n          },\n          forward(event),\n        ],\n      ],\n    }),\n  })\n\n  return unregister\n}\n\nconst deleteBackwardListenerCallback: CallbackLogicFunction<\n  AnyEventObject,\n  MarkdownEmphasisEvent,\n  {editor: Editor}\n> = ({sendBack, input}) => {\n  const unregister = input.editor.registerBehavior({\n    behavior: defineBehavior({\n      on: 'delete.backward',\n      actions: [\n        () => [\n          execute({\n            type: 'history.undo',\n          }),\n          effect(() => {\n            sendBack({type: 'delete.backward'})\n          }),\n        ],\n      ],\n    }),\n  })\n\n  return unregister\n}\n\nconst decoratorPairMachine = setup({\n  types: {\n    context: {} as {\n      decorator: ({schema}: {schema: EditorSchema}) => string | undefined\n      editor: Editor\n      offsetAfterEmphasis?: BlockOffset\n      pair: {char: string; amount: number}\n    },\n    input: {} as {\n      decorator: ({schema}: {schema: EditorSchema}) => string | undefined\n      editor: Editor\n      pair: {char: string; amount: number}\n    },\n    events: {} as MarkdownEmphasisEvent,\n  },\n  actors: {\n    'emphasis listener': fromCallback(emphasisListener),\n    'delete.backward listener': fromCallback(deleteBackwardListenerCallback),\n    'selection listener': fromCallback(selectionListenerCallback),\n  },\n}).createMachine({\n  id: 'decorator pair',\n  context: ({input}) => ({\n    decorator: input.decorator,\n    editor: input.editor,\n    pair: input.pair,\n  }),\n  initial: 'idle',\n  states: {\n    'idle': {\n      invoke: [\n        {\n          src: 'emphasis listener',\n          input: ({context}) => ({\n            decorator: context.decorator,\n            editor: context.editor,\n            pair: context.pair,\n          }),\n        },\n      ],\n      on: {\n        'emphasis.add': {\n          target: 'emphasis added',\n          actions: assign({\n            offsetAfterEmphasis: ({event}) => event.blockOffset,\n          }),\n        },\n      },\n    },\n    'emphasis added': {\n      exit: [\n        assign({\n          offsetAfterEmphasis: undefined,\n        }),\n      ],\n      invoke: [\n        {\n          src: 'selection listener',\n          input: ({context}) => ({editor: context.editor}),\n        },\n        {\n          src: 'delete.backward listener',\n          input: ({context}) => ({editor: context.editor}),\n        },\n      ],\n      on: {\n        'selection': {\n          target: 'idle',\n          guard: ({context, event}) => {\n            const selectionChanged = !isEqual(\n              {\n                anchor: context.offsetAfterEmphasis,\n                focus: context.offsetAfterEmphasis,\n              },\n              event.blockOffsets,\n            )\n\n            return selectionChanged\n          },\n        },\n        'delete.backward': {\n          target: 'idle',\n        },\n      },\n    },\n  },\n})\n","import React from 'react'\nimport type {Editor} from '../editor'\nimport {useEditor} from '../editor/use-editor'\n\n/**\n * @beta\n */\nexport const EditorRefPlugin = React.forwardRef<Editor | null>((_, ref) => {\n  const editor = useEditor()\n\n  const portableTextEditorRef = React.useRef(editor)\n\n  React.useImperativeHandle(ref, () => portableTextEditorRef.current, [])\n\n  return null\n})\nEditorRefPlugin.displayName = 'EditorRefPlugin'\n","import {useEffect} from 'react'\nimport {useEffectEvent} from 'use-effect-event'\nimport type {EditorEmittedEvent} from '../editor/relay-machine'\nimport {useEditor} from '../editor/use-editor'\n\n/**\n * @public\n * Listen for events emitted by the editor. Must be used inside `EditorProvider`. Events available include:\n *  - 'blurred'\n *  - 'done loading'\n *  - 'editable'\n *  - 'error'\n *  - 'focused'\n *  - 'invalid value'\n *  - 'loading'\n *  - 'mutation'\n *  - 'patch'\n *  - 'read only'\n *  - 'ready'\n *  - 'selection'\n *  - 'value changed'\n *\n * @example\n * Listen and log events.\n * ```tsx\n * import {EditorProvider} from '@portabletext/editor'\n * import {EventListenerPlugin} from '@portabletext/editor/plugins'\n *\n * function MyComponent() {\n *  return (\n *  <EditorProvider>\n *   <EventListenerPlugin\n *    on={(event) => {\n *     console.log(event)\n *    }\n *   } />\n *   { ... }\n * </EditorProvider>\n *  )\n * }\n * ```\n * @example\n * Handle events when there is a mutation.\n * ```tsx\n * <EventListenerPlugin\n *  on={(event) => {\n *    if (event.type === 'mutation') {\n *      console.log('Value changed:', event.snapshot)\n *    }\n *  }}\n * />\n * ```\n * @group Components\n */\nexport function EventListenerPlugin(props: {\n  on: (event: EditorEmittedEvent) => void\n}) {\n  const editor = useEditor()\n  const on = useEffectEvent(props.on)\n\n  useEffect(() => {\n    const subscription = editor.on('*', on)\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [editor])\n\n  return null\n}\n","import type {EditorSchema} from '../editor/editor-schema'\nimport {isTextBlock} from '../internal-utils/parse-blocks'\nimport * as selectors from '../selectors'\nimport {spanSelectionPointToBlockOffset} from '../utils/util.block-offset'\nimport {getTextBlockText} from '../utils/util.get-text-block-text'\nimport {execute} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport type MarkdownBehaviorsConfig = {\n  horizontalRuleObject?: (context: {\n    schema: EditorSchema\n  }) => {name: string; value?: {[prop: string]: unknown}} | undefined\n  defaultStyle?: (context: {schema: EditorSchema}) => string | undefined\n  headingStyle?: (context: {\n    schema: EditorSchema\n    level: number\n  }) => string | undefined\n  blockquoteStyle?: (context: {schema: EditorSchema}) => string | undefined\n  unorderedListStyle?: (context: {schema: EditorSchema}) => string | undefined\n  orderedListStyle?: (context: {schema: EditorSchema}) => string | undefined\n}\n\nexport function createMarkdownBehaviors(config: MarkdownBehaviorsConfig) {\n  const automaticBlockquoteOnSpace = defineBehavior({\n    on: 'insert.text',\n    guard: ({snapshot, event}) => {\n      const isSpace = event.text === ' '\n\n      if (!isSpace) {\n        return false\n      }\n\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n      const focusSpan = selectors.getFocusSpan(snapshot)\n\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n        return false\n      }\n\n      const previousInlineObject = selectors.getPreviousInlineObject(snapshot)\n      const blockOffset = spanSelectionPointToBlockOffset({\n        context: snapshot.context,\n        selectionPoint: {\n          path: [\n            {_key: focusTextBlock.node._key},\n            'children',\n            {_key: focusSpan.node._key},\n          ],\n          offset: snapshot.context.selection?.focus.offset ?? 0,\n        },\n      })\n\n      if (previousInlineObject || !blockOffset) {\n        return false\n      }\n\n      const blockText = getTextBlockText(focusTextBlock.node)\n      const caretAtTheEndOfQuote = blockOffset.offset === 1\n      const looksLikeMarkdownQuote = /^>/.test(blockText)\n      const blockquoteStyle = config.blockquoteStyle?.(snapshot.context)\n\n      if (\n        caretAtTheEndOfQuote &&\n        looksLikeMarkdownQuote &&\n        blockquoteStyle !== undefined\n      ) {\n        return {focusTextBlock, style: blockquoteStyle}\n      }\n\n      return false\n    },\n    actions: [\n      () => [\n        execute({\n          type: 'insert.text',\n          text: ' ',\n        }),\n      ],\n      (_, {focusTextBlock, style}) => [\n        execute({\n          type: 'block.unset',\n          props: ['listItem', 'level'],\n          at: focusTextBlock.path,\n        }),\n        execute({\n          type: 'block.set',\n          props: {style},\n          at: focusTextBlock.path,\n        }),\n        execute({\n          type: 'delete.text',\n          at: {\n            anchor: {\n              path: focusTextBlock.path,\n              offset: 0,\n            },\n            focus: {\n              path: focusTextBlock.path,\n              offset: 2,\n            },\n          },\n        }),\n      ],\n    ],\n  })\n  const automaticHr = defineBehavior({\n    on: 'insert.text',\n    guard: ({snapshot, event}) => {\n      const hrCharacter =\n        event.text === '-'\n          ? '-'\n          : event.text === '*'\n            ? '*'\n            : event.text === '_'\n              ? '_'\n              : undefined\n\n      if (hrCharacter === undefined) {\n        return false\n      }\n\n      const hrObject = config.horizontalRuleObject?.(snapshot.context)\n      const focusBlock = selectors.getFocusTextBlock(snapshot)\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n      if (!hrObject || !focusBlock || !selectionCollapsed) {\n        return false\n      }\n\n      const previousInlineObject = selectors.getPreviousInlineObject(snapshot)\n      const textBefore = selectors.getBlockTextBefore(snapshot)\n      const hrBlockOffsets = {\n        anchor: {\n          path: focusBlock.path,\n          offset: 0,\n        },\n        focus: {\n          path: focusBlock.path,\n          offset: 3,\n        },\n      }\n\n      if (\n        !previousInlineObject &&\n        textBefore === `${hrCharacter}${hrCharacter}`\n      ) {\n        return {hrObject, focusBlock, hrCharacter, hrBlockOffsets}\n      }\n\n      return false\n    },\n    actions: [\n      (_, {hrCharacter}) => [\n        execute({\n          type: 'insert.text',\n          text: hrCharacter,\n        }),\n      ],\n      (_, {hrObject, hrBlockOffsets}) => [\n        execute({\n          type: 'insert.block',\n          placement: 'before',\n          block: {\n            _type: hrObject.name,\n            ...(hrObject.value ?? {}),\n          },\n        }),\n        execute({\n          type: 'delete.text',\n          at: hrBlockOffsets,\n        }),\n      ],\n    ],\n  })\n  const automaticHrOnPaste = defineBehavior({\n    on: 'clipboard.paste',\n    guard: ({snapshot, event}) => {\n      const text = event.originEvent.dataTransfer.getData('text/plain')\n      const hrRegExp = /^(---)$|(___)$|(\\*\\*\\*)$/\n      const hrCharacters = text.match(hrRegExp)?.[0]\n      const hrObject = config.horizontalRuleObject?.(snapshot.context)\n      const focusBlock = selectors.getFocusBlock(snapshot)\n\n      if (!hrCharacters || !hrObject || !focusBlock) {\n        return false\n      }\n\n      return {hrCharacters, hrObject, focusBlock}\n    },\n    actions: [\n      (_, {hrCharacters}) => [\n        execute({\n          type: 'insert.text',\n          text: hrCharacters,\n        }),\n      ],\n      ({snapshot}, {hrObject, focusBlock}) =>\n        isTextBlock(snapshot.context, focusBlock.node)\n          ? [\n              execute({\n                type: 'insert.block',\n                block: {\n                  _type: snapshot.context.schema.block.name,\n                  children: focusBlock.node.children,\n                },\n                placement: 'after',\n              }),\n              execute({\n                type: 'insert.block',\n                block: {\n                  _type: hrObject.name,\n                  ...(hrObject.value ?? {}),\n                },\n                placement: 'after',\n              }),\n              execute({\n                type: 'delete.block',\n                at: focusBlock.path,\n              }),\n            ]\n          : [\n              execute({\n                type: 'insert.block',\n                block: {\n                  _type: hrObject.name,\n                  ...(hrObject.value ?? {}),\n                },\n                placement: 'after',\n              }),\n            ],\n    ],\n  })\n  const automaticHeadingOnSpace = defineBehavior({\n    on: 'insert.text',\n    guard: ({snapshot, event}) => {\n      const isSpace = event.text === ' '\n\n      if (!isSpace) {\n        return false\n      }\n\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n      const focusSpan = selectors.getFocusSpan(snapshot)\n\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n        return false\n      }\n\n      const blockOffset = spanSelectionPointToBlockOffset({\n        context: snapshot.context,\n        selectionPoint: {\n          path: [\n            {_key: focusTextBlock.node._key},\n            'children',\n            {_key: focusSpan.node._key},\n          ],\n          offset: snapshot.context.selection?.focus.offset ?? 0,\n        },\n      })\n\n      if (!blockOffset) {\n        return false\n      }\n\n      const previousInlineObject = selectors.getPreviousInlineObject(snapshot)\n      const blockText = getTextBlockText(focusTextBlock.node)\n      const markdownHeadingSearch = /^#+/.exec(blockText)\n      const level = markdownHeadingSearch\n        ? markdownHeadingSearch[0].length\n        : undefined\n      const caretAtTheEndOfHeading = blockOffset.offset === level\n\n      if (previousInlineObject || !caretAtTheEndOfHeading) {\n        return false\n      }\n\n      const style =\n        level !== undefined\n          ? config.headingStyle?.({schema: snapshot.context.schema, level})\n          : undefined\n\n      if (level !== undefined && style !== undefined) {\n        return {\n          focusTextBlock,\n          style: style,\n          level,\n        }\n      }\n\n      return false\n    },\n    actions: [\n      ({event}) => [execute(event)],\n      (_, {focusTextBlock, style, level}) => [\n        execute({\n          type: 'block.unset',\n          props: ['listItem', 'level'],\n          at: focusTextBlock.path,\n        }),\n        execute({\n          type: 'block.set',\n          props: {style},\n          at: focusTextBlock.path,\n        }),\n        execute({\n          type: 'delete.text',\n          at: {\n            anchor: {\n              path: focusTextBlock.path,\n              offset: 0,\n            },\n            focus: {\n              path: focusTextBlock.path,\n              offset: level + 1,\n            },\n          },\n        }),\n      ],\n    ],\n  })\n  const clearStyleOnBackspace = defineBehavior({\n    on: 'delete.backward',\n    guard: ({snapshot}) => {\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n      const focusSpan = selectors.getFocusSpan(snapshot)\n\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n        return false\n      }\n\n      const atTheBeginningOfBLock =\n        focusTextBlock.node.children[0]._key === focusSpan.node._key &&\n        snapshot.context.selection?.focus.offset === 0\n\n      const defaultStyle = config.defaultStyle?.(snapshot.context)\n\n      if (\n        atTheBeginningOfBLock &&\n        defaultStyle &&\n        focusTextBlock.node.style !== defaultStyle\n      ) {\n        return {defaultStyle, focusTextBlock}\n      }\n\n      return false\n    },\n    actions: [\n      (_, {defaultStyle, focusTextBlock}) => [\n        execute({\n          type: 'block.set',\n          props: {style: defaultStyle},\n          at: focusTextBlock.path,\n        }),\n      ],\n    ],\n  })\n  const automaticListOnSpace = defineBehavior({\n    on: 'insert.text',\n    guard: ({snapshot, event}) => {\n      const isSpace = event.text === ' '\n\n      if (!isSpace) {\n        return false\n      }\n\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n      const focusSpan = selectors.getFocusSpan(snapshot)\n\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n        return false\n      }\n\n      const previousInlineObject = selectors.getPreviousInlineObject(snapshot)\n      const blockOffset = spanSelectionPointToBlockOffset({\n        context: snapshot.context,\n        selectionPoint: {\n          path: [\n            {_key: focusTextBlock.node._key},\n            'children',\n            {_key: focusSpan.node._key},\n          ],\n          offset: snapshot.context.selection?.focus.offset ?? 0,\n        },\n      })\n\n      if (previousInlineObject || !blockOffset) {\n        return false\n      }\n\n      const blockText = getTextBlockText(focusTextBlock.node)\n      const defaultStyle = config.defaultStyle?.(snapshot.context)\n      const looksLikeUnorderedList = /^(-|\\*)/.test(blockText)\n      const unorderedListStyle = config.unorderedListStyle?.(snapshot.context)\n      const caretAtTheEndOfUnorderedList = blockOffset.offset === 1\n\n      if (\n        defaultStyle &&\n        caretAtTheEndOfUnorderedList &&\n        looksLikeUnorderedList &&\n        unorderedListStyle !== undefined\n      ) {\n        return {\n          focusTextBlock,\n          listItem: unorderedListStyle,\n          listItemLength: 1,\n          style: defaultStyle,\n        }\n      }\n\n      const looksLikeOrderedList = /^1\\./.test(blockText)\n      const orderedListStyle = config.orderedListStyle?.(snapshot.context)\n      const caretAtTheEndOfOrderedList = blockOffset.offset === 2\n\n      if (\n        defaultStyle &&\n        caretAtTheEndOfOrderedList &&\n        looksLikeOrderedList &&\n        orderedListStyle !== undefined\n      ) {\n        return {\n          focusTextBlock,\n          listItem: orderedListStyle,\n          listItemLength: 2,\n          style: defaultStyle,\n        }\n      }\n\n      return false\n    },\n    actions: [\n      ({event}) => [execute(event)],\n      (_, {focusTextBlock, style, listItem, listItemLength}) => [\n        execute({\n          type: 'block.set',\n          props: {\n            listItem,\n            level: 1,\n            style,\n          },\n          at: focusTextBlock.path,\n        }),\n        execute({\n          type: 'delete.text',\n          at: {\n            anchor: {\n              path: focusTextBlock.path,\n              offset: 0,\n            },\n            focus: {\n              path: focusTextBlock.path,\n              offset: listItemLength + 1,\n            },\n          },\n        }),\n      ],\n    ],\n  })\n\n  const markdownBehaviors = [\n    automaticBlockquoteOnSpace,\n    automaticHeadingOnSpace,\n    automaticHr,\n    automaticHrOnPaste,\n    clearStyleOnBackspace,\n    automaticListOnSpace,\n  ]\n\n  return markdownBehaviors\n}\n","import {useEffect} from 'react'\nimport {\n  createMarkdownBehaviors,\n  type MarkdownBehaviorsConfig,\n} from '../behaviors/behavior.markdown'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport {useEditor} from '../editor/use-editor'\nimport {DecoratorShortcutPlugin} from './plugin.decorator-shortcut'\n\n/**\n * @beta\n */\nexport type MarkdownPluginConfig = MarkdownBehaviorsConfig & {\n  boldDecorator?: ({schema}: {schema: EditorSchema}) => string | undefined\n  codeDecorator?: ({schema}: {schema: EditorSchema}) => string | undefined\n  italicDecorator?: ({schema}: {schema: EditorSchema}) => string | undefined\n  strikeThroughDecorator?: ({\n    schema,\n  }: {\n    schema: EditorSchema\n  }) => string | undefined\n}\n\n/**\n * @beta\n * Add markdown behaviors for common markdown actions such as converting ### to headings, --- to HRs, and more.\n *\n * @example\n * Configure the bundled markdown behaviors\n * ```ts\n * import {EditorProvider} from '@portabletext/editor'\n * import {MarkdownPlugin} from '@portabletext/editor/plugins'\n *\n * function App() {\n *   return (\n *    <EditorProvider>\n *      <MarkdownPlugin\n *        config={{\n *          boldDecorator: ({schema}) =>\n *            schema.decorators.find((decorator) => decorator.value === 'strong')?.value,\n *          codeDecorator: ({schema}) =>\n *            schema.decorators.find((decorator) => decorator.value === 'code')?.value,\n *          italicDecorator: ({schema}) =>\n *            schema.decorators.find((decorator) => decorator.value === 'em')?.value,\n *          strikeThroughDecorator: ({schema}) =>\n *            schema.decorators.find((decorator) => decorator.value === 'strike-through')?.value,\n *          horizontalRuleObject: ({schema}) => {\n *            const name = schema.blockObjects.find(\n *              (object) => object.name === 'break',\n *            )?.name\n *            return name ? {name} : undefined\n *          },\n *          defaultStyle: ({schema}) => schema.styles[0].value,\n *          headingStyle: ({schema, level}) =>\n *            schema.styles.find((style) => style.value === `h${level}`)\n *              ?.value,\n *          blockquoteStyle: ({schema}) =>\n *            schema.styles.find((style) => style.value === 'blockquote')\n *              ?.value,\n *          unorderedListStyle: ({schema}) =>\n *            schema.lists.find((list) => list.value === 'bullet')?.value,\n *          orderedListStyle: ({schema}) =>\n *            schema.lists.find((list) => list.value === 'number')?.value,\n *        }}\n *      />\n *      {...}\n *    </EditorProvider>\n *  )\n * }\n * ```\n *\n * @deprecated Install the plugin from `@portabletext/plugin-markdown-shortcuts`\n */\nexport function MarkdownPlugin(props: {config: MarkdownPluginConfig}) {\n  const editor = useEditor()\n\n  useEffect(() => {\n    const behaviors = createMarkdownBehaviors(props.config)\n\n    const unregisterBehaviors = behaviors.map((behavior) =>\n      editor.registerBehavior({behavior}),\n    )\n\n    return () => {\n      for (const unregisterBehavior of unregisterBehaviors) {\n        unregisterBehavior()\n      }\n    }\n  }, [editor, props.config])\n\n  return (\n    <>\n      {props.config.boldDecorator ? (\n        <>\n          <DecoratorShortcutPlugin\n            decorator={props.config.boldDecorator}\n            pair={{char: '*', amount: 2}}\n          />\n          <DecoratorShortcutPlugin\n            decorator={props.config.boldDecorator}\n            pair={{char: '_', amount: 2}}\n          />\n        </>\n      ) : null}\n      {props.config.codeDecorator ? (\n        <DecoratorShortcutPlugin\n          decorator={props.config.codeDecorator}\n          pair={{char: '`', amount: 1}}\n        />\n      ) : null}\n      {props.config.italicDecorator ? (\n        <>\n          <DecoratorShortcutPlugin\n            decorator={props.config.italicDecorator}\n            pair={{char: '*', amount: 1}}\n          />\n          <DecoratorShortcutPlugin\n            decorator={props.config.italicDecorator}\n            pair={{char: '_', amount: 1}}\n          />\n        </>\n      ) : null}\n      {props.config.strikeThroughDecorator ? (\n        <DecoratorShortcutPlugin\n          decorator={props.config.strikeThroughDecorator}\n          pair={{char: '~', amount: 2}}\n        />\n      ) : null}\n    </>\n  )\n}\n","import {defineBehavior, execute, raise} from '../behaviors'\nimport * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport {BehaviorPlugin} from './plugin.behavior'\n\nconst oneLineBehaviors = [\n  /**\n   * Hitting Enter on an expanded selection should just delete that selection\n   * without causing a line break.\n   */\n  defineBehavior({\n    on: 'insert.break',\n    guard: ({snapshot}) =>\n      snapshot.context.selection && selectors.isSelectionExpanded(snapshot)\n        ? {selection: snapshot.context.selection}\n        : false,\n    actions: [(_, {selection}) => [execute({type: 'delete', at: selection})]],\n  }),\n  /**\n   * All other cases of `insert.break` should be aborted.\n   */\n  defineBehavior({\n    on: 'insert.break',\n    actions: [],\n  }),\n  /**\n   * `insert.block` `before` or `after` is not allowed in a one-line editor.\n   */\n  defineBehavior({\n    on: 'insert.block',\n    guard: ({event}) =>\n      event.placement === 'before' || event.placement === 'after',\n    actions: [],\n  }),\n  /**\n   * An ordinary `insert.block` is acceptable if it's a text block. In that\n   * case it will get merged into the existing text block.\n   */\n  defineBehavior({\n    on: 'insert.block',\n    guard: ({snapshot, event}) => {\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n\n      if (\n        !focusTextBlock ||\n        !utils.isTextBlock(snapshot.context, event.block)\n      ) {\n        return false\n      }\n\n      return true\n    },\n    actions: [\n      ({event}) => [\n        execute({\n          type: 'insert.block',\n          block: event.block,\n          placement: 'auto',\n          select: 'end',\n        }),\n      ],\n    ],\n  }),\n  /**\n   * Fallback Behavior to avoid `insert.block` in case the Behaviors above all\n   * end up with a falsy guard.\n   */\n  defineBehavior({\n    on: 'insert.block',\n    actions: [],\n  }),\n  /**\n   * If multiple blocks are inserted, then the non-text blocks are filtered out\n   * and the text blocks are merged into one block\n   */\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({snapshot, event}) => {\n      const textBlocks = event.blocks.filter((block) =>\n        utils.isTextBlock(snapshot.context, block),\n      )\n\n      if (textBlocks.length === 0) {\n        return false\n      }\n\n      return textBlocks.reduce((targetBlock, incomingBlock) => {\n        return utils.mergeTextBlocks({\n          context: snapshot.context,\n          targetBlock,\n          incomingBlock,\n        })\n      })\n    },\n    actions: [\n      // `insert.block` is raised so the Behavior above can handle the\n      // insertion\n      (_, block) => [raise({type: 'insert.block', block, placement: 'auto'})],\n    ],\n  }),\n  /**\n   * Fallback Behavior to avoid `insert.blocks` in case the Behavior above\n   * ends up with a falsy guard.\n   */\n  defineBehavior({\n    on: 'insert.blocks',\n    actions: [],\n  }),\n]\n\n/**\n * @beta\n * Restrict the editor to one line. The plugin takes care of blocking\n * `insert.break` events and smart handling of other `insert.*` events.\n *\n * Place it with as high priority as possible to make sure other plugins don't\n * overwrite `insert.*` events before this plugin gets a chance to do so.\n *\n * @deprecated Install the plugin from `@portabletext/plugin-one-line`\n */\nexport function OneLinePlugin() {\n  return <BehaviorPlugin behaviors={oneLineBehaviors} />\n}\n"],"names":["BehaviorPlugin","props","$","_c","editor","useEditor","t0","t1","behaviors","unregisterBehaviors","map","behavior","registerBehavior","forEach","_temp","useEffect","unregister","createPairRegex","char","amount","prePrefix","prefix","repeat","Math","max","postPrefix","content","preSuffix","suffix","postSuffix","createDecoratorPairBehavior","config","pair","console","warn","pairRegex","regEx","RegExp","defineBehavior","on","guard","snapshot","event","decorator","schema","context","undefined","focusTextBlock","selectors","selectionStartPoint","selectionStartOffset","utils","value","selectionPoint","newText","text","textToDecorate","match","at","prefixOffsets","anchor","path","offset","length","focus","suffixOffsets","prefixSelection","offsets","inlineObjectBeforePrefixFocus","selection","inlineObjectBeforePrefixFocusOffset","previousInlineObject","previousInlineObjectOffset","actions","execute","_","type","effect","onDecorate","DecoratorShortcutPlugin","input","useActorRef","decoratorPairMachine","emphasisListener","sendBack","blockOffset","selectionListenerCallback","blockOffsets","forward","deleteBackwardListenerCallback","setup","types","events","actors","fromCallback","createMachine","id","initial","states","invoke","src","target","assign","offsetAfterEmphasis","exit","isEqual","EditorRefPlugin","React","forwardRef","ref","portableTextEditorRef","useRef","Symbol","for","current","useImperativeHandle","displayName","EventListenerPlugin","useEffectEvent","subscription","unsubscribe","createMarkdownBehaviors","automaticBlockquoteOnSpace","selectionCollapsed","focusSpan","spanSelectionPointToBlockOffset","_key","node","blockText","getTextBlockText","caretAtTheEndOfQuote","looksLikeMarkdownQuote","test","blockquoteStyle","style","automaticHr","hrCharacter","hrObject","horizontalRuleObject","focusBlock","textBefore","hrBlockOffsets","placement","block","_type","name","automaticHrOnPaste","originEvent","dataTransfer","getData","hrRegExp","hrCharacters","isTextBlock","children","automaticHeadingOnSpace","markdownHeadingSearch","exec","level","caretAtTheEndOfHeading","headingStyle","clearStyleOnBackspace","atTheBeginningOfBLock","defaultStyle","automaticListOnSpace","looksLikeUnorderedList","unorderedListStyle","caretAtTheEndOfUnorderedList","listItem","listItemLength","looksLikeOrderedList","orderedListStyle","caretAtTheEndOfOrderedList","MarkdownPlugin","unregisterBehavior","t2","boldDecorator","t3","codeDecorator","t4","italicDecorator","t5","strikeThroughDecorator","t6","oneLineBehaviors","select","textBlocks","blocks","filter","reduce","targetBlock","incomingBlock","raise","OneLinePlugin"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8],"debugId":null}}]
}